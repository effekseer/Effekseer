// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EASING_EFFEKSEER_FB_H_
#define FLATBUFFERS_GENERATED_EASING_EFFEKSEER_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "CommonStructures_generated.h"

namespace Effekseer {
namespace FB {

struct EasingFloat;
struct EasingFloatBuilder;

struct EasingVec3F;
struct EasingVec3FBuilder;

enum class Easing3Type : int32_t {
  StartEndSpeed = 0,
  Linear = 1,
  EaseInQuadratic = 10,
  EaseOutQuadratic = 11,
  EaseInOutQuadratic = 12,
  EaseInCubic = 20,
  EaseOutCubic = 21,
  EaseInOutCubic = 22,
  EaseInQuartic = 30,
  EaseOutQuartic = 31,
  EaseInOutQuartic = 32,
  EaseInQuintic = 40,
  EaseOutQuintic = 41,
  EaseInOutQuintic = 42,
  EaseInBack = 50,
  EaseOutBack = 51,
  EaseInOutBack = 52,
  EaseInBounce = 60,
  EaseOutBounce = 61,
  EaseInOutBounce = 62,
  MIN = StartEndSpeed,
  MAX = EaseInOutBounce
};

inline const Easing3Type (&EnumValuesEasing3Type())[20] {
  static const Easing3Type values[] = {
    Easing3Type::StartEndSpeed,
    Easing3Type::Linear,
    Easing3Type::EaseInQuadratic,
    Easing3Type::EaseOutQuadratic,
    Easing3Type::EaseInOutQuadratic,
    Easing3Type::EaseInCubic,
    Easing3Type::EaseOutCubic,
    Easing3Type::EaseInOutCubic,
    Easing3Type::EaseInQuartic,
    Easing3Type::EaseOutQuartic,
    Easing3Type::EaseInOutQuartic,
    Easing3Type::EaseInQuintic,
    Easing3Type::EaseOutQuintic,
    Easing3Type::EaseInOutQuintic,
    Easing3Type::EaseInBack,
    Easing3Type::EaseOutBack,
    Easing3Type::EaseInOutBack,
    Easing3Type::EaseInBounce,
    Easing3Type::EaseOutBounce,
    Easing3Type::EaseInOutBounce
  };
  return values;
}

inline const char * const *EnumNamesEasing3Type() {
  static const char * const names[64] = {
    "StartEndSpeed",
    "Linear",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EaseInQuadratic",
    "EaseOutQuadratic",
    "EaseInOutQuadratic",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EaseInCubic",
    "EaseOutCubic",
    "EaseInOutCubic",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EaseInQuartic",
    "EaseOutQuartic",
    "EaseInOutQuartic",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EaseInQuintic",
    "EaseOutQuintic",
    "EaseInOutQuintic",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EaseInBack",
    "EaseOutBack",
    "EaseInOutBack",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "EaseInBounce",
    "EaseOutBounce",
    "EaseInOutBounce",
    nullptr
  };
  return names;
}

inline const char *EnumNameEasing3Type(Easing3Type e) {
  if (flatbuffers::IsOutRange(e, Easing3Type::StartEndSpeed, Easing3Type::EaseInOutBounce)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEasing3Type()[index];
}

struct EasingFloat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EasingFloatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REF_EQ_S = 4,
    VT_REF_EQ_E = 6,
    VT_REF_EQ_M = 8,
    VT_START = 10,
    VT_END = 12,
    VT_MIDDLE = 14,
    VT_TYPE = 16,
    VT_PARAMS = 18,
    VT_CHANNEL = 20,
    VT_IS_MIDDLE_ENABLED = 22,
    VT_IS_INDIVIDUAL_ENABLED = 24,
    VT_TYPES = 26
  };
  const Effekseer::FB::RefMinMax *ref_eq_s() const {
    return GetStruct<const Effekseer::FB::RefMinMax *>(VT_REF_EQ_S);
  }
  const Effekseer::FB::RefMinMax *ref_eq_e() const {
    return GetStruct<const Effekseer::FB::RefMinMax *>(VT_REF_EQ_E);
  }
  const Effekseer::FB::RefMinMax *ref_eq_m() const {
    return GetStruct<const Effekseer::FB::RefMinMax *>(VT_REF_EQ_M);
  }
  const Effekseer::FB::FloatRange *start() const {
    return GetStruct<const Effekseer::FB::FloatRange *>(VT_START);
  }
  const Effekseer::FB::FloatRange *end() const {
    return GetStruct<const Effekseer::FB::FloatRange *>(VT_END);
  }
  const Effekseer::FB::FloatRange *middle() const {
    return GetStruct<const Effekseer::FB::FloatRange *>(VT_MIDDLE);
  }
  Effekseer::FB::Easing3Type type() const {
    return static_cast<Effekseer::FB::Easing3Type>(GetField<int32_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<float> *params() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_PARAMS);
  }
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  bool is_middle_enabled() const {
    return GetField<uint8_t>(VT_IS_MIDDLE_ENABLED, 0) != 0;
  }
  bool is_individual_enabled() const {
    return GetField<uint8_t>(VT_IS_INDIVIDUAL_ENABLED, 0) != 0;
  }
  const flatbuffers::Vector<int32_t> *types() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_TYPES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Effekseer::FB::RefMinMax>(verifier, VT_REF_EQ_S) &&
           VerifyField<Effekseer::FB::RefMinMax>(verifier, VT_REF_EQ_E) &&
           VerifyField<Effekseer::FB::RefMinMax>(verifier, VT_REF_EQ_M) &&
           VerifyField<Effekseer::FB::FloatRange>(verifier, VT_START) &&
           VerifyField<Effekseer::FB::FloatRange>(verifier, VT_END) &&
           VerifyField<Effekseer::FB::FloatRange>(verifier, VT_MIDDLE) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_PARAMS) &&
           verifier.VerifyVector(params()) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL) &&
           VerifyField<uint8_t>(verifier, VT_IS_MIDDLE_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_IS_INDIVIDUAL_ENABLED) &&
           VerifyOffset(verifier, VT_TYPES) &&
           verifier.VerifyVector(types()) &&
           verifier.EndTable();
  }
};

struct EasingFloatBuilder {
  typedef EasingFloat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ref_eq_s(const Effekseer::FB::RefMinMax *ref_eq_s) {
    fbb_.AddStruct(EasingFloat::VT_REF_EQ_S, ref_eq_s);
  }
  void add_ref_eq_e(const Effekseer::FB::RefMinMax *ref_eq_e) {
    fbb_.AddStruct(EasingFloat::VT_REF_EQ_E, ref_eq_e);
  }
  void add_ref_eq_m(const Effekseer::FB::RefMinMax *ref_eq_m) {
    fbb_.AddStruct(EasingFloat::VT_REF_EQ_M, ref_eq_m);
  }
  void add_start(const Effekseer::FB::FloatRange *start) {
    fbb_.AddStruct(EasingFloat::VT_START, start);
  }
  void add_end(const Effekseer::FB::FloatRange *end) {
    fbb_.AddStruct(EasingFloat::VT_END, end);
  }
  void add_middle(const Effekseer::FB::FloatRange *middle) {
    fbb_.AddStruct(EasingFloat::VT_MIDDLE, middle);
  }
  void add_type(Effekseer::FB::Easing3Type type) {
    fbb_.AddElement<int32_t>(EasingFloat::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_params(flatbuffers::Offset<flatbuffers::Vector<float>> params) {
    fbb_.AddOffset(EasingFloat::VT_PARAMS, params);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(EasingFloat::VT_CHANNEL, channel, 0);
  }
  void add_is_middle_enabled(bool is_middle_enabled) {
    fbb_.AddElement<uint8_t>(EasingFloat::VT_IS_MIDDLE_ENABLED, static_cast<uint8_t>(is_middle_enabled), 0);
  }
  void add_is_individual_enabled(bool is_individual_enabled) {
    fbb_.AddElement<uint8_t>(EasingFloat::VT_IS_INDIVIDUAL_ENABLED, static_cast<uint8_t>(is_individual_enabled), 0);
  }
  void add_types(flatbuffers::Offset<flatbuffers::Vector<int32_t>> types) {
    fbb_.AddOffset(EasingFloat::VT_TYPES, types);
  }
  explicit EasingFloatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EasingFloat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EasingFloat>(end);
    return o;
  }
};

inline flatbuffers::Offset<EasingFloat> CreateEasingFloat(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Effekseer::FB::RefMinMax *ref_eq_s = 0,
    const Effekseer::FB::RefMinMax *ref_eq_e = 0,
    const Effekseer::FB::RefMinMax *ref_eq_m = 0,
    const Effekseer::FB::FloatRange *start = 0,
    const Effekseer::FB::FloatRange *end = 0,
    const Effekseer::FB::FloatRange *middle = 0,
    Effekseer::FB::Easing3Type type = Effekseer::FB::Easing3Type::StartEndSpeed,
    flatbuffers::Offset<flatbuffers::Vector<float>> params = 0,
    int32_t channel = 0,
    bool is_middle_enabled = false,
    bool is_individual_enabled = false,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> types = 0) {
  EasingFloatBuilder builder_(_fbb);
  builder_.add_types(types);
  builder_.add_channel(channel);
  builder_.add_params(params);
  builder_.add_type(type);
  builder_.add_middle(middle);
  builder_.add_end(end);
  builder_.add_start(start);
  builder_.add_ref_eq_m(ref_eq_m);
  builder_.add_ref_eq_e(ref_eq_e);
  builder_.add_ref_eq_s(ref_eq_s);
  builder_.add_is_individual_enabled(is_individual_enabled);
  builder_.add_is_middle_enabled(is_middle_enabled);
  return builder_.Finish();
}

inline flatbuffers::Offset<EasingFloat> CreateEasingFloatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Effekseer::FB::RefMinMax *ref_eq_s = 0,
    const Effekseer::FB::RefMinMax *ref_eq_e = 0,
    const Effekseer::FB::RefMinMax *ref_eq_m = 0,
    const Effekseer::FB::FloatRange *start = 0,
    const Effekseer::FB::FloatRange *end = 0,
    const Effekseer::FB::FloatRange *middle = 0,
    Effekseer::FB::Easing3Type type = Effekseer::FB::Easing3Type::StartEndSpeed,
    const std::vector<float> *params = nullptr,
    int32_t channel = 0,
    bool is_middle_enabled = false,
    bool is_individual_enabled = false,
    const std::vector<int32_t> *types = nullptr) {
  auto params__ = params ? _fbb.CreateVector<float>(*params) : 0;
  auto types__ = types ? _fbb.CreateVector<int32_t>(*types) : 0;
  return Effekseer::FB::CreateEasingFloat(
      _fbb,
      ref_eq_s,
      ref_eq_e,
      ref_eq_m,
      start,
      end,
      middle,
      type,
      params__,
      channel,
      is_middle_enabled,
      is_individual_enabled,
      types__);
}

struct EasingVec3F FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EasingVec3FBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_START = 4,
    VT_END = 6,
    VT_MIDDLE = 8,
    VT_TYPE = 10,
    VT_PARAMS = 12,
    VT_CHANNEL = 14,
    VT_IS_MIDDLE_ENABLED = 16,
    VT_IS_INDIVIDUAL_ENABLED = 18,
    VT_TYPES = 20
  };
  const Effekseer::FB::Vec3FRange *start() const {
    return GetStruct<const Effekseer::FB::Vec3FRange *>(VT_START);
  }
  const Effekseer::FB::Vec3FRange *end() const {
    return GetStruct<const Effekseer::FB::Vec3FRange *>(VT_END);
  }
  const Effekseer::FB::Vec3FRange *middle() const {
    return GetStruct<const Effekseer::FB::Vec3FRange *>(VT_MIDDLE);
  }
  Effekseer::FB::Easing3Type type() const {
    return static_cast<Effekseer::FB::Easing3Type>(GetField<int32_t>(VT_TYPE, 0));
  }
  const flatbuffers::Vector<float> *params() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_PARAMS);
  }
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  bool is_middle_enabled() const {
    return GetField<uint8_t>(VT_IS_MIDDLE_ENABLED, 0) != 0;
  }
  bool is_individual_enabled() const {
    return GetField<uint8_t>(VT_IS_INDIVIDUAL_ENABLED, 0) != 0;
  }
  const flatbuffers::Vector<int32_t> *types() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_TYPES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Effekseer::FB::Vec3FRange>(verifier, VT_START) &&
           VerifyField<Effekseer::FB::Vec3FRange>(verifier, VT_END) &&
           VerifyField<Effekseer::FB::Vec3FRange>(verifier, VT_MIDDLE) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_PARAMS) &&
           verifier.VerifyVector(params()) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL) &&
           VerifyField<uint8_t>(verifier, VT_IS_MIDDLE_ENABLED) &&
           VerifyField<uint8_t>(verifier, VT_IS_INDIVIDUAL_ENABLED) &&
           VerifyOffset(verifier, VT_TYPES) &&
           verifier.VerifyVector(types()) &&
           verifier.EndTable();
  }
};

struct EasingVec3FBuilder {
  typedef EasingVec3F Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_start(const Effekseer::FB::Vec3FRange *start) {
    fbb_.AddStruct(EasingVec3F::VT_START, start);
  }
  void add_end(const Effekseer::FB::Vec3FRange *end) {
    fbb_.AddStruct(EasingVec3F::VT_END, end);
  }
  void add_middle(const Effekseer::FB::Vec3FRange *middle) {
    fbb_.AddStruct(EasingVec3F::VT_MIDDLE, middle);
  }
  void add_type(Effekseer::FB::Easing3Type type) {
    fbb_.AddElement<int32_t>(EasingVec3F::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_params(flatbuffers::Offset<flatbuffers::Vector<float>> params) {
    fbb_.AddOffset(EasingVec3F::VT_PARAMS, params);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(EasingVec3F::VT_CHANNEL, channel, 0);
  }
  void add_is_middle_enabled(bool is_middle_enabled) {
    fbb_.AddElement<uint8_t>(EasingVec3F::VT_IS_MIDDLE_ENABLED, static_cast<uint8_t>(is_middle_enabled), 0);
  }
  void add_is_individual_enabled(bool is_individual_enabled) {
    fbb_.AddElement<uint8_t>(EasingVec3F::VT_IS_INDIVIDUAL_ENABLED, static_cast<uint8_t>(is_individual_enabled), 0);
  }
  void add_types(flatbuffers::Offset<flatbuffers::Vector<int32_t>> types) {
    fbb_.AddOffset(EasingVec3F::VT_TYPES, types);
  }
  explicit EasingVec3FBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EasingVec3F> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EasingVec3F>(end);
    return o;
  }
};

inline flatbuffers::Offset<EasingVec3F> CreateEasingVec3F(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Effekseer::FB::Vec3FRange *start = 0,
    const Effekseer::FB::Vec3FRange *end = 0,
    const Effekseer::FB::Vec3FRange *middle = 0,
    Effekseer::FB::Easing3Type type = Effekseer::FB::Easing3Type::StartEndSpeed,
    flatbuffers::Offset<flatbuffers::Vector<float>> params = 0,
    int32_t channel = 0,
    bool is_middle_enabled = false,
    bool is_individual_enabled = false,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> types = 0) {
  EasingVec3FBuilder builder_(_fbb);
  builder_.add_types(types);
  builder_.add_channel(channel);
  builder_.add_params(params);
  builder_.add_type(type);
  builder_.add_middle(middle);
  builder_.add_end(end);
  builder_.add_start(start);
  builder_.add_is_individual_enabled(is_individual_enabled);
  builder_.add_is_middle_enabled(is_middle_enabled);
  return builder_.Finish();
}

inline flatbuffers::Offset<EasingVec3F> CreateEasingVec3FDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Effekseer::FB::Vec3FRange *start = 0,
    const Effekseer::FB::Vec3FRange *end = 0,
    const Effekseer::FB::Vec3FRange *middle = 0,
    Effekseer::FB::Easing3Type type = Effekseer::FB::Easing3Type::StartEndSpeed,
    const std::vector<float> *params = nullptr,
    int32_t channel = 0,
    bool is_middle_enabled = false,
    bool is_individual_enabled = false,
    const std::vector<int32_t> *types = nullptr) {
  auto params__ = params ? _fbb.CreateVector<float>(*params) : 0;
  auto types__ = types ? _fbb.CreateVector<int32_t>(*types) : 0;
  return Effekseer::FB::CreateEasingVec3F(
      _fbb,
      start,
      end,
      middle,
      type,
      params__,
      channel,
      is_middle_enabled,
      is_individual_enabled,
      types__);
}

}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_EASING_EFFEKSEER_FB_H_
