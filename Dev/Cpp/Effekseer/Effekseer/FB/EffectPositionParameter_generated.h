// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EFFECTPOSITIONPARAMETER_EFFEKSEER_FB_EFFECT_H_
#define FLATBUFFERS_GENERATED_EFFECTPOSITIONPARAMETER_EFFEKSEER_FB_EFFECT_H_

#include "flatbuffers/flatbuffers.h"

#include "EffectStructures_generated.h"
#include "FCurve_generated.h"
#include "CommonStructures_generated.h"
#include "Easing_generated.h"

namespace Effekseer {
namespace FB {
namespace Effect {

struct PositionParameter_Fixed;
struct PositionParameter_FixedBuilder;

struct PositionParameter_PVA;
struct PositionParameter_PVABuilder;

struct PositionParameter_Easing;
struct PositionParameter_EasingBuilder;

struct PositionParameter_FCurve;
struct PositionParameter_FCurveBuilder;

struct PositionParameter_NurbsCurve;
struct PositionParameter_NurbsCurveBuilder;

struct PositionParameter_ViewOffset;
struct PositionParameter_ViewOffsetBuilder;

struct PositionParameter;
struct PositionParameterBuilder;

enum class PositionType : int32_t {
  PositionType_None = -1,
  PositionType_Fixed = 0,
  PositionType_PVA = 1,
  PositionType_Easing = 2,
  PositionType_FCurve = 3,
  PositionType_NurbsCurve = 4,
  PositionType_ViewOffset = 5,
  MIN = PositionType_None,
  MAX = PositionType_ViewOffset
};

inline const PositionType (&EnumValuesPositionType())[7] {
  static const PositionType values[] = {
    PositionType::PositionType_None,
    PositionType::PositionType_Fixed,
    PositionType::PositionType_PVA,
    PositionType::PositionType_Easing,
    PositionType::PositionType_FCurve,
    PositionType::PositionType_NurbsCurve,
    PositionType::PositionType_ViewOffset
  };
  return values;
}

inline const char * const *EnumNamesPositionType() {
  static const char * const names[8] = {
    "PositionType_None",
    "PositionType_Fixed",
    "PositionType_PVA",
    "PositionType_Easing",
    "PositionType_FCurve",
    "PositionType_NurbsCurve",
    "PositionType_ViewOffset",
    nullptr
  };
  return names;
}

inline const char *EnumNamePositionType(PositionType e) {
  if (flatbuffers::IsOutRange(e, PositionType::PositionType_None, PositionType::PositionType_ViewOffset)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(PositionType::PositionType_None);
  return EnumNamesPositionType()[index];
}

struct PositionParameter_Fixed FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameter_FixedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REF_EQ = 4,
    VT_VALUE = 6
  };
  int32_t ref_eq() const {
    return GetField<int32_t>(VT_REF_EQ, -1);
  }
  const Effekseer::FB::Vec3F *value() const {
    return GetStruct<const Effekseer::FB::Vec3F *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_REF_EQ) &&
           VerifyField<Effekseer::FB::Vec3F>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct PositionParameter_FixedBuilder {
  typedef PositionParameter_Fixed Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ref_eq(int32_t ref_eq) {
    fbb_.AddElement<int32_t>(PositionParameter_Fixed::VT_REF_EQ, ref_eq, -1);
  }
  void add_value(const Effekseer::FB::Vec3F *value) {
    fbb_.AddStruct(PositionParameter_Fixed::VT_VALUE, value);
  }
  explicit PositionParameter_FixedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter_Fixed> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter_Fixed>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter_Fixed> CreatePositionParameter_Fixed(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t ref_eq = -1,
    const Effekseer::FB::Vec3F *value = 0) {
  PositionParameter_FixedBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_ref_eq(ref_eq);
  return builder_.Finish();
}

struct PositionParameter_PVA FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameter_PVABuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_VEL = 6,
    VT_ACC = 8
  };
  const Effekseer::FB::Vec3FRange *pos() const {
    return GetStruct<const Effekseer::FB::Vec3FRange *>(VT_POS);
  }
  const Effekseer::FB::Vec3FRange *vel() const {
    return GetStruct<const Effekseer::FB::Vec3FRange *>(VT_VEL);
  }
  const Effekseer::FB::Vec3FRange *acc() const {
    return GetStruct<const Effekseer::FB::Vec3FRange *>(VT_ACC);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Effekseer::FB::Vec3FRange>(verifier, VT_POS) &&
           VerifyField<Effekseer::FB::Vec3FRange>(verifier, VT_VEL) &&
           VerifyField<Effekseer::FB::Vec3FRange>(verifier, VT_ACC) &&
           verifier.EndTable();
  }
};

struct PositionParameter_PVABuilder {
  typedef PositionParameter_PVA Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Effekseer::FB::Vec3FRange *pos) {
    fbb_.AddStruct(PositionParameter_PVA::VT_POS, pos);
  }
  void add_vel(const Effekseer::FB::Vec3FRange *vel) {
    fbb_.AddStruct(PositionParameter_PVA::VT_VEL, vel);
  }
  void add_acc(const Effekseer::FB::Vec3FRange *acc) {
    fbb_.AddStruct(PositionParameter_PVA::VT_ACC, acc);
  }
  explicit PositionParameter_PVABuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter_PVA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter_PVA>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter_PVA> CreatePositionParameter_PVA(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Effekseer::FB::Vec3FRange *pos = 0,
    const Effekseer::FB::Vec3FRange *vel = 0,
    const Effekseer::FB::Vec3FRange *acc = 0) {
  PositionParameter_PVABuilder builder_(_fbb);
  builder_.add_acc(acc);
  builder_.add_vel(vel);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct PositionParameter_Easing FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameter_EasingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCATION = 4
  };
  const Effekseer::FB::Vec3FEasing *location() const {
    return GetPointer<const Effekseer::FB::Vec3FEasing *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyTable(location()) &&
           verifier.EndTable();
  }
};

struct PositionParameter_EasingBuilder {
  typedef PositionParameter_Easing Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_location(flatbuffers::Offset<Effekseer::FB::Vec3FEasing> location) {
    fbb_.AddOffset(PositionParameter_Easing::VT_LOCATION, location);
  }
  explicit PositionParameter_EasingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter_Easing> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter_Easing>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter_Easing> CreatePositionParameter_Easing(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Effekseer::FB::Vec3FEasing> location = 0) {
  PositionParameter_EasingBuilder builder_(_fbb);
  builder_.add_location(location);
  return builder_.Finish();
}

struct PositionParameter_FCurve FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameter_FCurveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FCURVE = 4
  };
  const Effekseer::FB::FCurveGroup *fcurve() const {
    return GetPointer<const Effekseer::FB::FCurveGroup *>(VT_FCURVE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FCURVE) &&
           verifier.VerifyTable(fcurve()) &&
           verifier.EndTable();
  }
};

struct PositionParameter_FCurveBuilder {
  typedef PositionParameter_FCurve Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fcurve(flatbuffers::Offset<Effekseer::FB::FCurveGroup> fcurve) {
    fbb_.AddOffset(PositionParameter_FCurve::VT_FCURVE, fcurve);
  }
  explicit PositionParameter_FCurveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter_FCurve> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter_FCurve>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter_FCurve> CreatePositionParameter_FCurve(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Effekseer::FB::FCurveGroup> fcurve = 0) {
  PositionParameter_FCurveBuilder builder_(_fbb);
  builder_.add_fcurve(fcurve);
  return builder_.Finish();
}

struct PositionParameter_NurbsCurve FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameter_NurbsCurveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_SCALE = 6,
    VT_MOVE_SPEED = 8,
    VT_LOOP_TYPE = 10
  };
  int32_t index() const {
    return GetField<int32_t>(VT_INDEX, 0);
  }
  float scale() const {
    return GetField<float>(VT_SCALE, 0.0f);
  }
  float move_speed() const {
    return GetField<float>(VT_MOVE_SPEED, 0.0f);
  }
  int32_t loop_type() const {
    return GetField<int32_t>(VT_LOOP_TYPE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INDEX) &&
           VerifyField<float>(verifier, VT_SCALE) &&
           VerifyField<float>(verifier, VT_MOVE_SPEED) &&
           VerifyField<int32_t>(verifier, VT_LOOP_TYPE) &&
           verifier.EndTable();
  }
};

struct PositionParameter_NurbsCurveBuilder {
  typedef PositionParameter_NurbsCurve Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_index(int32_t index) {
    fbb_.AddElement<int32_t>(PositionParameter_NurbsCurve::VT_INDEX, index, 0);
  }
  void add_scale(float scale) {
    fbb_.AddElement<float>(PositionParameter_NurbsCurve::VT_SCALE, scale, 0.0f);
  }
  void add_move_speed(float move_speed) {
    fbb_.AddElement<float>(PositionParameter_NurbsCurve::VT_MOVE_SPEED, move_speed, 0.0f);
  }
  void add_loop_type(int32_t loop_type) {
    fbb_.AddElement<int32_t>(PositionParameter_NurbsCurve::VT_LOOP_TYPE, loop_type, 0);
  }
  explicit PositionParameter_NurbsCurveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter_NurbsCurve> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter_NurbsCurve>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter_NurbsCurve> CreatePositionParameter_NurbsCurve(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t index = 0,
    float scale = 0.0f,
    float move_speed = 0.0f,
    int32_t loop_type = 0) {
  PositionParameter_NurbsCurveBuilder builder_(_fbb);
  builder_.add_loop_type(loop_type);
  builder_.add_move_speed(move_speed);
  builder_.add_scale(scale);
  builder_.add_index(index);
  return builder_.Finish();
}

struct PositionParameter_ViewOffset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameter_ViewOffsetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DISTANCE = 4
  };
  const Effekseer::FB::FloatRange *distance() const {
    return GetStruct<const Effekseer::FB::FloatRange *>(VT_DISTANCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Effekseer::FB::FloatRange>(verifier, VT_DISTANCE) &&
           verifier.EndTable();
  }
};

struct PositionParameter_ViewOffsetBuilder {
  typedef PositionParameter_ViewOffset Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_distance(const Effekseer::FB::FloatRange *distance) {
    fbb_.AddStruct(PositionParameter_ViewOffset::VT_DISTANCE, distance);
  }
  explicit PositionParameter_ViewOffsetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter_ViewOffset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter_ViewOffset>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter_ViewOffset> CreatePositionParameter_ViewOffset(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Effekseer::FB::FloatRange *distance = 0) {
  PositionParameter_ViewOffsetBuilder builder_(_fbb);
  builder_.add_distance(distance);
  return builder_.Finish();
}

struct PositionParameter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionParameterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_FIXED = 6,
    VT_PVA = 8,
    VT_EASING = 10,
    VT_FCURVE = 12,
    VT_NURBS_CURVE = 14,
    VT_VIEW_OFFSET = 16
  };
  Effekseer::FB::Effect::PositionType type() const {
    return static_cast<Effekseer::FB::Effect::PositionType>(GetField<int32_t>(VT_TYPE, 0));
  }
  const Effekseer::FB::Effect::PositionParameter_Fixed *fixed() const {
    return GetPointer<const Effekseer::FB::Effect::PositionParameter_Fixed *>(VT_FIXED);
  }
  const Effekseer::FB::Effect::PositionParameter_PVA *pva() const {
    return GetPointer<const Effekseer::FB::Effect::PositionParameter_PVA *>(VT_PVA);
  }
  const Effekseer::FB::Effect::PositionParameter_Easing *easing() const {
    return GetPointer<const Effekseer::FB::Effect::PositionParameter_Easing *>(VT_EASING);
  }
  const Effekseer::FB::Effect::PositionParameter_FCurve *fcurve() const {
    return GetPointer<const Effekseer::FB::Effect::PositionParameter_FCurve *>(VT_FCURVE);
  }
  const Effekseer::FB::Effect::PositionParameter_NurbsCurve *nurbs_curve() const {
    return GetPointer<const Effekseer::FB::Effect::PositionParameter_NurbsCurve *>(VT_NURBS_CURVE);
  }
  const Effekseer::FB::Effect::PositionParameter_ViewOffset *view_offset() const {
    return GetPointer<const Effekseer::FB::Effect::PositionParameter_ViewOffset *>(VT_VIEW_OFFSET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_FIXED) &&
           verifier.VerifyTable(fixed()) &&
           VerifyOffset(verifier, VT_PVA) &&
           verifier.VerifyTable(pva()) &&
           VerifyOffset(verifier, VT_EASING) &&
           verifier.VerifyTable(easing()) &&
           VerifyOffset(verifier, VT_FCURVE) &&
           verifier.VerifyTable(fcurve()) &&
           VerifyOffset(verifier, VT_NURBS_CURVE) &&
           verifier.VerifyTable(nurbs_curve()) &&
           VerifyOffset(verifier, VT_VIEW_OFFSET) &&
           verifier.VerifyTable(view_offset()) &&
           verifier.EndTable();
  }
};

struct PositionParameterBuilder {
  typedef PositionParameter Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(Effekseer::FB::Effect::PositionType type) {
    fbb_.AddElement<int32_t>(PositionParameter::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_fixed(flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_Fixed> fixed) {
    fbb_.AddOffset(PositionParameter::VT_FIXED, fixed);
  }
  void add_pva(flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_PVA> pva) {
    fbb_.AddOffset(PositionParameter::VT_PVA, pva);
  }
  void add_easing(flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_Easing> easing) {
    fbb_.AddOffset(PositionParameter::VT_EASING, easing);
  }
  void add_fcurve(flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_FCurve> fcurve) {
    fbb_.AddOffset(PositionParameter::VT_FCURVE, fcurve);
  }
  void add_nurbs_curve(flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_NurbsCurve> nurbs_curve) {
    fbb_.AddOffset(PositionParameter::VT_NURBS_CURVE, nurbs_curve);
  }
  void add_view_offset(flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_ViewOffset> view_offset) {
    fbb_.AddOffset(PositionParameter::VT_VIEW_OFFSET, view_offset);
  }
  explicit PositionParameterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionParameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionParameter>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionParameter> CreatePositionParameter(
    flatbuffers::FlatBufferBuilder &_fbb,
    Effekseer::FB::Effect::PositionType type = Effekseer::FB::Effect::PositionType::PositionType_Fixed,
    flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_Fixed> fixed = 0,
    flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_PVA> pva = 0,
    flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_Easing> easing = 0,
    flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_FCurve> fcurve = 0,
    flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_NurbsCurve> nurbs_curve = 0,
    flatbuffers::Offset<Effekseer::FB::Effect::PositionParameter_ViewOffset> view_offset = 0) {
  PositionParameterBuilder builder_(_fbb);
  builder_.add_view_offset(view_offset);
  builder_.add_nurbs_curve(nurbs_curve);
  builder_.add_fcurve(fcurve);
  builder_.add_easing(easing);
  builder_.add_pva(pva);
  builder_.add_fixed(fixed);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace Effect
}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_EFFECTPOSITIONPARAMETER_EFFEKSEER_FB_EFFECT_H_
