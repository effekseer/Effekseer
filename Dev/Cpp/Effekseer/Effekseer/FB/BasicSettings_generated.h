// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASICSETTINGS_EFFEKSEER_FB_H_
#define FLATBUFFERS_GENERATED_BASICSETTINGS_EFFEKSEER_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "CommonStructures_generated.h"

namespace Effekseer {
namespace FB {

struct BasicSettings;
struct BasicSettingsBuilder;

struct BasicSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BasicSettingsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REF_EQ_MAX_GENERATION = 4,
    VT_REF_WQ_LIFE = 6,
    VT_REF_WQ_GENERATION_TIME = 8,
    VT_REF_WQ_GENERATION_TIME_OFFSET = 10,
    VT_MAX_GENERATION = 12,
    VT_TRANSLATION_BIND_TYPE = 14,
    VT_ROTATION_BIND_TYPE = 16,
    VT_SCALING_BIND_TYPE = 18,
    VT_REMOVE_WHEN_LIFE_IS_EXTINCT = 20,
    VT_REMOVE_WHEN_PARENT_IS_REMOVED = 22,
    VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT = 24,
    VT_LIFE = 26,
    VT_GENERATION_TIME = 28,
    VT_GENERATION_TIME_OFFSET = 30
  };
  int32_t ref_eq_max_generation() const {
    return GetField<int32_t>(VT_REF_EQ_MAX_GENERATION, -1);
  }
  const Effekseer::FB::RefMinMax *ref_wq_life() const {
    return GetStruct<const Effekseer::FB::RefMinMax *>(VT_REF_WQ_LIFE);
  }
  const Effekseer::FB::RefMinMax *ref_wq_generation_time() const {
    return GetStruct<const Effekseer::FB::RefMinMax *>(VT_REF_WQ_GENERATION_TIME);
  }
  const Effekseer::FB::RefMinMax *ref_wq_generation_time_offset() const {
    return GetStruct<const Effekseer::FB::RefMinMax *>(VT_REF_WQ_GENERATION_TIME_OFFSET);
  }
  int32_t max_generation() const {
    return GetField<int32_t>(VT_MAX_GENERATION, 1);
  }
  Effekseer::FB::TranslationParentBindType translation_bind_type() const {
    return static_cast<Effekseer::FB::TranslationParentBindType>(GetField<int32_t>(VT_TRANSLATION_BIND_TYPE, 2));
  }
  Effekseer::FB::BindType rotation_bind_type() const {
    return static_cast<Effekseer::FB::BindType>(GetField<int32_t>(VT_ROTATION_BIND_TYPE, 2));
  }
  Effekseer::FB::BindType scaling_bind_type() const {
    return static_cast<Effekseer::FB::BindType>(GetField<int32_t>(VT_SCALING_BIND_TYPE, 2));
  }
  int32_t remove_when_life_is_extinct() const {
    return GetField<int32_t>(VT_REMOVE_WHEN_LIFE_IS_EXTINCT, 1);
  }
  int32_t remove_when_parent_is_removed() const {
    return GetField<int32_t>(VT_REMOVE_WHEN_PARENT_IS_REMOVED, 0);
  }
  int32_t remove_when_children_is_extinct() const {
    return GetField<int32_t>(VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT, 0);
  }
  const Effekseer::FB::IntRange *life() const {
    return GetStruct<const Effekseer::FB::IntRange *>(VT_LIFE);
  }
  const Effekseer::FB::FloatRange *generation_time() const {
    return GetStruct<const Effekseer::FB::FloatRange *>(VT_GENERATION_TIME);
  }
  const Effekseer::FB::FloatRange *generation_time_offset() const {
    return GetStruct<const Effekseer::FB::FloatRange *>(VT_GENERATION_TIME_OFFSET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_REF_EQ_MAX_GENERATION) &&
           VerifyField<Effekseer::FB::RefMinMax>(verifier, VT_REF_WQ_LIFE) &&
           VerifyField<Effekseer::FB::RefMinMax>(verifier, VT_REF_WQ_GENERATION_TIME) &&
           VerifyField<Effekseer::FB::RefMinMax>(verifier, VT_REF_WQ_GENERATION_TIME_OFFSET) &&
           VerifyField<int32_t>(verifier, VT_MAX_GENERATION) &&
           VerifyField<int32_t>(verifier, VT_TRANSLATION_BIND_TYPE) &&
           VerifyField<int32_t>(verifier, VT_ROTATION_BIND_TYPE) &&
           VerifyField<int32_t>(verifier, VT_SCALING_BIND_TYPE) &&
           VerifyField<int32_t>(verifier, VT_REMOVE_WHEN_LIFE_IS_EXTINCT) &&
           VerifyField<int32_t>(verifier, VT_REMOVE_WHEN_PARENT_IS_REMOVED) &&
           VerifyField<int32_t>(verifier, VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT) &&
           VerifyField<Effekseer::FB::IntRange>(verifier, VT_LIFE) &&
           VerifyField<Effekseer::FB::FloatRange>(verifier, VT_GENERATION_TIME) &&
           VerifyField<Effekseer::FB::FloatRange>(verifier, VT_GENERATION_TIME_OFFSET) &&
           verifier.EndTable();
  }
};

struct BasicSettingsBuilder {
  typedef BasicSettings Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ref_eq_max_generation(int32_t ref_eq_max_generation) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REF_EQ_MAX_GENERATION, ref_eq_max_generation, -1);
  }
  void add_ref_wq_life(const Effekseer::FB::RefMinMax *ref_wq_life) {
    fbb_.AddStruct(BasicSettings::VT_REF_WQ_LIFE, ref_wq_life);
  }
  void add_ref_wq_generation_time(const Effekseer::FB::RefMinMax *ref_wq_generation_time) {
    fbb_.AddStruct(BasicSettings::VT_REF_WQ_GENERATION_TIME, ref_wq_generation_time);
  }
  void add_ref_wq_generation_time_offset(const Effekseer::FB::RefMinMax *ref_wq_generation_time_offset) {
    fbb_.AddStruct(BasicSettings::VT_REF_WQ_GENERATION_TIME_OFFSET, ref_wq_generation_time_offset);
  }
  void add_max_generation(int32_t max_generation) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_MAX_GENERATION, max_generation, 1);
  }
  void add_translation_bind_type(Effekseer::FB::TranslationParentBindType translation_bind_type) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_TRANSLATION_BIND_TYPE, static_cast<int32_t>(translation_bind_type), 2);
  }
  void add_rotation_bind_type(Effekseer::FB::BindType rotation_bind_type) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_ROTATION_BIND_TYPE, static_cast<int32_t>(rotation_bind_type), 2);
  }
  void add_scaling_bind_type(Effekseer::FB::BindType scaling_bind_type) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_SCALING_BIND_TYPE, static_cast<int32_t>(scaling_bind_type), 2);
  }
  void add_remove_when_life_is_extinct(int32_t remove_when_life_is_extinct) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REMOVE_WHEN_LIFE_IS_EXTINCT, remove_when_life_is_extinct, 1);
  }
  void add_remove_when_parent_is_removed(int32_t remove_when_parent_is_removed) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REMOVE_WHEN_PARENT_IS_REMOVED, remove_when_parent_is_removed, 0);
  }
  void add_remove_when_children_is_extinct(int32_t remove_when_children_is_extinct) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT, remove_when_children_is_extinct, 0);
  }
  void add_life(const Effekseer::FB::IntRange *life) {
    fbb_.AddStruct(BasicSettings::VT_LIFE, life);
  }
  void add_generation_time(const Effekseer::FB::FloatRange *generation_time) {
    fbb_.AddStruct(BasicSettings::VT_GENERATION_TIME, generation_time);
  }
  void add_generation_time_offset(const Effekseer::FB::FloatRange *generation_time_offset) {
    fbb_.AddStruct(BasicSettings::VT_GENERATION_TIME_OFFSET, generation_time_offset);
  }
  explicit BasicSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BasicSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BasicSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<BasicSettings> CreateBasicSettings(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t ref_eq_max_generation = -1,
    const Effekseer::FB::RefMinMax *ref_wq_life = 0,
    const Effekseer::FB::RefMinMax *ref_wq_generation_time = 0,
    const Effekseer::FB::RefMinMax *ref_wq_generation_time_offset = 0,
    int32_t max_generation = 1,
    Effekseer::FB::TranslationParentBindType translation_bind_type = Effekseer::FB::TranslationParentBindType::TranslationParentBindType_Always,
    Effekseer::FB::BindType rotation_bind_type = Effekseer::FB::BindType::BindType_Always,
    Effekseer::FB::BindType scaling_bind_type = Effekseer::FB::BindType::BindType_Always,
    int32_t remove_when_life_is_extinct = 1,
    int32_t remove_when_parent_is_removed = 0,
    int32_t remove_when_children_is_extinct = 0,
    const Effekseer::FB::IntRange *life = 0,
    const Effekseer::FB::FloatRange *generation_time = 0,
    const Effekseer::FB::FloatRange *generation_time_offset = 0) {
  BasicSettingsBuilder builder_(_fbb);
  builder_.add_generation_time_offset(generation_time_offset);
  builder_.add_generation_time(generation_time);
  builder_.add_life(life);
  builder_.add_remove_when_children_is_extinct(remove_when_children_is_extinct);
  builder_.add_remove_when_parent_is_removed(remove_when_parent_is_removed);
  builder_.add_remove_when_life_is_extinct(remove_when_life_is_extinct);
  builder_.add_scaling_bind_type(scaling_bind_type);
  builder_.add_rotation_bind_type(rotation_bind_type);
  builder_.add_translation_bind_type(translation_bind_type);
  builder_.add_max_generation(max_generation);
  builder_.add_ref_wq_generation_time_offset(ref_wq_generation_time_offset);
  builder_.add_ref_wq_generation_time(ref_wq_generation_time);
  builder_.add_ref_wq_life(ref_wq_life);
  builder_.add_ref_eq_max_generation(ref_eq_max_generation);
  return builder_.Finish();
}

}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_BASICSETTINGS_EFFEKSEER_FB_H_
