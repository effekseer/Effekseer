// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASICSETTINGS_EFFEKSEER_FB_H_
#define FLATBUFFERS_GENERATED_BASICSETTINGS_EFFEKSEER_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "CommonStructures_generated.h"

namespace Effekseer {
namespace FB {

struct BasicSettings;
struct BasicSettingsBuilder;

enum TranslationParentBindType : int32_t {
  TranslationParentBindType_TranslationParentBindType_NotBind = 0,
  TranslationParentBindType_TranslationParentBindType_WhenCreating = 1,
  TranslationParentBindType_TranslationParentBindType_Always = 2,
  TranslationParentBindType_TranslationParentBindType_NotBind_Root = 3,
  TranslationParentBindType_TranslationParentBindType_NotBind_FollowParent = 4,
  TranslationParentBindType_TranslationParentBindType_WhenCreating_FollowParent = 5,
  TranslationParentBindType_MIN = TranslationParentBindType_TranslationParentBindType_NotBind,
  TranslationParentBindType_MAX = TranslationParentBindType_TranslationParentBindType_WhenCreating_FollowParent
};

inline const TranslationParentBindType (&EnumValuesTranslationParentBindType())[6] {
  static const TranslationParentBindType values[] = {
    TranslationParentBindType_TranslationParentBindType_NotBind,
    TranslationParentBindType_TranslationParentBindType_WhenCreating,
    TranslationParentBindType_TranslationParentBindType_Always,
    TranslationParentBindType_TranslationParentBindType_NotBind_Root,
    TranslationParentBindType_TranslationParentBindType_NotBind_FollowParent,
    TranslationParentBindType_TranslationParentBindType_WhenCreating_FollowParent
  };
  return values;
}

inline const char * const *EnumNamesTranslationParentBindType() {
  static const char * const names[7] = {
    "TranslationParentBindType_NotBind",
    "TranslationParentBindType_WhenCreating",
    "TranslationParentBindType_Always",
    "TranslationParentBindType_NotBind_Root",
    "TranslationParentBindType_NotBind_FollowParent",
    "TranslationParentBindType_WhenCreating_FollowParent",
    nullptr
  };
  return names;
}

inline const char *EnumNameTranslationParentBindType(TranslationParentBindType e) {
  if (flatbuffers::IsOutRange(e, TranslationParentBindType_TranslationParentBindType_NotBind, TranslationParentBindType_TranslationParentBindType_WhenCreating_FollowParent)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTranslationParentBindType()[index];
}

enum BindType : int32_t {
  BindType_BindType_NotBind = 0,
  BindType_BindType_WhenCreating = 1,
  BindType_BindType_Always = 2,
  BindType_BindType_NotBind_Root = 3,
  BindType_MIN = BindType_BindType_NotBind,
  BindType_MAX = BindType_BindType_NotBind_Root
};

inline const BindType (&EnumValuesBindType())[4] {
  static const BindType values[] = {
    BindType_BindType_NotBind,
    BindType_BindType_WhenCreating,
    BindType_BindType_Always,
    BindType_BindType_NotBind_Root
  };
  return values;
}

inline const char * const *EnumNamesBindType() {
  static const char * const names[5] = {
    "BindType_NotBind",
    "BindType_WhenCreating",
    "BindType_Always",
    "BindType_NotBind_Root",
    nullptr
  };
  return names;
}

inline const char *EnumNameBindType(BindType e) {
  if (flatbuffers::IsOutRange(e, BindType_BindType_NotBind, BindType_BindType_NotBind_Root)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBindType()[index];
}

struct BasicSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BasicSettingsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAX_GENERATION = 4,
    VT_TRANSLATION_BIND_TYPE = 6,
    VT_ROTATION_BIND_TYPE = 8,
    VT_SCALING_BIND_TYPE = 10,
    VT_REMOVE_WHEN_LIFE_IS_EXTINCT = 12,
    VT_REMOVE_WHEN_PARENT_IS_REMOVED = 14,
    VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT = 16
  };
  int32_t max_generation() const {
    return GetField<int32_t>(VT_MAX_GENERATION, 1);
  }
  Effekseer::FB::TranslationParentBindType translation_bind_type() const {
    return static_cast<Effekseer::FB::TranslationParentBindType>(GetField<int32_t>(VT_TRANSLATION_BIND_TYPE, 2));
  }
  Effekseer::FB::BindType rotation_bind_type() const {
    return static_cast<Effekseer::FB::BindType>(GetField<int32_t>(VT_ROTATION_BIND_TYPE, 2));
  }
  Effekseer::FB::BindType scaling_bind_type() const {
    return static_cast<Effekseer::FB::BindType>(GetField<int32_t>(VT_SCALING_BIND_TYPE, 2));
  }
  int32_t remove_when_life_is_extinct() const {
    return GetField<int32_t>(VT_REMOVE_WHEN_LIFE_IS_EXTINCT, 1);
  }
  int32_t remove_when_parent_is_removed() const {
    return GetField<int32_t>(VT_REMOVE_WHEN_PARENT_IS_REMOVED, 0);
  }
  int32_t remove_when_children_is_extinct() const {
    return GetField<int32_t>(VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MAX_GENERATION) &&
           VerifyField<int32_t>(verifier, VT_TRANSLATION_BIND_TYPE) &&
           VerifyField<int32_t>(verifier, VT_ROTATION_BIND_TYPE) &&
           VerifyField<int32_t>(verifier, VT_SCALING_BIND_TYPE) &&
           VerifyField<int32_t>(verifier, VT_REMOVE_WHEN_LIFE_IS_EXTINCT) &&
           VerifyField<int32_t>(verifier, VT_REMOVE_WHEN_PARENT_IS_REMOVED) &&
           VerifyField<int32_t>(verifier, VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT) &&
           verifier.EndTable();
  }
};

struct BasicSettingsBuilder {
  typedef BasicSettings Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_max_generation(int32_t max_generation) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_MAX_GENERATION, max_generation, 1);
  }
  void add_translation_bind_type(Effekseer::FB::TranslationParentBindType translation_bind_type) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_TRANSLATION_BIND_TYPE, static_cast<int32_t>(translation_bind_type), 2);
  }
  void add_rotation_bind_type(Effekseer::FB::BindType rotation_bind_type) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_ROTATION_BIND_TYPE, static_cast<int32_t>(rotation_bind_type), 2);
  }
  void add_scaling_bind_type(Effekseer::FB::BindType scaling_bind_type) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_SCALING_BIND_TYPE, static_cast<int32_t>(scaling_bind_type), 2);
  }
  void add_remove_when_life_is_extinct(int32_t remove_when_life_is_extinct) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REMOVE_WHEN_LIFE_IS_EXTINCT, remove_when_life_is_extinct, 1);
  }
  void add_remove_when_parent_is_removed(int32_t remove_when_parent_is_removed) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REMOVE_WHEN_PARENT_IS_REMOVED, remove_when_parent_is_removed, 0);
  }
  void add_remove_when_children_is_extinct(int32_t remove_when_children_is_extinct) {
    fbb_.AddElement<int32_t>(BasicSettings::VT_REMOVE_WHEN_CHILDREN_IS_EXTINCT, remove_when_children_is_extinct, 0);
  }
  explicit BasicSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BasicSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BasicSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<BasicSettings> CreateBasicSettings(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t max_generation = 1,
    Effekseer::FB::TranslationParentBindType translation_bind_type = Effekseer::FB::TranslationParentBindType_TranslationParentBindType_Always,
    Effekseer::FB::BindType rotation_bind_type = Effekseer::FB::BindType_BindType_Always,
    Effekseer::FB::BindType scaling_bind_type = Effekseer::FB::BindType_BindType_Always,
    int32_t remove_when_life_is_extinct = 1,
    int32_t remove_when_parent_is_removed = 0,
    int32_t remove_when_children_is_extinct = 0) {
  BasicSettingsBuilder builder_(_fbb);
  builder_.add_remove_when_children_is_extinct(remove_when_children_is_extinct);
  builder_.add_remove_when_parent_is_removed(remove_when_parent_is_removed);
  builder_.add_remove_when_life_is_extinct(remove_when_life_is_extinct);
  builder_.add_scaling_bind_type(scaling_bind_type);
  builder_.add_rotation_bind_type(rotation_bind_type);
  builder_.add_translation_bind_type(translation_bind_type);
  builder_.add_max_generation(max_generation);
  return builder_.Finish();
}

}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_BASICSETTINGS_EFFEKSEER_FB_H_
