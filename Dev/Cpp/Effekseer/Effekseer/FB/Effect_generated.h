// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EFFECT_EFFEKSEER_FB_EFFECT_H_
#define FLATBUFFERS_GENERATED_EFFECT_EFFEKSEER_FB_EFFECT_H_

#include "flatbuffers/flatbuffers.h"

#include "EffectStructures_generated.h"
#include "Node_generated.h"
#include "EffectBasicParameter_generated.h"
#include "EffectPositionParameter_generated.h"
#include "FCurve_generated.h"
#include "CommonStructures_generated.h"
#include "Easing_generated.h"

namespace Effekseer {
namespace FB {
namespace Effect {

struct EffectAsset;
struct EffectAssetBuilder;

struct EffectAsset FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EffectAssetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXTURES = 4,
    VT_ROOT_NODE = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Effekseer::FB::Effect::TextureProperty>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Effekseer::FB::Effect::TextureProperty>> *>(VT_TEXTURES);
  }
  const Effekseer::FB::Effect::Node *root_node() const {
    return GetPointer<const Effekseer::FB::Effect::Node *>(VT_ROOT_NODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           VerifyOffset(verifier, VT_ROOT_NODE) &&
           verifier.VerifyTable(root_node()) &&
           verifier.EndTable();
  }
};

struct EffectAssetBuilder {
  typedef EffectAsset Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Effekseer::FB::Effect::TextureProperty>>> textures) {
    fbb_.AddOffset(EffectAsset::VT_TEXTURES, textures);
  }
  void add_root_node(flatbuffers::Offset<Effekseer::FB::Effect::Node> root_node) {
    fbb_.AddOffset(EffectAsset::VT_ROOT_NODE, root_node);
  }
  explicit EffectAssetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EffectAsset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EffectAsset>(end);
    return o;
  }
};

inline flatbuffers::Offset<EffectAsset> CreateEffectAsset(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Effekseer::FB::Effect::TextureProperty>>> textures = 0,
    flatbuffers::Offset<Effekseer::FB::Effect::Node> root_node = 0) {
  EffectAssetBuilder builder_(_fbb);
  builder_.add_root_node(root_node);
  builder_.add_textures(textures);
  return builder_.Finish();
}

inline flatbuffers::Offset<EffectAsset> CreateEffectAssetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Effekseer::FB::Effect::TextureProperty>> *textures = nullptr,
    flatbuffers::Offset<Effekseer::FB::Effect::Node> root_node = 0) {
  auto textures__ = textures ? _fbb.CreateVector<flatbuffers::Offset<Effekseer::FB::Effect::TextureProperty>>(*textures) : 0;
  return Effekseer::FB::Effect::CreateEffectAsset(
      _fbb,
      textures__,
      root_node);
}

inline const Effekseer::FB::Effect::EffectAsset *GetEffectAsset(const void *buf) {
  return flatbuffers::GetRoot<Effekseer::FB::Effect::EffectAsset>(buf);
}

inline const Effekseer::FB::Effect::EffectAsset *GetSizePrefixedEffectAsset(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Effekseer::FB::Effect::EffectAsset>(buf);
}

inline bool VerifyEffectAssetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Effekseer::FB::Effect::EffectAsset>(nullptr);
}

inline bool VerifySizePrefixedEffectAssetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Effekseer::FB::Effect::EffectAsset>(nullptr);
}

inline void FinishEffectAssetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Effekseer::FB::Effect::EffectAsset> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEffectAssetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Effekseer::FB::Effect::EffectAsset> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Effect
}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_EFFECT_EFFEKSEER_FB_EFFECT_H_
