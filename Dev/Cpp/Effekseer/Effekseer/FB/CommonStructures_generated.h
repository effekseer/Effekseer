// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMONSTRUCTURES_EFFEKSEER_FB_H_
#define FLATBUFFERS_GENERATED_COMMONSTRUCTURES_EFFEKSEER_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace Effekseer {
namespace FB {

struct IntRange;

struct FloatRange;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) IntRange FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t min_;
  int32_t max_;

 public:
  IntRange()
      : min_(0),
        max_(0) {
  }
  IntRange(int32_t _min, int32_t _max)
      : min_(flatbuffers::EndianScalar(_min)),
        max_(flatbuffers::EndianScalar(_max)) {
  }
  int32_t min() const {
    return flatbuffers::EndianScalar(min_);
  }
  int32_t max() const {
    return flatbuffers::EndianScalar(max_);
  }
};
FLATBUFFERS_STRUCT_END(IntRange, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FloatRange FLATBUFFERS_FINAL_CLASS {
 private:
  float min_;
  float max_;

 public:
  FloatRange()
      : min_(0),
        max_(0) {
  }
  FloatRange(float _min, float _max)
      : min_(flatbuffers::EndianScalar(_min)),
        max_(flatbuffers::EndianScalar(_max)) {
  }
  float min() const {
    return flatbuffers::EndianScalar(min_);
  }
  float max() const {
    return flatbuffers::EndianScalar(max_);
  }
};
FLATBUFFERS_STRUCT_END(FloatRange, 8);

}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_COMMONSTRUCTURES_EFFEKSEER_FB_H_
