// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMONSTRUCTURES_EFFEKSEER_FB_H_
#define FLATBUFFERS_GENERATED_COMMONSTRUCTURES_EFFEKSEER_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace Effekseer {
namespace FB {

struct Vec3F;

struct RefMinMax;

struct IntRef;

struct FloatRef;

struct IntRange;

struct FloatRange;

struct Vec3FRange;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3F FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3F()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3F(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3F, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) RefMinMax FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t min_;
  int32_t max_;

 public:
  RefMinMax()
      : min_(0),
        max_(0) {
  }
  RefMinMax(int32_t _min, int32_t _max)
      : min_(flatbuffers::EndianScalar(_min)),
        max_(flatbuffers::EndianScalar(_max)) {
  }
  int32_t min() const {
    return flatbuffers::EndianScalar(min_);
  }
  int32_t max() const {
    return flatbuffers::EndianScalar(max_);
  }
};
FLATBUFFERS_STRUCT_END(RefMinMax, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) IntRef FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t ref_eq_;
  int32_t value_;

 public:
  IntRef()
      : ref_eq_(0),
        value_(0) {
  }
  IntRef(int32_t _ref_eq, int32_t _value)
      : ref_eq_(flatbuffers::EndianScalar(_ref_eq)),
        value_(flatbuffers::EndianScalar(_value)) {
  }
  int32_t ref_eq() const {
    return flatbuffers::EndianScalar(ref_eq_);
  }
  int32_t value() const {
    return flatbuffers::EndianScalar(value_);
  }
};
FLATBUFFERS_STRUCT_END(IntRef, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FloatRef FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t ref_eq_;
  float value_;

 public:
  FloatRef()
      : ref_eq_(0),
        value_(0) {
  }
  FloatRef(int32_t _ref_eq, float _value)
      : ref_eq_(flatbuffers::EndianScalar(_ref_eq)),
        value_(flatbuffers::EndianScalar(_value)) {
  }
  int32_t ref_eq() const {
    return flatbuffers::EndianScalar(ref_eq_);
  }
  float value() const {
    return flatbuffers::EndianScalar(value_);
  }
};
FLATBUFFERS_STRUCT_END(FloatRef, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) IntRange FLATBUFFERS_FINAL_CLASS {
 private:
  Effekseer::FB::RefMinMax ref_eq_;
  int32_t min_;
  int32_t max_;

 public:
  IntRange()
      : ref_eq_(),
        min_(0),
        max_(0) {
  }
  IntRange(const Effekseer::FB::RefMinMax &_ref_eq, int32_t _min, int32_t _max)
      : ref_eq_(_ref_eq),
        min_(flatbuffers::EndianScalar(_min)),
        max_(flatbuffers::EndianScalar(_max)) {
  }
  const Effekseer::FB::RefMinMax &ref_eq() const {
    return ref_eq_;
  }
  int32_t min() const {
    return flatbuffers::EndianScalar(min_);
  }
  int32_t max() const {
    return flatbuffers::EndianScalar(max_);
  }
};
FLATBUFFERS_STRUCT_END(IntRange, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FloatRange FLATBUFFERS_FINAL_CLASS {
 private:
  Effekseer::FB::RefMinMax ref_eq_;
  float min_;
  float max_;

 public:
  FloatRange()
      : ref_eq_(),
        min_(0),
        max_(0) {
  }
  FloatRange(const Effekseer::FB::RefMinMax &_ref_eq, float _min, float _max)
      : ref_eq_(_ref_eq),
        min_(flatbuffers::EndianScalar(_min)),
        max_(flatbuffers::EndianScalar(_max)) {
  }
  const Effekseer::FB::RefMinMax &ref_eq() const {
    return ref_eq_;
  }
  float min() const {
    return flatbuffers::EndianScalar(min_);
  }
  float max() const {
    return flatbuffers::EndianScalar(max_);
  }
};
FLATBUFFERS_STRUCT_END(FloatRange, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3FRange FLATBUFFERS_FINAL_CLASS {
 private:
  Effekseer::FB::RefMinMax ref_eq_;
  Effekseer::FB::Vec3F min_;
  Effekseer::FB::Vec3F max_;

 public:
  Vec3FRange()
      : ref_eq_(),
        min_(),
        max_() {
  }
  Vec3FRange(const Effekseer::FB::RefMinMax &_ref_eq, const Effekseer::FB::Vec3F &_min, const Effekseer::FB::Vec3F &_max)
      : ref_eq_(_ref_eq),
        min_(_min),
        max_(_max) {
  }
  const Effekseer::FB::RefMinMax &ref_eq() const {
    return ref_eq_;
  }
  const Effekseer::FB::Vec3F &min() const {
    return min_;
  }
  const Effekseer::FB::Vec3F &max() const {
    return max_;
  }
};
FLATBUFFERS_STRUCT_END(Vec3FRange, 32);

}  // namespace FB
}  // namespace Effekseer

#endif  // FLATBUFFERS_GENERATED_COMMONSTRUCTURES_EFFEKSEER_FB_H_
