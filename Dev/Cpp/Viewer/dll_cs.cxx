/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_EffekseerNative(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_EffekseerNative(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_EffekseerNative(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_EffekseerNative(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#include "efk.Base.h"
#include "GUI/efk.ImageResource.h"
#include "dll.h"
#include "GUI/efk.GUIManager.h"
#include "GUI/efk.FileDialog.h"
#include "CompiledMaterialGenerator.h"
#include "../EditorCommon/Platform/PlatformMisc.h"
#include "../EditorCommon/GUI/MainWindow.h"
#include "../EditorCommon/IO/FileReader.h"
#include "../EditorCommon/IO/StaticFile.h"
#include "../EditorCommon/IO/IO.h"



#include <stdint.h>		// Use the C99 official header


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "dll_cs.h"

SwigDirector_GUIManagerCallback::SwigDirector_GUIManagerCallback() : efk::GUIManagerCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_GUIManagerCallback::~SwigDirector_GUIManagerCallback() {
  
}


void SwigDirector_GUIManagerCallback::Resized(int x, int y) {
  int jx  ;
  int jy  ;
  
  if (!swig_callbackResized) {
    efk::GUIManagerCallback::Resized(x,y);
    return;
  } else {
    jx = x;
    jy = y;
    swig_callbackResized(jx, jy);
  }
}

void SwigDirector_GUIManagerCallback::Droped() {
  if (!swig_callbackDroped) {
    efk::GUIManagerCallback::Droped();
    return;
  } else {
    swig_callbackDroped();
  }
}

void SwigDirector_GUIManagerCallback::Focused() {
  if (!swig_callbackFocused) {
    efk::GUIManagerCallback::Focused();
    return;
  } else {
    swig_callbackFocused();
  }
}

bool SwigDirector_GUIManagerCallback::Closing() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackClosing) {
    return efk::GUIManagerCallback::Closing();
  } else {
    jresult = (unsigned int) swig_callbackClosing();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GUIManagerCallback::Iconify(int f) {
  int jf  ;
  
  if (!swig_callbackIconify) {
    efk::GUIManagerCallback::Iconify(f);
    return;
  } else {
    jf = f;
    swig_callbackIconify(jf);
  }
}

void SwigDirector_GUIManagerCallback::DpiChanged(float scale) {
  float jscale  ;
  
  if (!swig_callbackDpiChanged) {
    efk::GUIManagerCallback::DpiChanged(scale);
    return;
  } else {
    jscale = scale;
    swig_callbackDpiChanged(jscale);
  }
}

bool SwigDirector_GUIManagerCallback::ClickLink(char16_t const *path) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jpath = 0 ;
  
  if (!swig_callbackClickLink) {
    return efk::GUIManagerCallback::ClickLink(path);
  } else {
    jpath = (void *) path; 
    jresult = (unsigned int) swig_callbackClickLink(jpath);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_GUIManagerCallback::swig_connect_director(SWIG_Callback0_t callbackResized, SWIG_Callback1_t callbackDroped, SWIG_Callback2_t callbackFocused, SWIG_Callback3_t callbackClosing, SWIG_Callback4_t callbackIconify, SWIG_Callback5_t callbackDpiChanged, SWIG_Callback6_t callbackClickLink) {
  swig_callbackResized = callbackResized;
  swig_callbackDroped = callbackDroped;
  swig_callbackFocused = callbackFocused;
  swig_callbackClosing = callbackClosing;
  swig_callbackIconify = callbackIconify;
  swig_callbackDpiChanged = callbackDpiChanged;
  swig_callbackClickLink = callbackClickLink;
}

void SwigDirector_GUIManagerCallback::swig_init_callbacks() {
  swig_callbackResized = 0;
  swig_callbackDroped = 0;
  swig_callbackFocused = 0;
  swig_callbackClosing = 0;
  swig_callbackIconify = 0;
  swig_callbackDpiChanged = 0;
  swig_callbackClickLink = 0;
}

SwigDirector_IOCallback::SwigDirector_IOCallback() : Effekseer::IOCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_IOCallback::OnFileChanged(Effekseer::StaticFileType fileType, char16_t const *path) {
  int jfileType  ;
  void * jpath = 0 ;
  
  if (!swig_callbackOnFileChanged) {
    Effekseer::IOCallback::OnFileChanged(fileType,path);
    return;
  } else {
    jfileType = (int)fileType;
    jpath = (void *) path; 
    swig_callbackOnFileChanged(jfileType, jpath);
  }
}

void SwigDirector_IOCallback::swig_connect_director(SWIG_Callback0_t callbackOnFileChanged) {
  swig_callbackOnFileChanged = callbackOnFileChanged;
}

void SwigDirector_IOCallback::swig_init_callbacks() {
  swig_callbackOnFileChanged = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Vec2_X_set___(void * jarg1, float jarg2) {
  efk::Vec2 *arg1 = (efk::Vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (efk::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_Vec2_X_get___(void * jarg1) {
  float jresult ;
  efk::Vec2 *arg1 = (efk::Vec2 *) 0 ;
  float result;
  
  arg1 = (efk::Vec2 *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Vec2_Y_set___(void * jarg1, float jarg2) {
  efk::Vec2 *arg1 = (efk::Vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (efk::Vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_Vec2_Y_get___(void * jarg1) {
  float jresult ;
  efk::Vec2 *arg1 = (efk::Vec2 *) 0 ;
  float result;
  
  arg1 = (efk::Vec2 *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_Vec2__SWIG_0___() {
  void * jresult ;
  efk::Vec2 *result = 0 ;
  
  result = (efk::Vec2 *)new efk::Vec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_Vec2__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  efk::Vec2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (efk::Vec2 *)new efk::Vec2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_Vec2___(void * jarg1) {
  efk::Vec2 *arg1 = (efk::Vec2 *) 0 ;
  
  arg1 = (efk::Vec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_ImageResource___() {
  void * jresult ;
  efk::ImageResource *result = 0 ;
  
  result = (efk::ImageResource *)new efk::ImageResource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_ImageResource___(void * jarg1) {
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  
  arg1 = (efk::ImageResource *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ImageResource_Validate___(void * jarg1) {
  unsigned int jresult ;
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  bool result;
  
  arg1 = (efk::ImageResource *)jarg1; 
  result = (bool)(arg1)->Validate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ImageResource_Invalidate___(void * jarg1) {
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  
  arg1 = (efk::ImageResource *)jarg1; 
  (arg1)->Invalidate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_ImageResource_GetPath___(void * jarg1) {
  void * jresult ;
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (efk::ImageResource *)jarg1; 
  result = (char16_t *)((efk::ImageResource const *)arg1)->GetPath();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ImageResource_GetWidth___(void * jarg1) {
  int jresult ;
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  int32_t result;
  
  arg1 = (efk::ImageResource *)jarg1; 
  result = (int32_t)((efk::ImageResource const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ImageResource_GetHeight___(void * jarg1) {
  int jresult ;
  efk::ImageResource *arg1 = (efk::ImageResource *) 0 ;
  int32_t result;
  
  arg1 = (efk::ImageResource *)jarg1; 
  result = (int32_t)((efk::ImageResource const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideWidth_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->GuideWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideWidth_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (int32_t) ((arg1)->GuideWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideHeight_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->GuideHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_GuideHeight_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  int32_t result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (int32_t) ((arg1)->GuideHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RateOfMagnification_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RateOfMagnification = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RateOfMagnification_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->RateOfMagnification);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsPerspective_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsPerspective = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsPerspective_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->IsPerspective);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsOrthographic_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsOrthographic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsOrthographic_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->IsOrthographic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusX_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FocusX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusX_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->FocusX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusY_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FocusY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusY_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->FocusY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusZ_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FocusZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_FocusZ_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->FocusZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleX_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AngleX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleX_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->AngleX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleY_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AngleY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_AngleY_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->AngleY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distance_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distance_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->Distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_ClippingStart_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ClippingStart = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_ClippingStart_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->ClippingStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_ClippingEnd_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ClippingEnd = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_ClippingEnd_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->ClippingEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RendersGuide_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RendersGuide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RendersGuide_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->RendersGuide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsCullingShown_set___(void * jarg1, unsigned int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsCullingShown = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_IsCullingShown_get___(void * jarg1) {
  unsigned int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  bool result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (bool) ((arg1)->IsCullingShown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingRadius_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingRadius_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingX_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingX_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingY_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingY_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingZ_set___(void * jarg1, float jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CullingZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_CullingZ_get___(void * jarg1) {
  float jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  float result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (float) ((arg1)->CullingZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distortion_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  DistortionType arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (DistortionType)jarg2; 
  if (arg1) (arg1)->Distortion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_Distortion_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  DistortionType result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (DistortionType) ((arg1)->Distortion);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RenderingMode_set___(void * jarg1, int jarg2) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  RenderMode arg2 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  arg2 = (RenderMode)jarg2; 
  if (arg1) (arg1)->RenderingMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerParamater_RenderingMode_get___(void * jarg1) {
  int jresult ;
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  RenderMode result;
  
  arg1 = (ViewerParamater *)jarg1; 
  result = (RenderMode) ((arg1)->RenderingMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_ViewerParamater___() {
  void * jresult ;
  ViewerParamater *result = 0 ;
  
  result = (ViewerParamater *)new ViewerParamater();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_ViewerParamater___(void * jarg1) {
  ViewerParamater *arg1 = (ViewerParamater *) 0 ;
  
  arg1 = (ViewerParamater *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountX_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CountX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountX_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->CountX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountY_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CountY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountY_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->CountY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountZ_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->CountZ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_CountZ_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->CountZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TimeSpan_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->TimeSpan = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TimeSpan_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->TimeSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorR_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorR = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorR_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorG_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorG = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorG_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorB_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorB = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorB_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorA_set___(void * jarg1, unsigned char jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllColorA = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_AllColorA_get___(void * jarg1) {
  unsigned char jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  uint8_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (uint8_t) ((arg1)->AllColorA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_Distance_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_Distance_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->Distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RemovedTime_set___(void * jarg1, int jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->RemovedTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RemovedTime_get___(void * jarg1) {
  int jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  int32_t result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (int32_t) ((arg1)->RemovedTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionVelocityX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionVelocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionVelocityY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionVelocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PositionVelocityZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_PositionVelocityZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->PositionVelocityZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationVelocityX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationVelocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationVelocityY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationVelocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RotationVelocityZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_RotationVelocityZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->RotationVelocityZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleVelocityX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleVelocityX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleVelocityY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleVelocityY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleVelocityZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_ScaleVelocityZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->ScaleVelocityZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionX_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPositionX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionX_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->TargetPositionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionY_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPositionY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionY_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->TargetPositionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionZ_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPositionZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_TargetPositionZ_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->TargetPositionZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput1_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DynamicInput1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput1_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->DynamicInput1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput2_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DynamicInput2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput2_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->DynamicInput2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput3_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DynamicInput3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput3_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->DynamicInput3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput4_set___(void * jarg1, float jarg2) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float arg2 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DynamicInput4 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_ViewerEffectBehavior_DynamicInput4_get___(void * jarg1) {
  float jresult ;
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  float result;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  result = (float) ((arg1)->DynamicInput4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_ViewerEffectBehavior___() {
  void * jresult ;
  ViewerEffectBehavior *result = 0 ;
  
  result = (ViewerEffectBehavior *)new ViewerEffectBehavior();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_ViewerEffectBehavior___(void * jarg1) {
  ViewerEffectBehavior *arg1 = (ViewerEffectBehavior *) 0 ;
  
  arg1 = (ViewerEffectBehavior *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_GetPath___(void * jarg1) {
  void * jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (char16_t *)((RecordingParameter const *)arg1)->GetPath();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_GetExt___(void * jarg1) {
  void * jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (char16_t *)((RecordingParameter const *)arg1)->GetExt();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_SetPath___(void * jarg1, void * jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetPath((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_SetExt___(void * jarg1, void * jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetExt((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_RecordingMode_set___(void * jarg1, int jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  RecordingModeType arg2 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (RecordingModeType)jarg2; 
  if (arg1) (arg1)->RecordingMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_RecordingMode_get___(void * jarg1) {
  int jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  RecordingModeType result;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (RecordingModeType) ((arg1)->RecordingMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_Count_set___(void * jarg1, int jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t arg2 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_Count_get___(void * jarg1) {
  int jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t result;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (int32_t) ((arg1)->Count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_HorizontalCount_set___(void * jarg1, int jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t arg2 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->HorizontalCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_HorizontalCount_get___(void * jarg1) {
  int jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t result;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (int32_t) ((arg1)->HorizontalCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_OffsetFrame_set___(void * jarg1, int jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t arg2 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->OffsetFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_OffsetFrame_get___(void * jarg1) {
  int jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t result;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (int32_t) ((arg1)->OffsetFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_Freq_set___(void * jarg1, int jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t arg2 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Freq = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_Freq_get___(void * jarg1) {
  int jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  int32_t result;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (int32_t) ((arg1)->Freq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_Transparence_set___(void * jarg1, int jarg2) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  TransparenceType arg2 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  arg2 = (TransparenceType)jarg2; 
  if (arg1) (arg1)->Transparence = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_RecordingParameter_Transparence_get___(void * jarg1) {
  int jresult ;
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  TransparenceType result;
  
  arg1 = (RecordingParameter *)jarg1; 
  result = (TransparenceType) ((arg1)->Transparence);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_RecordingParameter___() {
  void * jresult ;
  RecordingParameter *result = 0 ;
  
  result = (RecordingParameter *)new RecordingParameter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_RecordingParameter___(void * jarg1) {
  RecordingParameter *arg1 = (RecordingParameter *) 0 ;
  
  arg1 = (RecordingParameter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_Native___() {
  void * jresult ;
  Native *result = 0 ;
  
  result = (Native *)new Native();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_Native___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_CreateWindow_Effekseer___(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5, int jarg6) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  efk::DeviceType arg6 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  {
    arg2 = jarg2; 
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (efk::DeviceType)jarg6; 
  result = (bool)(arg1)->CreateWindow_Effekseer(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_UpdateWindow___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->UpdateWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_ClearWindow___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->ClearWindow(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_RenderWindow___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  (arg1)->RenderWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_Present___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  (arg1)->Present();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_ResizeWindow___(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->ResizeWindow(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_DestroyWindow___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->DestroyWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_LoadEffect___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char16_t *arg4 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  {
    arg2 = jarg2; 
  }
  arg3 = (int)jarg3; 
  arg4 = (char16_t *)jarg4; 
  result = (bool)(arg1)->LoadEffect(arg2,arg3,(char16_t const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_RemoveEffect___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->RemoveEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_PlayEffect___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->PlayEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StopEffect___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->StopEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StepEffect__SWIG_0___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->StepEffect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StepEffect__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->StepEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Rotate___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Rotate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Slide___(void * jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Slide(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Zoom___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->Zoom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_SetRandomSeed___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetRandomSeed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_RenderView___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  void *result = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  result = (void *)(arg1)->RenderView(arg2,arg3);
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_Record___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  RecordingParameter *arg2 = 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (RecordingParameter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RecordingParameter & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Record(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_GetViewerParamater___(void * jarg1) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  ViewerParamater result;
  
  arg1 = (Native *)jarg1; 
  result = (arg1)->GetViewerParamater();
  jresult = new ViewerParamater((const ViewerParamater &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetViewerParamater___(void * jarg1, void * jarg2) {
  Native *arg1 = (Native *) 0 ;
  ViewerParamater *arg2 = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (ViewerParamater *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ViewerParamater & type is null", 0);
    return ;
  } 
  (arg1)->SetViewerParamater(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_GetEffectBehavior___(void * jarg1) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  ViewerEffectBehavior result;
  
  arg1 = (Native *)jarg1; 
  result = (arg1)->GetEffectBehavior();
  jresult = new ViewerEffectBehavior((const ViewerEffectBehavior &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetViewerEffectBehavior___(void * jarg1, void * jarg2) {
  Native *arg1 = (Native *) 0 ;
  ViewerEffectBehavior *arg2 = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (ViewerEffectBehavior *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ViewerEffectBehavior & type is null", 0);
    return ;
  } 
  (arg1)->SetViewerEffectBehavior(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_SetSoundMute___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->SetSoundMute(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_SetSoundVolume___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->SetSoundVolume(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_InvalidateTextureCache___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->InvalidateTextureCache();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetIsGridShown___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetIsGridShown(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetGridLength___(void * jarg1, float jarg2) {
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGridLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetBackgroundColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  (arg1)->SetBackgroundColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetBackgroundImage___(void * jarg1, void * jarg2) {
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetBackgroundImage((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetGridColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->SetGridColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetMouseInverseFlag___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetMouseInverseFlag(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetStep___(void * jarg1, int jarg2) {
  Native *arg1 = (Native *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->SetStep(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_StartNetwork___(void * jarg1, char * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (bool)(arg1)->StartNetwork((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_StopNetwork___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  (arg1)->StopNetwork();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_IsConnectingNetwork___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->IsConnectingNetwork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SendDataByNetwork___(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  char16_t *arg5 = (char16_t *) 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  {
    arg3 = jarg3; 
  }
  arg4 = (int)jarg4; 
  arg5 = (char16_t *)jarg5; 
  (arg1)->SendDataByNetwork((char16_t const *)arg2,arg3,arg4,(char16_t const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetLightDirection___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Native *arg1 = (Native *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetLightDirection(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetLightColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->SetLightColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetLightAmbientColor___(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Native *arg1 = (Native *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->SetLightAmbientColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetIsRightHand___(void * jarg1, unsigned int jarg2) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsRightHand(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetCullingParameter___(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->SetCullingParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_Native_LoadImageResource___(void * jarg1, void * jarg2) {
  void * jresult ;
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  efk::ImageResource *result = 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (efk::ImageResource *)(arg1)->LoadImageResource((char16_t const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_Native_GetAndResetDrawCall___(void * jarg1) {
  int jresult ;
  Native *arg1 = (Native *) 0 ;
  int32_t result;
  
  arg1 = (Native *)jarg1; 
  result = (int32_t)(arg1)->GetAndResetDrawCall();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_Native_GetAndResetVertexCount___(void * jarg1) {
  int jresult ;
  Native *arg1 = (Native *) 0 ;
  int32_t result;
  
  arg1 = (Native *)jarg1; 
  result = (int32_t)(arg1)->GetAndResetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_Native_GetInstanceCount___(void * jarg1) {
  int jresult ;
  Native *arg1 = (Native *) 0 ;
  int32_t result;
  
  arg1 = (Native *)jarg1; 
  result = (int32_t)(arg1)->GetInstanceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_Native_GetFPS___(void * jarg1) {
  float jresult ;
  Native *arg1 = (Native *) 0 ;
  float result;
  
  arg1 = (Native *)jarg1; 
  result = (float)(arg1)->GetFPS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_IsDebugMode___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Native::IsDebugMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetBloomParameters___(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5) {
  Native *arg1 = (Native *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetBloomParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_SetTonemapParameters___(void * jarg1, int jarg2, float jarg3) {
  Native *arg1 = (Native *) 0 ;
  int32_t arg2 ;
  float arg3 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetTonemapParameters(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_OpenOrCreateMaterial___(void * jarg1, void * jarg2) {
  Native *arg1 = (Native *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (Native *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->OpenOrCreateMaterial((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_Native_TerminateMaterialEditor___(void * jarg1) {
  Native *arg1 = (Native *) 0 ;
  
  arg1 = (Native *)jarg1; 
  (arg1)->TerminateMaterialEditor();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_Native_GetIsUpdateMaterialRequiredAndReset___(void * jarg1) {
  unsigned int jresult ;
  Native *arg1 = (Native *) 0 ;
  bool result;
  
  arg1 = (Native *)jarg1; 
  result = (bool)(arg1)->GetIsUpdateMaterialRequiredAndReset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_GUIManagerCallback___() {
  void * jresult ;
  efk::GUIManagerCallback *result = 0 ;
  
  result = (efk::GUIManagerCallback *)new SwigDirector_GUIManagerCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_GUIManagerCallback___(void * jarg1) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_Resized___(void * jarg1, int jarg2, int jarg3) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Resized(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_ResizedSwigExplicitGUIManagerCallback___(void * jarg1, int jarg2, int jarg3) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->efk::GUIManagerCallback::Resized(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_Droped___(void * jarg1) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  (arg1)->Droped();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_DropedSwigExplicitGUIManagerCallback___(void * jarg1) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  (arg1)->efk::GUIManagerCallback::Droped();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_Focused___(void * jarg1) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  (arg1)->Focused();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_FocusedSwigExplicitGUIManagerCallback___(void * jarg1) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  (arg1)->efk::GUIManagerCallback::Focused();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_Closing___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  result = (bool)(arg1)->Closing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_ClosingSwigExplicitGUIManagerCallback___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  result = (bool)(arg1)->efk::GUIManagerCallback::Closing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_Iconify___(void * jarg1, int jarg2) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  int arg2 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Iconify(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_IconifySwigExplicitGUIManagerCallback___(void * jarg1, int jarg2) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  int arg2 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->efk::GUIManagerCallback::Iconify(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_DpiChanged___(void * jarg1, float jarg2) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->DpiChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_DpiChangedSwigExplicitGUIManagerCallback___(void * jarg1, float jarg2) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->efk::GUIManagerCallback::DpiChanged(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_ClickLink___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->ClickLink((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_ClickLinkSwigExplicitGUIManagerCallback___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->efk::GUIManagerCallback::ClickLink((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_GetPath___(void * jarg1) {
  void * jresult ;
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  result = (char16_t *)(arg1)->GetPath();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_SetPath___(void * jarg1, void * jarg2) {
  efk::GUIManagerCallback *arg1 = (efk::GUIManagerCallback *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManagerCallback *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetPath((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManagerCallback_director_connect___(void *objarg, SwigDirector_GUIManagerCallback::SWIG_Callback0_t callback0, SwigDirector_GUIManagerCallback::SWIG_Callback1_t callback1, SwigDirector_GUIManagerCallback::SWIG_Callback2_t callback2, SwigDirector_GUIManagerCallback::SWIG_Callback3_t callback3, SwigDirector_GUIManagerCallback::SWIG_Callback4_t callback4, SwigDirector_GUIManagerCallback::SWIG_Callback5_t callback5, SwigDirector_GUIManagerCallback::SWIG_Callback6_t callback6) {
  efk::GUIManagerCallback *obj = (efk::GUIManagerCallback *)objarg;
  SwigDirector_GUIManagerCallback *director = static_cast<SwigDirector_GUIManagerCallback *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_GUIManager___() {
  void * jresult ;
  efk::GUIManager *result = 0 ;
  
  result = (efk::GUIManager *)new efk::GUIManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_GUIManager___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Initialize___(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  std::shared_ptr< Effekseer::MainWindow > arg2 ;
  efk::DeviceType arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  if (jarg2) arg2 = *(std::shared_ptr< Effekseer::MainWindow > *)jarg2; 
  arg3 = (efk::DeviceType)jarg3; 
  result = (bool)(arg1)->Initialize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InitializeGUI___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  Native *arg2 = (Native *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (Native *)jarg2; 
  (arg1)->InitializeGUI(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ResetGUIStyle___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->ResetGUIStyle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetTitle___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetTitle((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetWindowIcon___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetWindowIcon((char16_t const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetSize___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::Vec2 result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = ((efk::GUIManager const *)arg1)->GetSize();
  jresult = new efk::Vec2((const efk::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetSize___(void * jarg1, int jarg2, int jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  (arg1)->SetSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Terminate___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Terminate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DoEvents___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->DoEvents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Present___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Present();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Close___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetMousePosition___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::Vec2 result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (arg1)->GetMousePosition();
  jresult = new efk::Vec2((const efk::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetMouseButton___(void * jarg1, int jarg2) {
  int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int32_t arg2 ;
  int result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (int)(arg1)->GetMouseButton(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetMouseWheel___(void * jarg1) {
  int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (int)(arg1)->GetMouseWheel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetCallback___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::GUIManagerCallback *arg2 = (efk::GUIManagerCallback *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::GUIManagerCallback *)jarg2; 
  (arg1)->SetCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InvalidateFont___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->InvalidateFont();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ResetGUI___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->ResetGUI();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_RenderGUI__SWIG_0___(void * jarg1, unsigned int jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RenderGUI(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_RenderGUI__SWIG_1___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->RenderGUI();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetNativeHandle___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  void *result = 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (void *)(arg1)->GetNativeHandle();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetClipboardText___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (char16_t *)(arg1)->GetClipboardText();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetClipboardText___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetClipboardText((char16_t const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Begin___(void * jarg1, void * jarg2, unsigned int * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)(arg1)->Begin((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_End___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginChild__SWIG_0___(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  efk::Vec2 *arg3 = 0 ;
  bool arg4 ;
  efk::WindowFlags arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (efk::WindowFlags)jarg5; 
  result = (bool)(arg1)->BeginChild((char const *)arg2,(efk::Vec2 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginChild__SWIG_1___(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  efk::Vec2 *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->BeginChild((char const *)arg2,(efk::Vec2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginChild__SWIG_2___(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  efk::Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->BeginChild((char const *)arg2,(efk::Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginChild__SWIG_3___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->BeginChild((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndChild___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndChild();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetWindowSize___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::Vec2 result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (arg1)->GetWindowSize();
  jresult = new efk::Vec2((const efk::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetContentRegionAvail___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::Vec2 result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (arg1)->GetContentRegionAvail();
  jresult = new efk::Vec2((const efk::Vec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextWindowPos___(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::Vec2 *arg2 = 0 ;
  efk::Cond arg3 ;
  efk::Vec2 *arg4 = 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::Vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return ;
  } 
  arg3 = (efk::Cond)jarg3; 
  arg4 = (efk::Vec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->SetNextWindowPos((efk::Vec2 const &)*arg2,arg3,(efk::Vec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextWindowSize___(void * jarg1, float jarg2, float jarg3, int jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  float arg3 ;
  efk::Cond arg4 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (efk::Cond)jarg4; 
  (arg1)->SetNextWindowSize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PushStyleColor___(void * jarg1, int jarg2, unsigned int jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImGuiColFlags arg2 ;
  uint32_t arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImGuiColFlags)jarg2; 
  arg3 = (uint32_t)jarg3; 
  (arg1)->PushStyleColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PopStyleColor__SWIG_0___(void * jarg1, int jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->PopStyleColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PopStyleColor__SWIG_1___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->PopStyleColor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PushStyleVar__SWIG_0___(void * jarg1, int jarg2, float jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImGuiStyleVarFlags arg2 ;
  float arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImGuiStyleVarFlags)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->PushStyleVar(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PushStyleVar__SWIG_1___(void * jarg1, int jarg2, void * jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImGuiStyleVarFlags arg2 ;
  efk::Vec2 *arg3 = 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImGuiStyleVarFlags)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return ;
  } 
  (arg1)->PushStyleVar(arg2,(efk::Vec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PopStyleVar__SWIG_0___(void * jarg1, int jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->PopStyleVar(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PopStyleVar__SWIG_1___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->PopStyleVar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PushItemWidth___(void * jarg1, float jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->PushItemWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_PopItemWidth___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->PopItemWidth();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Separator___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Separator();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_HiddenSeparator___(void * jarg1, float jarg2, float jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->HiddenSeparator(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SameLine___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->SameLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginGroup___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->BeginGroup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndGroup___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndGroup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetCursorPosX___(void * jarg1, float jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCursorPosX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetCursorPosY___(void * jarg1, float jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCursorPosY(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetCursorPosX___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetCursorPosX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetCursorPosY___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetCursorPosY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetTextLineHeight___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetTextLineHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetTextLineHeightWithSpacing___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetTextLineHeightWithSpacing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetFrameHeight___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetFrameHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetFrameHeightWithSpacing___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetFrameHeightWithSpacing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetDpiScale___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)((efk::GUIManager const *)arg1)->GetDpiScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Columns__SWIG_0___(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->Columns(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Columns__SWIG_1___(void * jarg1, int jarg2, char * jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Columns(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Columns__SWIG_2___(void * jarg1, int jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Columns(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Columns__SWIG_3___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->Columns();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_NextColumn___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->NextColumn();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetColumnWidth__SWIG_0___(void * jarg1, int jarg2) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetColumnWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetColumnWidth__SWIG_1___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetColumnWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetColumnWidth___(void * jarg1, int jarg2, float jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetColumnWidth(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetColumnOffset__SWIG_0___(void * jarg1, int jarg2) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetColumnOffset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetColumnOffset__SWIG_1___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetColumnOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetColumnOffset___(void * jarg1, int jarg2, float jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetColumnOffset(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Text___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->Text((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TextWrapped___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->TextWrapped((char16_t const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Button__SWIG_0___(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->Button((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Button__SWIG_1___(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Button((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Button__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->Button((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Image__SWIG_0___(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImageResource *arg2 = (efk::ImageResource *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImageResource *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Image(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Image__SWIG_1___(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  void *arg2 = (void *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  {
    arg2 = jarg2; 
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Image(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ImageButton___(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImageResource *arg2 = (efk::ImageResource *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImageResource *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->ImageButton(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Checkbox___(void * jarg1, void * jarg2, bool* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  
  arg3 = jarg3;
  
  result = (bool)(arg1)->Checkbox((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_RadioButton___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->RadioButton((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputInt__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->InputInt((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputInt__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->InputInt((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputInt__SWIG_2___(void * jarg1, void * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->InputInt((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SliderInt___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SliderInt((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginCombo__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *arg3 = (char16_t *) 0 ;
  efk::ComboFlags arg4 ;
  efk::ImageResource *arg5 = (efk::ImageResource *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char16_t *)jarg3; 
  arg4 = (efk::ComboFlags)jarg4; 
  arg5 = (efk::ImageResource *)jarg5; 
  result = (bool)(arg1)->BeginCombo((char16_t const *)arg2,(char16_t const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginCombo__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *arg3 = (char16_t *) 0 ;
  efk::ComboFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char16_t *)jarg3; 
  arg4 = (efk::ComboFlags)jarg4; 
  result = (bool)(arg1)->BeginCombo((char16_t const *)arg2,(char16_t const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndCombo___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndCombo();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat__SWIG_5___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2__SWIG_5___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat2((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3__SWIG_5___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat3((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat4__SWIG_5___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat4((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7, char * jarg8, char * jarg9, float jarg10) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  float arg10 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,arg10);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7, char * jarg8, char * jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7, char * jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float* jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_5___(void * jarg1, void * jarg2, float* jarg3, float* jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloatRange2__SWIG_6___(void * jarg1, void * jarg2, float* jarg3, float* jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  result = (bool)(arg1)->DragFloatRange2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_2___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_3___(void * jarg1, void * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt__SWIG_4___(void * jarg1, void * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_2___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_3___(void * jarg1, void * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2__SWIG_4___(void * jarg1, void * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt2((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_2___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_3___(void * jarg1, void * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt3__SWIG_4___(void * jarg1, void * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt3((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_2___(void * jarg1, void * jarg2, int* jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_3___(void * jarg1, void * jarg2, int* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt4__SWIG_4___(void * jarg1, void * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt4((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6, int jarg7, char * jarg8, char * jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6, int jarg7, char * jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_2___(void * jarg1, void * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_3___(void * jarg1, void * jarg2, int* jarg3, int* jarg4, float jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_4___(void * jarg1, void * jarg2, int* jarg3, int* jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragIntRange2__SWIG_5___(void * jarg1, void * jarg2, int* jarg3, int* jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  result = (bool)(arg1)->DragIntRange2((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat1EfkEx__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, void * jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char16_t *arg7 = (char16_t *) 0 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char16_t *)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat1EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char16_t const *)arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat1EfkEx__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, void * jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char16_t *arg7 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char16_t *)jarg7; 
  result = (bool)(arg1)->DragFloat1EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,(char16_t const *)arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat1EfkEx__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat1EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat1EfkEx__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat1EfkEx((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat1EfkEx__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat1EfkEx((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat1EfkEx__SWIG_5___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat1EfkEx((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, void * jarg10, float jarg11) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char16_t *arg9 = (char16_t *) 0 ;
  char16_t *arg10 = (char16_t *) 0 ;
  float arg11 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (char16_t *)jarg9; 
  arg10 = (char16_t *)jarg10; 
  arg11 = (float)jarg11; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char16_t const *)arg9,(char16_t const *)arg10,arg11);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char16_t *arg9 = (char16_t *) 0 ;
  char16_t *arg10 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (char16_t *)jarg9; 
  arg10 = (char16_t *)jarg10; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char16_t const *)arg9,(char16_t const *)arg10);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char16_t *arg9 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (char16_t *)jarg9; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char16_t const *)arg9);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_5___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_6___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_7___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat2EfkEx__SWIG_8___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat2EfkEx((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, void * jarg11, void * jarg12, void * jarg13, float jarg14) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  char16_t *arg11 = (char16_t *) 0 ;
  char16_t *arg12 = (char16_t *) 0 ;
  char16_t *arg13 = (char16_t *) 0 ;
  float arg14 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (char16_t *)jarg11; 
  arg12 = (char16_t *)jarg12; 
  arg13 = (char16_t *)jarg13; 
  arg14 = (float)jarg14; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char16_t const *)arg11,(char16_t const *)arg12,(char16_t const *)arg13,arg14);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_1___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, void * jarg11, void * jarg12, void * jarg13) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  char16_t *arg11 = (char16_t *) 0 ;
  char16_t *arg12 = (char16_t *) 0 ;
  char16_t *arg13 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (char16_t *)jarg11; 
  arg12 = (char16_t *)jarg12; 
  arg13 = (char16_t *)jarg13; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char16_t const *)arg11,(char16_t const *)arg12,(char16_t const *)arg13);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_2___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, void * jarg11, void * jarg12) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  char16_t *arg11 = (char16_t *) 0 ;
  char16_t *arg12 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (char16_t *)jarg11; 
  arg12 = (char16_t *)jarg12; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char16_t const *)arg11,(char16_t const *)arg12);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_3___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, void * jarg11) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  char16_t *arg11 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (char16_t *)jarg11; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(char16_t const *)arg11);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_4___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_5___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_6___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_7___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_8___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_9___(void * jarg1, void * jarg2, float* jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_10___(void * jarg1, void * jarg2, float* jarg3, float jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragFloat3EfkEx__SWIG_11___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragFloat3EfkEx((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_0___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  char16_t *arg9 = (char16_t *) 0 ;
  char16_t *arg10 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (char16_t *)jarg9; 
  arg10 = (char16_t *)jarg10; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char16_t const *)arg9,(char16_t const *)arg10);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_1___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  char16_t *arg9 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (char16_t *)jarg9; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char16_t const *)arg9);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_2___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_3___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_4___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_5___(void * jarg1, void * jarg2, int* jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_6___(void * jarg1, void * jarg2, int* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DragInt2EfkEx__SWIG_7___(void * jarg1, void * jarg2, int* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->DragInt2EfkEx((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputText__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *arg3 = (char16_t *) 0 ;
  efk::InputTextFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char16_t *)jarg3; 
  arg4 = (efk::InputTextFlags)jarg4; 
  result = (bool)(arg1)->InputText((char16_t const *)arg2,(char16_t const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputText__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *arg3 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char16_t *)jarg3; 
  result = (bool)(arg1)->InputText((char16_t const *)arg2,(char16_t const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_InputTextMultiline___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *arg3 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char16_t *)jarg3; 
  result = (bool)(arg1)->InputTextMultiline((char16_t const *)arg2,(char16_t const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetInputTextResult___(void * jarg1) {
  void * jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (char16_t *)(arg1)->GetInputTextResult();
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ColorEdit4__SWIG_0___(void * jarg1, void * jarg2, float* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  efk::ColorEditFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  arg4 = (efk::ColorEditFlags)jarg4; 
  result = (bool)(arg1)->ColorEdit4((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ColorEdit4__SWIG_1___(void * jarg1, void * jarg2, float* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3;
  result = (bool)(arg1)->ColorEdit4((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNode___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->TreeNode((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNodeEx__SWIG_0___(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  efk::TreeNodeFlags arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (efk::TreeNodeFlags)jarg3; 
  result = (bool)(arg1)->TreeNodeEx((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNodeEx__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->TreeNodeEx((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreePop___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->TreePop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextTreeNodeOpen__SWIG_0___(void * jarg1, unsigned int jarg2, int jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool arg2 ;
  efk::Cond arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (efk::Cond)jarg3; 
  (arg1)->SetNextTreeNodeOpen(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextTreeNodeOpen__SWIG_1___(void * jarg1, unsigned int jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNextTreeNodeOpen(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNodeEx__SWIG_2___(void * jarg1, void * jarg2, bool* jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  efk::ImageResource *arg4 = (efk::ImageResource *) 0 ;
  efk::TreeNodeFlags arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  
  arg3 = jarg3;
  
  arg4 = (efk::ImageResource *)jarg4; 
  arg5 = (efk::TreeNodeFlags)jarg5; 
  result = (bool)(arg1)->TreeNodeEx((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNodeEx__SWIG_3___(void * jarg1, void * jarg2, bool* jarg3, void * jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  efk::ImageResource *arg4 = (efk::ImageResource *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  
  arg3 = jarg3;
  
  arg4 = (efk::ImageResource *)jarg4; 
  result = (bool)(arg1)->TreeNodeEx((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_TreeNodeEx__SWIG_4___(void * jarg1, void * jarg2, bool* jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  
  arg3 = jarg3;
  
  result = (bool)(arg1)->TreeNodeEx((char16_t const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Selectable__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool arg3 ;
  efk::SelectableFlags arg4 ;
  efk::ImageResource *arg5 = (efk::ImageResource *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (efk::SelectableFlags)jarg4; 
  arg5 = (efk::ImageResource *)jarg5; 
  result = (bool)(arg1)->Selectable((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Selectable__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool arg3 ;
  efk::SelectableFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (efk::SelectableFlags)jarg4; 
  result = (bool)(arg1)->Selectable((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Selectable__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->Selectable((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Selectable__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->Selectable((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetTooltip___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetTooltip((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginTooltip___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->BeginTooltip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndTooltip___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndTooltip();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMainMenuBar___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginMainMenuBar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndMainMenuBar___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndMainMenuBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMenuBar___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginMenuBar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndMenuBar___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndMenuBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMenu__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->BeginMenu((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginMenu__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->BeginMenu((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndMenu___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndMenu();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_0___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  efk::ImageResource *arg6 = (efk::ImageResource *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (efk::ImageResource *)jarg6; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_1___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_2___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_3___(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_4___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_5___(void * jarg1, void * jarg2, char * jarg3, unsigned int * jarg4, unsigned int jarg5, void * jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  efk::ImageResource *arg6 = (efk::ImageResource *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (efk::ImageResource *)jarg6; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_6___(void * jarg1, void * jarg2, char * jarg3, unsigned int * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_MenuItem__SWIG_7___(void * jarg1, void * jarg2, char * jarg3, unsigned int * jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char *arg3 = (char *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (bool)(arg1)->MenuItem((char16_t const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_OpenPopup___(void * jarg1, char * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OpenPopup((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopup__SWIG_0___(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  efk::WindowFlags arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (efk::WindowFlags)jarg3; 
  result = (bool)(arg1)->BeginPopup((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopup__SWIG_1___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->BeginPopup((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupModal__SWIG_0___(void * jarg1, void * jarg2, unsigned int * jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  efk::WindowFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (efk::WindowFlags)jarg4; 
  result = (bool)(arg1)->BeginPopupModal((char16_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupModal__SWIG_1___(void * jarg1, void * jarg2, unsigned int * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)(arg1)->BeginPopupModal((char16_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupModal__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->BeginPopupModal((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupContextItem__SWIG_0___(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->BeginPopupContextItem((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupContextItem__SWIG_1___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->BeginPopupContextItem((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginPopupContextItem__SWIG_2___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginPopupContextItem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndPopup___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndPopup();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsPopupOpen___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsPopupOpen((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_CloseCurrentPopup___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->CloseCurrentPopup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetItemDefaultFocus___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->SetItemDefaultFocus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_AddFontFromFileTTF___(void * jarg1, void * jarg2, float jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  float arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AddFontFromFileTTF((char16_t const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginChildFrame__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  uint32_t arg2 ;
  efk::Vec2 *arg3 = 0 ;
  efk::WindowFlags arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (efk::WindowFlags)jarg4; 
  result = (bool)(arg1)->BeginChildFrame(arg2,(efk::Vec2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginChildFrame__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  uint32_t arg2 ;
  efk::Vec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->BeginChildFrame(arg2,(efk::Vec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndChildFrame___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndChildFrame();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsKeyDown___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsKeyDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsMouseDown___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsMouseDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsMouseDoubleClicked___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsMouseDoubleClicked(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsItemHovered___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->IsItemHovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsItemActive___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->IsItemActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsItemFocused___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->IsItemFocused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsItemClicked___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsItemClicked(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsAnyItemActive___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->IsAnyItemActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsWindowHovered___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->IsWindowHovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsAnyWindowHovered___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->IsAnyWindowHovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetMouseCursor___(void * jarg1) {
  int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::MouseCursor result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (efk::MouseCursor)(arg1)->GetMouseCursor();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetHoveredIDTimer___(void * jarg1) {
  float jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (float)(arg1)->GetHoveredIDTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_DrawLineBackground___(void * jarg1, float jarg2, unsigned int jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  uint32_t arg3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (uint32_t)jarg3; 
  (arg1)->DrawLineBackground(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginFullscreen___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (bool)(arg1)->BeginFullscreen((char16_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextDock___(void * jarg1, int jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::DockSlot arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::DockSlot)jarg2; 
  (arg1)->SetNextDock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginDockspace___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->BeginDockspace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndDockspace___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndDockspace();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginDock___(void * jarg1, void * jarg2, unsigned int * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  bool *arg3 = (bool *) 0 ;
  efk::WindowFlags arg4 ;
  efk::Vec2 arg5 ;
  efk::Vec2 *argp5 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (efk::WindowFlags)jarg4; 
  argp5 = (efk::Vec2 *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null efk::Vec2", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->BeginDock((char16_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndDock___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndDock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextDockRate___(void * jarg1, float jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  float arg2 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetNextDockRate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ResetNextParentDock___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->ResetNextParentDock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SaveDock___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SaveDock((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_LoadDock___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->LoadDock((char16_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_ShutdownDock___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->ShutdownDock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextDockIcon___(void * jarg1, void * jarg2, void * jarg3) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  efk::ImageResource *arg2 = (efk::ImageResource *) 0 ;
  efk::Vec2 arg3 ;
  efk::Vec2 *argp3 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (efk::ImageResource *)jarg2; 
  argp3 = (efk::Vec2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null efk::Vec2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetNextDockIcon(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetNextDockTabToolTip___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->SetNextDockTabToolTip((char16_t const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_GetDockActive___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->GetDockActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetDockActive___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->SetDockActive();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginFCurve__SWIG_0___(void * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  efk::Vec2 *arg3 = 0 ;
  float arg4 ;
  efk::Vec2 *arg5 = 0 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (efk::Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->BeginFCurve(arg2,(efk::Vec2 const &)*arg3,arg4,(efk::Vec2 const &)*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginFCurve__SWIG_1___(void * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, float jarg6) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  efk::Vec2 *arg3 = 0 ;
  float arg4 ;
  efk::Vec2 *arg5 = 0 ;
  float arg6 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (efk::Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->BeginFCurve(arg2,(efk::Vec2 const &)*arg3,arg4,(efk::Vec2 const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginFCurve__SWIG_2___(void * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  efk::Vec2 *arg3 = 0 ;
  float arg4 ;
  efk::Vec2 *arg5 = 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (efk::Vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (efk::Vec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "efk::Vec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->BeginFCurve(arg2,(efk::Vec2 const &)*arg3,arg4,(efk::Vec2 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndFCurve___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndFCurve();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_FCurve___(void * jarg1, int jarg2, float* jarg3, float* jarg4, float* jarg5, float* jarg6, float* jarg7, float* jarg8, int* jarg9, int jarg10, int jarg11, unsigned char* jarg12, int jarg13, float jarg14, unsigned int jarg15, unsigned int jarg16, unsigned int jarg17, unsigned int jarg18, float jarg19, float jarg20, int * jarg21, unsigned int * jarg22, float * jarg23, float * jarg24, int * jarg25) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  int *arg9 = (int *) 0 ;
  efk::FCurveEdgeType arg10 ;
  efk::FCurveEdgeType arg11 ;
  uint8_t *arg12 = (uint8_t *) 0 ;
  int arg13 ;
  float arg14 ;
  bool arg15 ;
  bool arg16 ;
  uint32_t arg17 ;
  bool arg18 ;
  float arg19 ;
  float arg20 ;
  int *arg21 = (int *) 0 ;
  bool *arg22 = (bool *) 0 ;
  float *arg23 = (float *) 0 ;
  float *arg24 = (float *) 0 ;
  int *arg25 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3;
  arg4 = jarg4;
  arg5 = jarg5;
  arg6 = jarg6;
  arg7 = jarg7;
  arg8 = jarg8;
  arg9 = jarg9;
  arg10 = (efk::FCurveEdgeType)jarg10; 
  arg11 = (efk::FCurveEdgeType)jarg11; 
  arg12 = jarg12;
  arg13 = (int)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = (uint32_t)jarg17; 
  arg18 = jarg18 ? true : false; 
  arg19 = (float)jarg19; 
  arg20 = (float)jarg20; 
  arg21 = (int *)jarg21; 
  arg22 = (bool *)jarg22; 
  arg23 = (float *)jarg23; 
  arg24 = (float *)jarg24; 
  arg25 = (int *)jarg25; 
  result = (bool)(arg1)->FCurve(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25);
  jresult = result; 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_StartSelectingAreaFCurve___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->StartSelectingAreaFCurve();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginDragDropSource___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginDragDropSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetDragDropPayload___(void * jarg1, char * jarg2, unsigned char* jarg3, int jarg4) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->SetDragDropPayload((char const *)arg2,arg3,arg4);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndDragDropSource___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndDragDropSource();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_BeginDragDropTarget___(void * jarg1) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  result = (bool)(arg1)->BeginDragDropTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_AcceptDragDropPayload___(void * jarg1, char * jarg2, unsigned char* jarg3, int jarg4, int * jarg5) {
  unsigned int jresult ;
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  bool result;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3;
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  result = (bool)(arg1)->AcceptDragDropPayload((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_EndDragDropTarget___(void * jarg1) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  (arg1)->EndDragDropTarget();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_show___(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  efk::DialogStyle arg3 ;
  efk::DialogButtons arg4 ;
  efk::DialogSelection result;
  
  arg1 = (char16_t *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  arg3 = (efk::DialogStyle)jarg3; 
  arg4 = (efk::DialogButtons)jarg4; 
  result = (efk::DialogSelection)efk::GUIManager::show((char16_t const *)arg1,(char16_t const *)arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_IsMacOSX___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)efk::GUIManager::IsMacOSX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_SetIniFilename___(void * jarg1) {
  char16_t *arg1 = (char16_t *) 0 ;
  
  arg1 = (char16_t *)jarg1; 
  efk::GUIManager::SetIniFilename((char16_t const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_GUIManager_Markdown___(void * jarg1, void * jarg2) {
  efk::GUIManager *arg1 = (efk::GUIManager *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  
  arg1 = (efk::GUIManager *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  (arg1)->Markdown((char16_t const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_FileDialog_OpenDialog___(void * jarg1, void * jarg2) {
  void * jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (char16_t *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (char16_t *)efk::FileDialog::OpenDialog((char16_t const *)arg1,(char16_t const *)arg2);
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_FileDialog_SaveDialog___(void * jarg1, void * jarg2) {
  void * jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  char16_t *result = 0 ;
  
  arg1 = (char16_t *)jarg1; 
  arg2 = (char16_t *)jarg2; 
  result = (char16_t *)efk::FileDialog::SaveDialog((char16_t const *)arg1,(char16_t const *)arg2);
  jresult = (char16_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_FileDialog___() {
  void * jresult ;
  efk::FileDialog *result = 0 ;
  
  result = (efk::FileDialog *)new efk::FileDialog();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_FileDialog___(void * jarg1) {
  efk::FileDialog *arg1 = (efk::FileDialog *) 0 ;
  
  arg1 = (efk::FileDialog *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_CompiledMaterialGenerator___() {
  void * jresult ;
  CompiledMaterialGenerator *result = 0 ;
  
  result = (CompiledMaterialGenerator *)new CompiledMaterialGenerator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_CompiledMaterialGenerator___(void * jarg1) {
  CompiledMaterialGenerator *arg1 = (CompiledMaterialGenerator *) 0 ;
  
  arg1 = (CompiledMaterialGenerator *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_CompiledMaterialGenerator_Initialize___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  CompiledMaterialGenerator *arg1 = (CompiledMaterialGenerator *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (CompiledMaterialGenerator *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->Initialize((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_CompiledMaterialGenerator_Compile___(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  CompiledMaterialGenerator *arg1 = (CompiledMaterialGenerator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (CompiledMaterialGenerator *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->Compile((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_GetSystemLanguage___() {
  int jresult ;
  Effekseer::SystemLanguage result;
  
  result = (Effekseer::SystemLanguage)Effekseer::GetSystemLanguage();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_PosX_set___(void * jarg1, int jarg2) {
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->PosX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_PosX_get___(void * jarg1) {
  int jresult ;
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t result;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  result = (int32_t) ((arg1)->PosX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_PosY_set___(void * jarg1, int jarg2) {
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->PosY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_PosY_get___(void * jarg1) {
  int jresult ;
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t result;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  result = (int32_t) ((arg1)->PosY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_Width_set___(void * jarg1, int jarg2) {
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_Width_get___(void * jarg1) {
  int jresult ;
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t result;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  result = (int32_t) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_Height_set___(void * jarg1, int jarg2) {
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_Height_get___(void * jarg1) {
  int jresult ;
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  int32_t result;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  result = (int32_t) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_IsMaximumMode_set___(void * jarg1, unsigned int jarg2) {
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  bool arg2 ;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsMaximumMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_MainWindowState_IsMaximumMode_get___(void * jarg1) {
  unsigned int jresult ;
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  bool result;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  result = (bool) ((arg1)->IsMaximumMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_MainWindowState___() {
  void * jresult ;
  Effekseer::MainWindowState *result = 0 ;
  
  result = (Effekseer::MainWindowState *)new Effekseer::MainWindowState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_MainWindowState___(void * jarg1) {
  Effekseer::MainWindowState *arg1 = (Effekseer::MainWindowState *) 0 ;
  
  arg1 = (Effekseer::MainWindowState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_MainWindow___() {
  void * jresult ;
  Effekseer::MainWindow *result = 0 ;
  
  result = (Effekseer::MainWindow *)new Effekseer::MainWindow();
  
  jresult = result ? new std::shared_ptr<  Effekseer::MainWindow >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_MainWindow___(void * jarg1) {
  Effekseer::MainWindow *arg1 = (Effekseer::MainWindow *) 0 ;
  std::shared_ptr< Effekseer::MainWindow > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::MainWindow > *)jarg1;
  arg1 = (Effekseer::MainWindow *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_MainWindow_GetInstance___() {
  void * jresult ;
  std::shared_ptr< Effekseer::MainWindow > result;
  
  result = Effekseer::MainWindow::GetInstance();
  jresult = result ? new std::shared_ptr< Effekseer::MainWindow >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_MainWindow_GetState___(void * jarg1) {
  void * jresult ;
  Effekseer::MainWindow *arg1 = (Effekseer::MainWindow *) 0 ;
  std::shared_ptr< Effekseer::MainWindow > *smartarg1 = 0 ;
  Effekseer::MainWindowState result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::MainWindow > *)jarg1;
  arg1 = (Effekseer::MainWindow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetState();
  jresult = new Effekseer::MainWindowState((const Effekseer::MainWindowState &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindow_SetState___(void * jarg1, void * jarg2) {
  Effekseer::MainWindow *arg1 = (Effekseer::MainWindow *) 0 ;
  Effekseer::MainWindowState *arg2 = 0 ;
  std::shared_ptr< Effekseer::MainWindow > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::MainWindow > *)jarg1;
  arg1 = (Effekseer::MainWindow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Effekseer::MainWindowState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Effekseer::MainWindowState const & type is null", 0);
    return ;
  } 
  (arg1)->SetState((Effekseer::MainWindowState const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_MainWindow_Initialize___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  char16_t *arg1 = (char16_t *) 0 ;
  Effekseer::MainWindowState arg2 ;
  bool arg3 ;
  bool arg4 ;
  Effekseer::MainWindowState *argp2 ;
  bool result;
  
  arg1 = (char16_t *)jarg1; 
  argp2 = (Effekseer::MainWindowState *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Effekseer::MainWindowState", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)Effekseer::MainWindow::Initialize((char16_t const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_MainWindow_Terminate___() {
  Effekseer::MainWindow::Terminate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_StaticFile___() {
  void * jresult ;
  Effekseer::StaticFile *result = 0 ;
  
  result = (Effekseer::StaticFile *)new Effekseer::StaticFile();
  
  jresult = result ? new std::shared_ptr<  Effekseer::StaticFile >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_StaticFile_GetData___(void * jarg1) {
  void * jresult ;
  Effekseer::StaticFile *arg1 = (Effekseer::StaticFile *) 0 ;
  std::shared_ptr< Effekseer::StaticFile > *smartarg1 = 0 ;
  void *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::StaticFile > *)jarg1;
  arg1 = (Effekseer::StaticFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (void *)(arg1)->GetData();
  {
    jresult = result; 
  }
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_StaticFile_GetSize___(void * jarg1) {
  int jresult ;
  Effekseer::StaticFile *arg1 = (Effekseer::StaticFile *) 0 ;
  std::shared_ptr< Effekseer::StaticFile > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::StaticFile > *)jarg1;
  arg1 = (Effekseer::StaticFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_StaticFile_GetPath___(void * jarg1) {
  void * jresult ;
  Effekseer::StaticFile *arg1 = (Effekseer::StaticFile *) 0 ;
  std::shared_ptr< Effekseer::StaticFile > *smartarg1 = 0 ;
  std::u16string result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::StaticFile > *)jarg1;
  arg1 = (Effekseer::StaticFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetPath();
  jresult = SWIG_csharp_wstring_callback((const wchar_t*)(&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Effekseerfswig_StaticFile_GetFileType___(void * jarg1) {
  int jresult ;
  Effekseer::StaticFile *arg1 = (Effekseer::StaticFile *) 0 ;
  std::shared_ptr< Effekseer::StaticFile > *smartarg1 = 0 ;
  Effekseer::StaticFileType result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::StaticFile > *)jarg1;
  arg1 = (Effekseer::StaticFile *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Effekseer::StaticFileType)(arg1)->GetFileType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_StaticFile___(void * jarg1) {
  Effekseer::StaticFile *arg1 = (Effekseer::StaticFile *) 0 ;
  std::shared_ptr< Effekseer::StaticFile > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::StaticFile > *)jarg1;
  arg1 = (Effekseer::StaticFile *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IOCallback_OnFileChanged___(void * jarg1, int jarg2, void * jarg3) {
  Effekseer::IOCallback *arg1 = (Effekseer::IOCallback *) 0 ;
  Effekseer::StaticFileType arg2 ;
  char16_t *arg3 = (char16_t *) 0 ;
  std::shared_ptr< Effekseer::IOCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IOCallback > *)jarg1;
  arg1 = (Effekseer::IOCallback *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Effekseer::StaticFileType)jarg2; 
  arg3 = (char16_t *)jarg3; 
  (arg1)->OnFileChanged(arg2,(char16_t const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IOCallback_OnFileChangedSwigExplicitIOCallback___(void * jarg1, int jarg2, void * jarg3) {
  Effekseer::IOCallback *arg1 = (Effekseer::IOCallback *) 0 ;
  Effekseer::StaticFileType arg2 ;
  char16_t *arg3 = (char16_t *) 0 ;
  std::shared_ptr< Effekseer::IOCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IOCallback > *)jarg1;
  arg1 = (Effekseer::IOCallback *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Effekseer::StaticFileType)jarg2; 
  arg3 = (char16_t *)jarg3; 
  (arg1)->Effekseer::IOCallback::OnFileChanged(arg2,(char16_t const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_IOCallback___() {
  void * jresult ;
  Effekseer::IOCallback *result = 0 ;
  
  result = (Effekseer::IOCallback *)new SwigDirector_IOCallback();
  
  jresult = result ? new std::shared_ptr<  Effekseer::IOCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_IOCallback___(void * jarg1) {
  Effekseer::IOCallback *arg1 = (Effekseer::IOCallback *) 0 ;
  std::shared_ptr< Effekseer::IOCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IOCallback > *)jarg1;
  arg1 = (Effekseer::IOCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IOCallback_director_connect___(void *objarg, SwigDirector_IOCallback::SWIG_Callback0_t callback0) {
  std::shared_ptr< Effekseer::IOCallback > *obj = (std::shared_ptr< Effekseer::IOCallback > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_IOCallback *director = static_cast<SwigDirector_IOCallback *>(obj->operator->());
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_IO__SWIG_0___(int jarg1) {
  void * jresult ;
  int arg1 ;
  Effekseer::IO *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Effekseer::IO *)new Effekseer::IO(arg1);
  
  jresult = result ? new std::shared_ptr<  Effekseer::IO >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_new_IO__SWIG_1___() {
  void * jresult ;
  Effekseer::IO *result = 0 ;
  
  result = (Effekseer::IO *)new Effekseer::IO();
  
  jresult = result ? new std::shared_ptr<  Effekseer::IO >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_delete_IO___(void * jarg1) {
  Effekseer::IO *arg1 = (Effekseer::IO *) 0 ;
  std::shared_ptr< Effekseer::IO > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IO > *)jarg1;
  arg1 = (Effekseer::IO *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_IO_GetInstance___() {
  void * jresult ;
  std::shared_ptr< Effekseer::IO > result;
  
  result = Effekseer::IO::GetInstance();
  jresult = result ? new std::shared_ptr< Effekseer::IO >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IO_Initialize__SWIG_0___(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Effekseer::IO::Initialize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IO_Initialize__SWIG_1___() {
  Effekseer::IO::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IO_Terminate___() {
  Effekseer::IO::Terminate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_IO_LoadFile___(void * jarg1, void * jarg2) {
  void * jresult ;
  Effekseer::IO *arg1 = (Effekseer::IO *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  std::shared_ptr< Effekseer::IO > *smartarg1 = 0 ;
  std::shared_ptr< Effekseer::StaticFile > result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IO > *)jarg1;
  arg1 = (Effekseer::IO *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (char16_t *)jarg2; 
  result = (arg1)->LoadFile((char16_t const *)arg2);
  jresult = result ? new std::shared_ptr< Effekseer::StaticFile >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Effekseerfswig_IO_LoadIPCFile___(void * jarg1, void * jarg2) {
  void * jresult ;
  Effekseer::IO *arg1 = (Effekseer::IO *) 0 ;
  char16_t *arg2 = (char16_t *) 0 ;
  std::shared_ptr< Effekseer::IO > *smartarg1 = 0 ;
  std::shared_ptr< Effekseer::StaticFile > result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IO > *)jarg1;
  arg1 = (Effekseer::IO *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (char16_t *)jarg2; 
  result = (arg1)->LoadIPCFile((char16_t const *)arg2);
  jresult = result ? new std::shared_ptr< Effekseer::StaticFile >(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Effekseerfswig_IO_GetIsExistLatestFile___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Effekseer::IO *arg1 = (Effekseer::IO *) 0 ;
  std::shared_ptr< Effekseer::StaticFile > arg2 ;
  std::shared_ptr< Effekseer::IO > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IO > *)jarg1;
  arg1 = (Effekseer::IO *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< Effekseer::StaticFile > *)jarg2; 
  result = (bool)(arg1)->GetIsExistLatestFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IO_Update___(void * jarg1) {
  Effekseer::IO *arg1 = (Effekseer::IO *) 0 ;
  std::shared_ptr< Effekseer::IO > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IO > *)jarg1;
  arg1 = (Effekseer::IO *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Effekseerfswig_IO_AddCallback___(void * jarg1, void * jarg2) {
  Effekseer::IO *arg1 = (Effekseer::IO *) 0 ;
  std::shared_ptr< Effekseer::IOCallback > arg2 ;
  std::shared_ptr< Effekseer::IO > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Effekseer::IO > *)jarg1;
  arg1 = (Effekseer::IO *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< Effekseer::IOCallback > *)jarg2; 
  (arg1)->AddCallback(arg2);
}


#ifdef __cplusplus
}
#endif

