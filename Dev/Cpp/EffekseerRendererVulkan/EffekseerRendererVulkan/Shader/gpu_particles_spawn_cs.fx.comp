#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct EmitterData
{
    uint FlagBits;
    uint Seed;
    uint ParticleHead;
    uint ParticleSize;
    uint TrailHead;
    uint TrailSize;
    uint TrailPhase;
    uint NextEmitCount;
    uint TotalEmitCount;
    uint EmitPointCount;
    float TimeCount;
    float TimeStopped;
    uint Reserved0;
    uint Reserved1;
    float DeltaTime;
    uint Color;
    mat4x3 Transform;
};

struct ParameterData
{
    int EmitCount;
    int EmitPerFrame;
    float EmitOffset;
    uint Padding0;
    vec2 LifeTime;
    uint EmitShapeType;
    uint EmitRotationApplied;
    vec4 EmitShapeData[2];
    vec3 Direction;
    float Spread;
    vec2 InitialSpeed;
    vec2 Damping;
    vec4 AngularOffset[2];
    vec4 AngularVelocity[2];
    vec4 ScaleData1[2];
    vec4 ScaleData2[2];
    vec3 ScaleEasing;
    uint ScaleFlags;
    vec3 Gravity;
    uint Padding2;
    vec3 VortexCenter;
    float VortexRotation;
    vec3 VortexAxis;
    float VortexAttraction;
    float TurbulencePower;
    uint TurbulenceSeed;
    float TurbulenceScale;
    float TurbulenceOctave;
    uint RenderState;
    uint ShapeType;
    uint ShapeData;
    float ShapeSize;
    float Emissive;
    float FadeIn;
    float FadeOut;
    uint MaterialType;
    uvec4 ColorData;
    vec3 ColorEasing;
    uint ColorFlags;
};

struct ComputeConstants
{
    uint CoordinateReversed;
    float Reserved0;
    float Reserved1;
    float Reserved2;
};

struct EmitPoint
{
    vec3 Position;
    uint Normal;
    uint Binormal;
    uint Tangent;
    uint UV;
    uint VColor;
};

struct ParticleData
{
    uint FlagBits;
    uint Seed;
    float LifeAge;
    uint InheritColor;
    uint Color;
    uint Direction;
    uvec2 Velocity;
    mat4x3 Transform;
};

layout(set = 0, binding = 2, std140) uniform cb2
{
    layout(row_major) EmitterData emitter;
} _514;

layout(set = 0, binding = 1, std140) uniform cb1
{
    ParameterData paramData;
} _536;

layout(set = 0, binding = 0, std140) uniform cb0
{
    ComputeConstants constants;
} _651;

layout(set = 2, binding = 1, std430) readonly buffer EmitPoints
{
    EmitPoint _data[];
} EmitPoints_1;

layout(set = 2, binding = 0, std430) buffer Particles
{
    layout(row_major) ParticleData _data[];
} Particles_1;

uint RandomUint(inout uint seed)
{
    uint state = seed;
    seed = (seed * 747796405u) + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float RandomFloat(inout uint seed)
{
    uint param = seed;
    uint _326 = RandomUint(param);
    seed = param;
    return float(_326) / 4294967296.0;
}

vec3 RandomSpread(inout uint seed, inout vec3 baseDir, float angle)
{
    uint param = seed;
    float _440 = RandomFloat(param);
    seed = param;
    float theta = 6.283184051513671875 * _440;
    uint param_1 = seed;
    float _447 = RandomFloat(param_1);
    seed = param_1;
    float phi = angle * _447;
    vec3 randDir = vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    baseDir = normalize(baseDir);
    if (abs(baseDir.z) != 1.0)
    {
        vec3 front = vec3(0.0, 0.0, 1.0);
        vec3 right = normalize(cross(front, baseDir));
        vec3 up = cross(baseDir, right);
        return mat3(vec3(right), vec3(up), vec3(baseDir)) * randDir;
    }
    else
    {
        return randDir * sign(baseDir.z);
    }
}

float RandomFloatRange(inout uint seed, vec2 maxmin)
{
    uint param = seed;
    float _339 = RandomFloat(param);
    seed = param;
    return mix(maxmin.y, maxmin.x, _339);
}

vec3 RandomDirection(inout uint seed)
{
    uint param = seed;
    float _348 = RandomFloat(param);
    seed = param;
    float cosTheta = ((-2.0) * _348) + 1.0;
    float sinTheta = sqrt(1.0 - (cosTheta * cosTheta));
    uint param_1 = seed;
    float _362 = RandomFloat(param_1);
    seed = param_1;
    float phi = 6.283184051513671875 * _362;
    return vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
}

vec3 RandomCircle(inout uint seed, inout vec3 axis)
{
    uint param = seed;
    float _380 = RandomFloat(param);
    seed = param;
    float theta = 6.283184051513671875 * _380;
    vec3 direction = vec3(cos(theta), 0.0, sin(theta));
    axis = normalize(axis);
    if (abs(axis.y) != 1.0)
    {
        vec3 up = vec3(0.0, 1.0, 0.0);
        vec3 right = normalize(cross(up, axis));
        vec3 front = cross(axis, right);
        return mat3(vec3(right), vec3(axis), vec3(front)) * direction;
    }
    else
    {
        return direction * sign(axis.y);
    }
}

vec3 UnpackNormalizedFloat3(uint bits)
{
    vec3 v = vec3(uvec3(bits, bits >> uint(10), bits >> uint(20)) & uvec3(1023u));
    return ((v / vec3(1023.0)) * 2.0) - vec3(1.0);
}

mat4x3 TRSMatrix(vec3 translation, vec3 rotation, vec3 scale)
{
    vec3 s = sin(rotation);
    vec3 c = cos(rotation);
    mat4x3 m;
    m[0].x = scale.x * ((c.z * c.y) + ((s.z * s.x) * s.y));
    m[1].x = scale.y * (s.z * c.x);
    m[2].x = scale.z * ((c.z * (-s.y)) + ((s.z * s.x) * c.y));
    m[3].x = translation.x;
    m[0].y = scale.x * (((-s.z) * c.y) + ((c.z * s.x) * s.y));
    m[1].y = scale.y * (c.z * c.x);
    m[2].y = scale.z * (((-s.z) * (-s.y)) + ((c.z * s.x) * c.y));
    m[3].y = translation.y;
    m[0].z = scale.x * (c.x * s.y);
    m[1].z = scale.y * (-s.x);
    m[2].z = scale.z * (c.x * c.y);
    m[3].z = translation.z;
    return m;
}

uint PackNormalizedFloat3(vec3 v)
{
    uvec3 i = uvec3(((v + vec3(1.0)) * 0.5) * 1023.0);
    return (i.x | (i.y << uint(10))) | (i.z << uint(20));
}

uvec2 PackFloat4(vec4 v)
{
    uvec4 v16 = uvec4(packHalf2x16(vec2(v.x, 0.0)), packHalf2x16(vec2(v.y, 0.0)), packHalf2x16(vec2(v.z, 0.0)), packHalf2x16(vec2(v.w, 0.0)));
    return uvec2(v16.x | (v16.y << uint(16)), v16.z | (v16.w << uint(16)));
}

void _main(uvec3 dtid)
{
    uint seed = _514.emitter.Seed ^ (_514.emitter.TotalEmitCount + dtid.x);
    vec3 position = vec3(0.0);
    uint param = seed;
    vec3 param_1 = _536.paramData.Direction;
    float param_2 = (_536.paramData.Spread * 3.1415920257568359375) / 180.0;
    vec3 _552 = RandomSpread(param, param_1, param_2);
    seed = param;
    vec3 direction = _552;
    uint param_3 = seed;
    vec2 param_4 = _536.paramData.InitialSpeed;
    float _561 = RandomFloatRange(param_3, param_4);
    seed = param_3;
    float speed = _561;
    if (_536.paramData.EmitShapeType == 1u)
    {
        vec3 lineStart = _536.paramData.EmitShapeData[0].xyz;
        vec3 lineEnd = _536.paramData.EmitShapeData[1].xyz;
        float lineWidth = _536.paramData.EmitShapeData[1].w;
        uint param_5 = seed;
        float _586 = RandomFloat(param_5);
        seed = param_5;
        position += mix(lineStart, lineEnd, vec3(_586));
        uint param_6 = seed;
        vec3 _594 = RandomDirection(param_6);
        seed = param_6;
        position += ((_594 * lineWidth) * 0.5);
    }
    else
    {
        if (_536.paramData.EmitShapeType == 2u)
        {
            vec3 circleAxis = _536.paramData.EmitShapeData[0].xyz;
            float circleInner = _536.paramData.EmitShapeData[1].x;
            float circleOuter = _536.paramData.EmitShapeData[1].y;
            uint param_7 = seed;
            float _626 = RandomFloat(param_7);
            seed = param_7;
            float circleRadius = sqrt(mix(circleInner * circleInner, circleOuter * circleOuter, _626));
            uint param_8 = seed;
            vec3 param_9 = circleAxis;
            vec3 _635 = RandomCircle(param_8, param_9);
            seed = param_8;
            vec3 circleDirection = _635;
            position += (circleDirection * circleRadius);
            if (_536.paramData.EmitRotationApplied != 0u)
            {
                if (_651.constants.CoordinateReversed != 0u)
                {
                    circleDirection.z = -circleDirection.z;
                }
                direction = mat3(vec3(cross(circleAxis, circleDirection)), vec3(circleAxis), vec3(circleDirection)) * direction;
            }
        }
        else
        {
            if (_536.paramData.EmitShapeType == 3u)
            {
                float sphereRadius = _536.paramData.EmitShapeData[0].x;
                uint param_10 = seed;
                vec3 _693 = RandomDirection(param_10);
                seed = param_10;
                vec3 sphereDirection = _693;
                position += (sphereDirection * sphereRadius);
                if (_536.paramData.EmitRotationApplied != 0u)
                {
                    vec3 sphereUp = vec3(0.0, 1.0, 0.0);
                    if (_651.constants.CoordinateReversed != 0u)
                    {
                        sphereDirection.z = -sphereDirection.z;
                    }
                    direction = mat3(vec3(cross(sphereUp, sphereDirection)), vec3(sphereUp), vec3(sphereDirection)) * direction;
                }
            }
            else
            {
                if (_536.paramData.EmitShapeType == 4u)
                {
                    float modelSize = _536.paramData.EmitShapeData[0].y;
                    if (_514.emitter.EmitPointCount > 0u)
                    {
                        uint param_11 = seed;
                        uint _752 = RandomUint(param_11);
                        seed = param_11;
                        uint emitIndex = _752 % _514.emitter.EmitPointCount;
                        vec3 emitPosition = EmitPoints_1._data[emitIndex].Position;
                        if (_651.constants.CoordinateReversed != 0u)
                        {
                            emitPosition.z = -emitPosition.z;
                        }
                        position += (emitPosition * modelSize);
                        if (_536.paramData.EmitRotationApplied != 0u)
                        {
                            uint param_12 = EmitPoints_1._data[emitIndex].Normal;
                            vec3 emitNormal = UnpackNormalizedFloat3(param_12);
                            uint param_13 = EmitPoints_1._data[emitIndex].Binormal;
                            vec3 emitBinormal = UnpackNormalizedFloat3(param_13);
                            uint param_14 = EmitPoints_1._data[emitIndex].Tangent;
                            vec3 emitTangent = UnpackNormalizedFloat3(param_14);
                            direction = mat3(vec3(normalize(emitTangent)), vec3(normalize(emitBinormal)), vec3(normalize(emitNormal))) * direction;
                        }
                    }
                }
            }
        }
    }
    if (_651.constants.CoordinateReversed != 0u)
    {
        direction.z = -direction.z;
    }
    position = _514.emitter.Transform * vec4(position, 1.0);
    direction = _514.emitter.Transform * vec4(direction, 0.0);
    uint particleID = _514.emitter.ParticleHead + ((_514.emitter.TotalEmitCount + dtid.x) % _514.emitter.ParticleSize);
    ParticleData particle;
    particle.FlagBits = 1u;
    particle.Seed = seed;
    particle.LifeAge = 0.0;
    if (_536.paramData.ColorFlags == 0u)
    {
        particle.InheritColor = 4294967295u;
    }
    else
    {
        particle.InheritColor = _514.emitter.Color;
    }
    particle.Color = 4294967295u;
    vec3 param_15 = position;
    vec3 param_16 = vec3(0.0);
    vec3 param_17 = vec3(1.0);
    particle.Transform = TRSMatrix(param_15, param_16, param_17);
    vec3 param_18 = direction;
    particle.Direction = PackNormalizedFloat3(param_18);
    vec4 param_19 = vec4(direction * speed, 0.0);
    particle.Velocity = PackFloat4(param_19);
    Particles_1._data[particleID].FlagBits = particle.FlagBits;
    Particles_1._data[particleID].Seed = particle.Seed;
    Particles_1._data[particleID].LifeAge = particle.LifeAge;
    Particles_1._data[particleID].InheritColor = particle.InheritColor;
    Particles_1._data[particleID].Color = particle.Color;
    Particles_1._data[particleID].Direction = particle.Direction;
    Particles_1._data[particleID].Velocity = particle.Velocity;
    Particles_1._data[particleID].Transform = particle.Transform;
}

void main()
{
    uvec3 dtid = gl_GlobalInvocationID;
    uvec3 param = dtid;
    _main(param);
}

