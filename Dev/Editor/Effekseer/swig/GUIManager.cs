//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class GUIManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GUIManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GUIManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GUIManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerNativePINVOKE.delete_GUIManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public GUIManager() : this(EffekseerNativePINVOKE.new_GUIManager(), true) {
  }

  public bool Initialize(MainWindow mainWindow, DeviceType deviceType) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Initialize(swigCPtr, MainWindow.getCPtr(mainWindow), (int)deviceType);
    return ret;
  }

  public void InitializeGUI(Native native) {
    EffekseerNativePINVOKE.GUIManager_InitializeGUI(swigCPtr, Native.getCPtr(native));
  }

  public void ResetGUIStyle() {
    EffekseerNativePINVOKE.GUIManager_ResetGUIStyle(swigCPtr);
  }

  public void SetTitle(string title) {
    EffekseerNativePINVOKE.GUIManager_SetTitle(swigCPtr, title);
  }

  public void SetWindowIcon(string iconPath) {
    EffekseerNativePINVOKE.GUIManager_SetWindowIcon(swigCPtr, iconPath);
  }

  public Vec2 GetSize() {
    Vec2 ret = new Vec2(EffekseerNativePINVOKE.GUIManager_GetSize(swigCPtr), true);
    return ret;
  }

  public void SetSize(int width, int height) {
    EffekseerNativePINVOKE.GUIManager_SetSize(swigCPtr, width, height);
  }

  public void Terminate() {
    EffekseerNativePINVOKE.GUIManager_Terminate(swigCPtr);
  }

  public bool DoEvents() {
    bool ret = EffekseerNativePINVOKE.GUIManager_DoEvents(swigCPtr);
    return ret;
  }

  public void Present() {
    EffekseerNativePINVOKE.GUIManager_Present(swigCPtr);
  }

  public void Close() {
    EffekseerNativePINVOKE.GUIManager_Close(swigCPtr);
  }

  public Vec2 GetMousePosition() {
    Vec2 ret = new Vec2(EffekseerNativePINVOKE.GUIManager_GetMousePosition(swigCPtr), true);
    return ret;
  }

  public int GetMouseButton(int mouseButton) {
    int ret = EffekseerNativePINVOKE.GUIManager_GetMouseButton(swigCPtr, mouseButton);
    return ret;
  }

  public int GetMouseWheel() {
    int ret = EffekseerNativePINVOKE.GUIManager_GetMouseWheel(swigCPtr);
    return ret;
  }

  public void SetCallback(GUIManagerCallback callback) {
    EffekseerNativePINVOKE.GUIManager_SetCallback(swigCPtr, GUIManagerCallback.getCPtr(callback));
  }

  public void InvalidateFont() {
    EffekseerNativePINVOKE.GUIManager_InvalidateFont(swigCPtr);
  }

  public void ResetGUI() {
    EffekseerNativePINVOKE.GUIManager_ResetGUI(swigCPtr);
  }

  public void RenderGUI(bool isValid) {
    EffekseerNativePINVOKE.GUIManager_RenderGUI__SWIG_0(swigCPtr, isValid);
  }

  public void RenderGUI() {
    EffekseerNativePINVOKE.GUIManager_RenderGUI__SWIG_1(swigCPtr);
  }

  public System.IntPtr GetNativeHandle() { return EffekseerNativePINVOKE.GUIManager_GetNativeHandle(swigCPtr); }

  public string GetClipboardText() {
    string ret = System.Runtime.InteropServices.Marshal.PtrToStringUni(EffekseerNativePINVOKE.GUIManager_GetClipboardText(swigCPtr));
    return ret;
  }

  public void SetClipboardText(string text) {
    EffekseerNativePINVOKE.GUIManager_SetClipboardText(swigCPtr, text);
  }

  public bool Begin(string name, ref bool p_open) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Begin(swigCPtr, name, ref p_open);
    return ret;
  }

  public void End() {
    EffekseerNativePINVOKE.GUIManager_End(swigCPtr);
  }

  public bool BeginChild(string str_id, Vec2 size_arg, bool border, WindowFlags extra_flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginChild__SWIG_0(swigCPtr, str_id, Vec2.getCPtr(size_arg), border, (int)extra_flags);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BeginChild(string str_id, Vec2 size_arg, bool border) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginChild__SWIG_1(swigCPtr, str_id, Vec2.getCPtr(size_arg), border);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BeginChild(string str_id, Vec2 size_arg) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginChild__SWIG_2(swigCPtr, str_id, Vec2.getCPtr(size_arg));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BeginChild(string str_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginChild__SWIG_3(swigCPtr, str_id);
    return ret;
  }

  public void EndChild() {
    EffekseerNativePINVOKE.GUIManager_EndChild(swigCPtr);
  }

  public Vec2 GetWindowSize() {
    Vec2 ret = new Vec2(EffekseerNativePINVOKE.GUIManager_GetWindowSize(swigCPtr), true);
    return ret;
  }

  public Vec2 GetContentRegionAvail() {
    Vec2 ret = new Vec2(EffekseerNativePINVOKE.GUIManager_GetContentRegionAvail(swigCPtr), true);
    return ret;
  }

  public void SetNextWindowPos(Vec2 pos, Cond cond, Vec2 pivot) {
    EffekseerNativePINVOKE.GUIManager_SetNextWindowPos(swigCPtr, Vec2.getCPtr(pos), (int)cond, Vec2.getCPtr(pivot));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNextWindowSize(float size_x, float size_y, Cond cond) {
    EffekseerNativePINVOKE.GUIManager_SetNextWindowSize(swigCPtr, size_x, size_y, (int)cond);
  }

  public void PushStyleColor(ImGuiColFlags idx, uint col) {
    EffekseerNativePINVOKE.GUIManager_PushStyleColor(swigCPtr, (int)idx, col);
  }

  public void PopStyleColor(int count) {
    EffekseerNativePINVOKE.GUIManager_PopStyleColor__SWIG_0(swigCPtr, count);
  }

  public void PopStyleColor() {
    EffekseerNativePINVOKE.GUIManager_PopStyleColor__SWIG_1(swigCPtr);
  }

  public void PushStyleVar(ImGuiStyleVarFlags idx, float val) {
    EffekseerNativePINVOKE.GUIManager_PushStyleVar__SWIG_0(swigCPtr, (int)idx, val);
  }

  public void PushStyleVar(ImGuiStyleVarFlags idx, Vec2 val) {
    EffekseerNativePINVOKE.GUIManager_PushStyleVar__SWIG_1(swigCPtr, (int)idx, Vec2.getCPtr(val));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void PopStyleVar(int count) {
    EffekseerNativePINVOKE.GUIManager_PopStyleVar__SWIG_0(swigCPtr, count);
  }

  public void PopStyleVar() {
    EffekseerNativePINVOKE.GUIManager_PopStyleVar__SWIG_1(swigCPtr);
  }

  public void PushItemWidth(float item_width) {
    EffekseerNativePINVOKE.GUIManager_PushItemWidth(swigCPtr, item_width);
  }

  public void PopItemWidth() {
    EffekseerNativePINVOKE.GUIManager_PopItemWidth(swigCPtr);
  }

  public void Separator() {
    EffekseerNativePINVOKE.GUIManager_Separator(swigCPtr);
  }

  public void HiddenSeparator(float thicknessDraw, float thicknessItem) {
    EffekseerNativePINVOKE.GUIManager_HiddenSeparator(swigCPtr, thicknessDraw, thicknessItem);
  }

  public void SameLine() {
    EffekseerNativePINVOKE.GUIManager_SameLine(swigCPtr);
  }

  public void BeginGroup() {
    EffekseerNativePINVOKE.GUIManager_BeginGroup(swigCPtr);
  }

  public void EndGroup() {
    EffekseerNativePINVOKE.GUIManager_EndGroup(swigCPtr);
  }

  public void SetCursorPosX(float x) {
    EffekseerNativePINVOKE.GUIManager_SetCursorPosX(swigCPtr, x);
  }

  public void SetCursorPosY(float y) {
    EffekseerNativePINVOKE.GUIManager_SetCursorPosY(swigCPtr, y);
  }

  public float GetCursorPosX() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetCursorPosX(swigCPtr);
    return ret;
  }

  public float GetCursorPosY() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetCursorPosY(swigCPtr);
    return ret;
  }

  public float GetTextLineHeight() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetTextLineHeight(swigCPtr);
    return ret;
  }

  public float GetTextLineHeightWithSpacing() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetTextLineHeightWithSpacing(swigCPtr);
    return ret;
  }

  public float GetFrameHeight() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetFrameHeight(swigCPtr);
    return ret;
  }

  public float GetFrameHeightWithSpacing() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetFrameHeightWithSpacing(swigCPtr);
    return ret;
  }

  public float GetDpiScale() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetDpiScale(swigCPtr);
    return ret;
  }

  public void Columns(int count, string id, bool border) {
    EffekseerNativePINVOKE.GUIManager_Columns__SWIG_0(swigCPtr, count, id, border);
  }

  public void Columns(int count, string id) {
    EffekseerNativePINVOKE.GUIManager_Columns__SWIG_1(swigCPtr, count, id);
  }

  public void Columns(int count) {
    EffekseerNativePINVOKE.GUIManager_Columns__SWIG_2(swigCPtr, count);
  }

  public void Columns() {
    EffekseerNativePINVOKE.GUIManager_Columns__SWIG_3(swigCPtr);
  }

  public void NextColumn() {
    EffekseerNativePINVOKE.GUIManager_NextColumn(swigCPtr);
  }

  public float GetColumnWidth(int column_index) {
    float ret = EffekseerNativePINVOKE.GUIManager_GetColumnWidth__SWIG_0(swigCPtr, column_index);
    return ret;
  }

  public float GetColumnWidth() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetColumnWidth__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetColumnWidth(int column_index, float width) {
    EffekseerNativePINVOKE.GUIManager_SetColumnWidth(swigCPtr, column_index, width);
  }

  public float GetColumnOffset(int column_index) {
    float ret = EffekseerNativePINVOKE.GUIManager_GetColumnOffset__SWIG_0(swigCPtr, column_index);
    return ret;
  }

  public float GetColumnOffset() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetColumnOffset__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetColumnOffset(int column_index, float offset_x) {
    EffekseerNativePINVOKE.GUIManager_SetColumnOffset(swigCPtr, column_index, offset_x);
  }

  public void Text(string text) {
    EffekseerNativePINVOKE.GUIManager_Text(swigCPtr, text);
  }

  public void TextWrapped(string text) {
    EffekseerNativePINVOKE.GUIManager_TextWrapped(swigCPtr, text);
  }

  public bool Button(string label, float size_x, float size_y) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Button__SWIG_0(swigCPtr, label, size_x, size_y);
    return ret;
  }

  public bool Button(string label, float size_x) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Button__SWIG_1(swigCPtr, label, size_x);
    return ret;
  }

  public bool Button(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Button__SWIG_2(swigCPtr, label);
    return ret;
  }

  public void Image(ImageResource user_texture_id, float x, float y) {
    EffekseerNativePINVOKE.GUIManager_Image__SWIG_0(swigCPtr, ImageResource.getCPtr(user_texture_id), x, y);
  }

  public void Image(System.IntPtr user_texture_id, float x, float y) {
    EffekseerNativePINVOKE.GUIManager_Image__SWIG_1(swigCPtr, user_texture_id, x, y);
  }

  public bool ImageButton(ImageResource user_texture_id, float x, float y) {
    bool ret = EffekseerNativePINVOKE.GUIManager_ImageButton(swigCPtr, ImageResource.getCPtr(user_texture_id), x, y);
    return ret;
  }

  public bool Checkbox(string label, bool[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Checkbox(swigCPtr, label, v);
    return ret;
  }

  public bool RadioButton(string label, bool active) {
    bool ret = EffekseerNativePINVOKE.GUIManager_RadioButton(swigCPtr, label, active);
    return ret;
  }

  public bool InputInt(string label, int[] v, int step, int step_fast) {
    bool ret = EffekseerNativePINVOKE.GUIManager_InputInt__SWIG_0(swigCPtr, label, v, step, step_fast);
    return ret;
  }

  public bool InputInt(string label, int[] v, int step) {
    bool ret = EffekseerNativePINVOKE.GUIManager_InputInt__SWIG_1(swigCPtr, label, v, step);
    return ret;
  }

  public bool InputInt(string label, int[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_InputInt__SWIG_2(swigCPtr, label, v);
    return ret;
  }

  public bool SliderInt(string label, int[] v, int v_min, int v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_SliderInt(swigCPtr, label, v, v_min, v_max);
    return ret;
  }

  public bool BeginCombo(string label, string preview_value, ComboFlags flags, ImageResource user_texture_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginCombo__SWIG_0(swigCPtr, label, preview_value, (int)flags, ImageResource.getCPtr(user_texture_id));
    return ret;
  }

  public bool BeginCombo(string label, string preview_value, ComboFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginCombo__SWIG_1(swigCPtr, label, preview_value, (int)flags);
    return ret;
  }

  public void EndCombo() {
    EffekseerNativePINVOKE.GUIManager_EndCombo(swigCPtr);
  }

  public bool DragFloat(string label, float[] v, float v_speed, float v_min, float v_max, string display_format, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format, power);
    return ret;
  }

  public bool DragFloat(string label, float[] v, float v_speed, float v_min, float v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragFloat(string label, float[] v, float v_speed, float v_min, float v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat__SWIG_2(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragFloat(string label, float[] v, float v_speed, float v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat__SWIG_3(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragFloat(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat__SWIG_4(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat__SWIG_5(swigCPtr, label, v);
    return ret;
  }

  public bool DragFloat2(string label, float[] v, float v_speed, float v_min, float v_max, string display_format, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format, power);
    return ret;
  }

  public bool DragFloat2(string label, float[] v, float v_speed, float v_min, float v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragFloat2(string label, float[] v, float v_speed, float v_min, float v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2__SWIG_2(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragFloat2(string label, float[] v, float v_speed, float v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2__SWIG_3(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragFloat2(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2__SWIG_4(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat2(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2__SWIG_5(swigCPtr, label, v);
    return ret;
  }

  public bool DragFloat3(string label, float[] v, float v_speed, float v_min, float v_max, string display_format, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format, power);
    return ret;
  }

  public bool DragFloat3(string label, float[] v, float v_speed, float v_min, float v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragFloat3(string label, float[] v, float v_speed, float v_min, float v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3__SWIG_2(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragFloat3(string label, float[] v, float v_speed, float v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3__SWIG_3(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragFloat3(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3__SWIG_4(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat3(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3__SWIG_5(swigCPtr, label, v);
    return ret;
  }

  public bool DragFloat4(string label, float[] v, float v_speed, float v_min, float v_max, string display_format, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat4__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format, power);
    return ret;
  }

  public bool DragFloat4(string label, float[] v, float v_speed, float v_min, float v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat4__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragFloat4(string label, float[] v, float v_speed, float v_min, float v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat4__SWIG_2(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragFloat4(string label, float[] v, float v_speed, float v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat4__SWIG_3(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragFloat4(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat4__SWIG_4(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat4(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat4__SWIG_5(swigCPtr, label, v);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min, float v_max, string display_format, string display_format_max, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_0(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format, display_format_max, power);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min, float v_max, string display_format, string display_format_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_1(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format, display_format_max);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min, float v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_2(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min, float v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_3(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max, float v_speed, float v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_4(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_5(swigCPtr, label, v_current_min, v_current_max, v_speed);
    return ret;
  }

  public bool DragFloatRange2(string label, float[] v_current_min, float[] v_current_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloatRange2__SWIG_6(swigCPtr, label, v_current_min, v_current_max);
    return ret;
  }

  public bool DragInt(string label, int[] v, float v_speed, int v_min, int v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragInt(string label, int[] v, float v_speed, int v_min, int v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragInt(string label, int[] v, float v_speed, int v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt__SWIG_2(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragInt(string label, int[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt__SWIG_3(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragInt(string label, int[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt__SWIG_4(swigCPtr, label, v);
    return ret;
  }

  public bool DragInt2(string label, int[] v, float v_speed, int v_min, int v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragInt2(string label, int[] v, float v_speed, int v_min, int v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragInt2(string label, int[] v, float v_speed, int v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2__SWIG_2(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragInt2(string label, int[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2__SWIG_3(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragInt2(string label, int[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2__SWIG_4(swigCPtr, label, v);
    return ret;
  }

  public bool DragInt3(string label, int[] v, float v_speed, int v_min, int v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt3__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragInt3(string label, int[] v, float v_speed, int v_min, int v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt3__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragInt3(string label, int[] v, float v_speed, int v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt3__SWIG_2(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragInt3(string label, int[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt3__SWIG_3(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragInt3(string label, int[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt3__SWIG_4(swigCPtr, label, v);
    return ret;
  }

  public bool DragInt4(string label, int[] v, float v_speed, int v_min, int v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt4__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragInt4(string label, int[] v, float v_speed, int v_min, int v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt4__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragInt4(string label, int[] v, float v_speed, int v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt4__SWIG_2(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragInt4(string label, int[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt4__SWIG_3(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragInt4(string label, int[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt4__SWIG_4(swigCPtr, label, v);
    return ret;
  }

  public bool DragIntRange2(string label, int[] v_current_min, int[] v_current_max, float v_speed, int v_min, int v_max, string display_format, string display_format_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragIntRange2__SWIG_0(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format, display_format_max);
    return ret;
  }

  public bool DragIntRange2(string label, int[] v_current_min, int[] v_current_max, float v_speed, int v_min, int v_max, string display_format) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragIntRange2__SWIG_1(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format);
    return ret;
  }

  public bool DragIntRange2(string label, int[] v_current_min, int[] v_current_max, float v_speed, int v_min, int v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragIntRange2__SWIG_2(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragIntRange2(string label, int[] v_current_min, int[] v_current_max, float v_speed, int v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragIntRange2__SWIG_3(swigCPtr, label, v_current_min, v_current_max, v_speed, v_min);
    return ret;
  }

  public bool DragIntRange2(string label, int[] v_current_min, int[] v_current_max, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragIntRange2__SWIG_4(swigCPtr, label, v_current_min, v_current_max, v_speed);
    return ret;
  }

  public bool DragIntRange2(string label, int[] v_current_min, int[] v_current_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragIntRange2__SWIG_5(swigCPtr, label, v_current_min, v_current_max);
    return ret;
  }

  public bool DragFloat1EfkEx(string label, float[] v, float v_speed, float v_min, float v_max, string display_format1, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat1EfkEx__SWIG_0(swigCPtr, label, v, v_speed, v_min, v_max, display_format1, power);
    return ret;
  }

  public bool DragFloat1EfkEx(string label, float[] v, float v_speed, float v_min, float v_max, string display_format1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat1EfkEx__SWIG_1(swigCPtr, label, v, v_speed, v_min, v_max, display_format1);
    return ret;
  }

  public bool DragFloat1EfkEx(string label, float[] v, float v_speed, float v_min, float v_max) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat1EfkEx__SWIG_2(swigCPtr, label, v, v_speed, v_min, v_max);
    return ret;
  }

  public bool DragFloat1EfkEx(string label, float[] v, float v_speed, float v_min) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat1EfkEx__SWIG_3(swigCPtr, label, v, v_speed, v_min);
    return ret;
  }

  public bool DragFloat1EfkEx(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat1EfkEx__SWIG_4(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat1EfkEx(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat1EfkEx__SWIG_5(swigCPtr, label, v);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, string display_format1, string display_format2, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_0(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, display_format1, display_format2, power);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, string display_format1, string display_format2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_1(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, display_format1, display_format2);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, string display_format1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_2(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, display_format1);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_3(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_4(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_5(swigCPtr, label, v, v_speed, v_min1, v_max1);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed, float v_min1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_6(swigCPtr, label, v, v_speed, v_min1);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_7(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat2EfkEx(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat2EfkEx__SWIG_8(swigCPtr, label, v);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, float v_min3, float v_max3, string display_format1, string display_format2, string display_format3, float power) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_0(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, v_min3, v_max3, display_format1, display_format2, display_format3, power);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, float v_min3, float v_max3, string display_format1, string display_format2, string display_format3) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_1(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, v_min3, v_max3, display_format1, display_format2, display_format3);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, float v_min3, float v_max3, string display_format1, string display_format2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_2(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, v_min3, v_max3, display_format1, display_format2);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, float v_min3, float v_max3, string display_format1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_3(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, v_min3, v_max3, display_format1);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, float v_min3, float v_max3) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_4(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, v_min3, v_max3);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2, float v_min3) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_5(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, v_min3);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2, float v_max2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_6(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1, float v_min2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_7(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1, float v_max1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_8(swigCPtr, label, v, v_speed, v_min1, v_max1);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed, float v_min1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_9(swigCPtr, label, v, v_speed, v_min1);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v, float v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_10(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragFloat3EfkEx(string label, float[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragFloat3EfkEx__SWIG_11(swigCPtr, label, v);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed, int v_min1, int v_max1, int v_min2, int v_max2, string display_format1, string display_format2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_0(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, display_format1, display_format2);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed, int v_min1, int v_max1, int v_min2, int v_max2, string display_format1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_1(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2, display_format1);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed, int v_min1, int v_max1, int v_min2, int v_max2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_2(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2, v_max2);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed, int v_min1, int v_max1, int v_min2) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_3(swigCPtr, label, v, v_speed, v_min1, v_max1, v_min2);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed, int v_min1, int v_max1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_4(swigCPtr, label, v, v_speed, v_min1, v_max1);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed, int v_min1) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_5(swigCPtr, label, v, v_speed, v_min1);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v, int v_speed) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_6(swigCPtr, label, v, v_speed);
    return ret;
  }

  public bool DragInt2EfkEx(string label, int[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_DragInt2EfkEx__SWIG_7(swigCPtr, label, v);
    return ret;
  }

  public bool InputText(string label, string text, InputTextFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_InputText__SWIG_0(swigCPtr, label, text, (int)flags);
    return ret;
  }

  public bool InputText(string label, string text) {
    bool ret = EffekseerNativePINVOKE.GUIManager_InputText__SWIG_1(swigCPtr, label, text);
    return ret;
  }

  public bool InputTextMultiline(string label, string text) {
    bool ret = EffekseerNativePINVOKE.GUIManager_InputTextMultiline(swigCPtr, label, text);
    return ret;
  }

  public string GetInputTextResult() {
    string ret = System.Runtime.InteropServices.Marshal.PtrToStringUni(EffekseerNativePINVOKE.GUIManager_GetInputTextResult(swigCPtr));
    return ret;
  }

  public bool ColorEdit4(string label, float[] col, ColorEditFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_ColorEdit4__SWIG_0(swigCPtr, label, col, (int)flags);
    return ret;
  }

  public bool ColorEdit4(string label, float[] col) {
    bool ret = EffekseerNativePINVOKE.GUIManager_ColorEdit4__SWIG_1(swigCPtr, label, col);
    return ret;
  }

  public bool TreeNode(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_TreeNode(swigCPtr, label);
    return ret;
  }

  public bool TreeNodeEx(string label, TreeNodeFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_TreeNodeEx__SWIG_0(swigCPtr, label, (int)flags);
    return ret;
  }

  public bool TreeNodeEx(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_TreeNodeEx__SWIG_1(swigCPtr, label);
    return ret;
  }

  public void TreePop() {
    EffekseerNativePINVOKE.GUIManager_TreePop(swigCPtr);
  }

  public void SetNextTreeNodeOpen(bool is_open, Cond cond) {
    EffekseerNativePINVOKE.GUIManager_SetNextTreeNodeOpen__SWIG_0(swigCPtr, is_open, (int)cond);
  }

  public void SetNextTreeNodeOpen(bool is_open) {
    EffekseerNativePINVOKE.GUIManager_SetNextTreeNodeOpen__SWIG_1(swigCPtr, is_open);
  }

  public bool TreeNodeEx(string label, bool[] v, ImageResource user_texture_id, TreeNodeFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_TreeNodeEx__SWIG_2(swigCPtr, label, v, ImageResource.getCPtr(user_texture_id), (int)flags);
    return ret;
  }

  public bool TreeNodeEx(string label, bool[] v, ImageResource user_texture_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_TreeNodeEx__SWIG_3(swigCPtr, label, v, ImageResource.getCPtr(user_texture_id));
    return ret;
  }

  public bool TreeNodeEx(string label, bool[] v) {
    bool ret = EffekseerNativePINVOKE.GUIManager_TreeNodeEx__SWIG_4(swigCPtr, label, v);
    return ret;
  }

  public bool Selectable(string label, bool selected, SelectableFlags flags, ImageResource user_texture_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Selectable__SWIG_0(swigCPtr, label, selected, (int)flags, ImageResource.getCPtr(user_texture_id));
    return ret;
  }

  public bool Selectable(string label, bool selected, SelectableFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Selectable__SWIG_1(swigCPtr, label, selected, (int)flags);
    return ret;
  }

  public bool Selectable(string label, bool selected) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Selectable__SWIG_2(swigCPtr, label, selected);
    return ret;
  }

  public bool Selectable(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_Selectable__SWIG_3(swigCPtr, label);
    return ret;
  }

  public void SetTooltip(string text) {
    EffekseerNativePINVOKE.GUIManager_SetTooltip(swigCPtr, text);
  }

  public void BeginTooltip() {
    EffekseerNativePINVOKE.GUIManager_BeginTooltip(swigCPtr);
  }

  public void EndTooltip() {
    EffekseerNativePINVOKE.GUIManager_EndTooltip(swigCPtr);
  }

  public bool BeginMainMenuBar() {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginMainMenuBar(swigCPtr);
    return ret;
  }

  public void EndMainMenuBar() {
    EffekseerNativePINVOKE.GUIManager_EndMainMenuBar(swigCPtr);
  }

  public bool BeginMenuBar() {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginMenuBar(swigCPtr);
    return ret;
  }

  public void EndMenuBar() {
    EffekseerNativePINVOKE.GUIManager_EndMenuBar(swigCPtr);
  }

  public bool BeginMenu(string label, bool enabled) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginMenu__SWIG_0(swigCPtr, label, enabled);
    return ret;
  }

  public bool BeginMenu(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginMenu__SWIG_1(swigCPtr, label);
    return ret;
  }

  public void EndMenu() {
    EffekseerNativePINVOKE.GUIManager_EndMenu(swigCPtr);
  }

  public bool MenuItem(string label, string shortcut, bool selected, bool enabled, ImageResource icon) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_0(swigCPtr, label, shortcut, selected, enabled, ImageResource.getCPtr(icon));
    return ret;
  }

  public bool MenuItem(string label, string shortcut, bool selected, bool enabled) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_1(swigCPtr, label, shortcut, selected, enabled);
    return ret;
  }

  public bool MenuItem(string label, string shortcut, bool selected) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_2(swigCPtr, label, shortcut, selected);
    return ret;
  }

  public bool MenuItem(string label, string shortcut) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_3(swigCPtr, label, shortcut);
    return ret;
  }

  public bool MenuItem(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_4(swigCPtr, label);
    return ret;
  }

  public bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled, ImageResource icon) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_5(swigCPtr, label, shortcut, ref p_selected, enabled, ImageResource.getCPtr(icon));
    return ret;
  }

  public bool MenuItem(string label, string shortcut, ref bool p_selected, bool enabled) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_6(swigCPtr, label, shortcut, ref p_selected, enabled);
    return ret;
  }

  public bool MenuItem(string label, string shortcut, ref bool p_selected) {
    bool ret = EffekseerNativePINVOKE.GUIManager_MenuItem__SWIG_7(swigCPtr, label, shortcut, ref p_selected);
    return ret;
  }

  public void OpenPopup(string str_id) {
    EffekseerNativePINVOKE.GUIManager_OpenPopup(swigCPtr, str_id);
  }

  public bool BeginPopup(string str_id, WindowFlags extra_flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopup__SWIG_0(swigCPtr, str_id, (int)extra_flags);
    return ret;
  }

  public bool BeginPopup(string str_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopup__SWIG_1(swigCPtr, str_id);
    return ret;
  }

  public bool BeginPopupModal(string name, ref bool p_open, WindowFlags extra_flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopupModal__SWIG_0(swigCPtr, name, ref p_open, (int)extra_flags);
    return ret;
  }

  public bool BeginPopupModal(string name, ref bool p_open) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopupModal__SWIG_1(swigCPtr, name, ref p_open);
    return ret;
  }

  public bool BeginPopupModal(string name) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopupModal__SWIG_2(swigCPtr, name);
    return ret;
  }

  public bool BeginPopupContextItem(string str_id, int mouse_button) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopupContextItem__SWIG_0(swigCPtr, str_id, mouse_button);
    return ret;
  }

  public bool BeginPopupContextItem(string str_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopupContextItem__SWIG_1(swigCPtr, str_id);
    return ret;
  }

  public bool BeginPopupContextItem() {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginPopupContextItem__SWIG_2(swigCPtr);
    return ret;
  }

  public void EndPopup() {
    EffekseerNativePINVOKE.GUIManager_EndPopup(swigCPtr);
  }

  public bool IsPopupOpen(string str_id) {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsPopupOpen(swigCPtr, str_id);
    return ret;
  }

  public void CloseCurrentPopup() {
    EffekseerNativePINVOKE.GUIManager_CloseCurrentPopup(swigCPtr);
  }

  public void SetItemDefaultFocus() {
    EffekseerNativePINVOKE.GUIManager_SetItemDefaultFocus(swigCPtr);
  }

  public void AddFontFromFileTTF(string filename, float size_pixels) {
    EffekseerNativePINVOKE.GUIManager_AddFontFromFileTTF(swigCPtr, filename, size_pixels);
  }

  public bool BeginChildFrame(uint id, Vec2 size, WindowFlags flags) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginChildFrame__SWIG_0(swigCPtr, id, Vec2.getCPtr(size), (int)flags);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BeginChildFrame(uint id, Vec2 size) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginChildFrame__SWIG_1(swigCPtr, id, Vec2.getCPtr(size));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EndChildFrame() {
    EffekseerNativePINVOKE.GUIManager_EndChildFrame(swigCPtr);
  }

  public bool IsKeyDown(int user_key_index) {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsKeyDown(swigCPtr, user_key_index);
    return ret;
  }

  public bool IsMouseDown(int button) {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsMouseDown(swigCPtr, button);
    return ret;
  }

  public bool IsMouseDoubleClicked(int button) {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsMouseDoubleClicked(swigCPtr, button);
    return ret;
  }

  public bool IsItemHovered() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsItemHovered(swigCPtr);
    return ret;
  }

  public bool IsItemActive() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsItemActive(swigCPtr);
    return ret;
  }

  public bool IsItemFocused() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsItemFocused(swigCPtr);
    return ret;
  }

  public bool IsItemClicked(int mouse_button) {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsItemClicked(swigCPtr, mouse_button);
    return ret;
  }

  public bool IsAnyItemActive() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsAnyItemActive(swigCPtr);
    return ret;
  }

  public bool IsWindowHovered() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsWindowHovered(swigCPtr);
    return ret;
  }

  public bool IsAnyWindowHovered() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsAnyWindowHovered(swigCPtr);
    return ret;
  }

  public MouseCursor GetMouseCursor() {
    MouseCursor ret = (MouseCursor)EffekseerNativePINVOKE.GUIManager_GetMouseCursor(swigCPtr);
    return ret;
  }

  public float GetHoveredIDTimer() {
    float ret = EffekseerNativePINVOKE.GUIManager_GetHoveredIDTimer(swigCPtr);
    return ret;
  }

  public void DrawLineBackground(float height, uint col) {
    EffekseerNativePINVOKE.GUIManager_DrawLineBackground(swigCPtr, height, col);
  }

  public bool BeginFullscreen(string label) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginFullscreen(swigCPtr, label);
    return ret;
  }

  public void SetNextDock(DockSlot slot) {
    EffekseerNativePINVOKE.GUIManager_SetNextDock(swigCPtr, (int)slot);
  }

  public void BeginDockspace() {
    EffekseerNativePINVOKE.GUIManager_BeginDockspace(swigCPtr);
  }

  public void EndDockspace() {
    EffekseerNativePINVOKE.GUIManager_EndDockspace(swigCPtr);
  }

  public bool BeginDock(string label, ref bool p_open, WindowFlags extra_flags, Vec2 default_size) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginDock(swigCPtr, label, ref p_open, (int)extra_flags, Vec2.getCPtr(default_size));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EndDock() {
    EffekseerNativePINVOKE.GUIManager_EndDock(swigCPtr);
  }

  public void SetNextDockRate(float rate) {
    EffekseerNativePINVOKE.GUIManager_SetNextDockRate(swigCPtr, rate);
  }

  public void ResetNextParentDock() {
    EffekseerNativePINVOKE.GUIManager_ResetNextParentDock(swigCPtr);
  }

  public void SaveDock(string path) {
    EffekseerNativePINVOKE.GUIManager_SaveDock(swigCPtr, path);
  }

  public void LoadDock(string path) {
    EffekseerNativePINVOKE.GUIManager_LoadDock(swigCPtr, path);
  }

  public void ShutdownDock() {
    EffekseerNativePINVOKE.GUIManager_ShutdownDock(swigCPtr);
  }

  public void SetNextDockIcon(ImageResource icon, Vec2 iconSize) {
    EffekseerNativePINVOKE.GUIManager_SetNextDockIcon(swigCPtr, ImageResource.getCPtr(icon), Vec2.getCPtr(iconSize));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNextDockTabToolTip(string popup) {
    EffekseerNativePINVOKE.GUIManager_SetNextDockTabToolTip(swigCPtr, popup);
  }

  public bool GetDockActive() {
    bool ret = EffekseerNativePINVOKE.GUIManager_GetDockActive(swigCPtr);
    return ret;
  }

  public void SetDockActive() {
    EffekseerNativePINVOKE.GUIManager_SetDockActive(swigCPtr);
  }

  public bool BeginFCurve(int id, Vec2 size, float current, Vec2 scale, float min_value, float max_value) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginFCurve__SWIG_0(swigCPtr, id, Vec2.getCPtr(size), current, Vec2.getCPtr(scale), min_value, max_value);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BeginFCurve(int id, Vec2 size, float current, Vec2 scale, float min_value) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginFCurve__SWIG_1(swigCPtr, id, Vec2.getCPtr(size), current, Vec2.getCPtr(scale), min_value);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool BeginFCurve(int id, Vec2 size, float current, Vec2 scale) {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginFCurve__SWIG_2(swigCPtr, id, Vec2.getCPtr(size), current, Vec2.getCPtr(scale));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EndFCurve() {
    EffekseerNativePINVOKE.GUIManager_EndFCurve(swigCPtr);
  }

  public bool FCurve(int fcurve_id, float[] keys, float[] values, float[] leftHandleKeys, float[] leftHandleValues, float[] rightHandleKeys, float[] rightHandleValues, int[] interporations, FCurveEdgeType startEdge, FCurveEdgeType endEdge, byte[] kv_selected, int count, float defaultValue, bool isLocked, bool canControl, uint col, bool selected, float v_min, float v_max, ref int newCount, ref bool newSelected, ref float movedX, ref float movedY, ref int changedType) {
    bool ret = EffekseerNativePINVOKE.GUIManager_FCurve(swigCPtr, fcurve_id, keys, values, leftHandleKeys, leftHandleValues, rightHandleKeys, rightHandleValues, interporations, (int)startEdge, (int)endEdge, kv_selected, count, defaultValue, isLocked, canControl, col, selected, v_min, v_max, ref newCount, ref newSelected, ref movedX, ref movedY, ref changedType);
    return ret;
  }

  public bool StartSelectingAreaFCurve() {
    bool ret = EffekseerNativePINVOKE.GUIManager_StartSelectingAreaFCurve(swigCPtr);
    return ret;
  }

  public bool BeginDragDropSource() {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginDragDropSource(swigCPtr);
    return ret;
  }

  public bool SetDragDropPayload(string type, byte[] data, int size) {
    bool ret = EffekseerNativePINVOKE.GUIManager_SetDragDropPayload(swigCPtr, type, data, size);
    return ret;
  }

  public void EndDragDropSource() {
    EffekseerNativePINVOKE.GUIManager_EndDragDropSource(swigCPtr);
  }

  public bool BeginDragDropTarget() {
    bool ret = EffekseerNativePINVOKE.GUIManager_BeginDragDropTarget(swigCPtr);
    return ret;
  }

  public bool AcceptDragDropPayload(string type, byte[] data_output, int data_output_size, ref int size) {
    bool ret = EffekseerNativePINVOKE.GUIManager_AcceptDragDropPayload(swigCPtr, type, data_output, data_output_size, ref size);
    return ret;
  }

  public void EndDragDropTarget() {
    EffekseerNativePINVOKE.GUIManager_EndDragDropTarget(swigCPtr);
  }

  public static DialogSelection show(string message, string title, DialogStyle style, DialogButtons buttons) {
    DialogSelection ret = (DialogSelection)EffekseerNativePINVOKE.GUIManager_show(message, title, (int)style, (int)buttons);
    return ret;
  }

  public static bool IsMacOSX() {
    bool ret = EffekseerNativePINVOKE.GUIManager_IsMacOSX();
    return ret;
  }

  public static void SetIniFilename(string filename) {
    EffekseerNativePINVOKE.GUIManager_SetIniFilename(filename);
  }

  public void Markdown(string text) {
    EffekseerNativePINVOKE.GUIManager_Markdown(swigCPtr, text);
  }

}

}
