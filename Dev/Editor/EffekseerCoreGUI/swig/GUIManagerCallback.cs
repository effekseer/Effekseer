//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class GUIManagerCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GUIManagerCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GUIManagerCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GUIManagerCallback() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerNativePINVOKE.delete_GUIManagerCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public GUIManagerCallback() : this(EffekseerNativePINVOKE.new_GUIManagerCallback(), true) {
    SwigDirectorConnect();
  }

  public virtual void Resized(int x, int y) {
    if (SwigDerivedClassHasMethod("Resized", swigMethodTypes0)) EffekseerNativePINVOKE.GUIManagerCallback_ResizedSwigExplicitGUIManagerCallback(swigCPtr, x, y); else EffekseerNativePINVOKE.GUIManagerCallback_Resized(swigCPtr, x, y);
  }

  public virtual void Droped() {
    if (SwigDerivedClassHasMethod("Droped", swigMethodTypes1)) EffekseerNativePINVOKE.GUIManagerCallback_DropedSwigExplicitGUIManagerCallback(swigCPtr); else EffekseerNativePINVOKE.GUIManagerCallback_Droped(swigCPtr);
  }

  public virtual void Focused() {
    if (SwigDerivedClassHasMethod("Focused", swigMethodTypes2)) EffekseerNativePINVOKE.GUIManagerCallback_FocusedSwigExplicitGUIManagerCallback(swigCPtr); else EffekseerNativePINVOKE.GUIManagerCallback_Focused(swigCPtr);
  }

  public virtual bool Closing() {
    bool ret = (SwigDerivedClassHasMethod("Closing", swigMethodTypes3) ? EffekseerNativePINVOKE.GUIManagerCallback_ClosingSwigExplicitGUIManagerCallback(swigCPtr) : EffekseerNativePINVOKE.GUIManagerCallback_Closing(swigCPtr));
    return ret;
  }

  public virtual void Iconify(int f) {
    if (SwigDerivedClassHasMethod("Iconify", swigMethodTypes4)) EffekseerNativePINVOKE.GUIManagerCallback_IconifySwigExplicitGUIManagerCallback(swigCPtr, f); else EffekseerNativePINVOKE.GUIManagerCallback_Iconify(swigCPtr, f);
  }

  public virtual void DpiChanged(float scale) {
    if (SwigDerivedClassHasMethod("DpiChanged", swigMethodTypes5)) EffekseerNativePINVOKE.GUIManagerCallback_DpiChangedSwigExplicitGUIManagerCallback(swigCPtr, scale); else EffekseerNativePINVOKE.GUIManagerCallback_DpiChanged(swigCPtr, scale);
  }

  public virtual bool ClickLink(string path) {
    bool ret = (SwigDerivedClassHasMethod("ClickLink", swigMethodTypes6) ? EffekseerNativePINVOKE.GUIManagerCallback_ClickLinkSwigExplicitGUIManagerCallback(swigCPtr, path) : EffekseerNativePINVOKE.GUIManagerCallback_ClickLink(swigCPtr, path));
    return ret;
  }

  public string GetPath() {
    string ret = System.Runtime.InteropServices.Marshal.PtrToStringUni(EffekseerNativePINVOKE.GUIManagerCallback_GetPath(swigCPtr));
    return ret;
  }

  public void SetPath(string path) {
    EffekseerNativePINVOKE.GUIManagerCallback_SetPath(swigCPtr, path);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Resized", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGUIManagerCallback_0(SwigDirectorMethodResized);
    if (SwigDerivedClassHasMethod("Droped", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGUIManagerCallback_1(SwigDirectorMethodDroped);
    if (SwigDerivedClassHasMethod("Focused", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateGUIManagerCallback_2(SwigDirectorMethodFocused);
    if (SwigDerivedClassHasMethod("Closing", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateGUIManagerCallback_3(SwigDirectorMethodClosing);
    if (SwigDerivedClassHasMethod("Iconify", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateGUIManagerCallback_4(SwigDirectorMethodIconify);
    if (SwigDerivedClassHasMethod("DpiChanged", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateGUIManagerCallback_5(SwigDirectorMethodDpiChanged);
    if (SwigDerivedClassHasMethod("ClickLink", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateGUIManagerCallback_6(SwigDirectorMethodClickLink);
    EffekseerNativePINVOKE.GUIManagerCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(GUIManagerCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodResized(int x, int y) {
    Resized(x, y);
  }

  private void SwigDirectorMethodDroped() {
    Droped();
  }

  private void SwigDirectorMethodFocused() {
    Focused();
  }

  private bool SwigDirectorMethodClosing() {
    return Closing();
  }

  private void SwigDirectorMethodIconify(int f) {
    Iconify(f);
  }

  private void SwigDirectorMethodDpiChanged(float scale) {
    DpiChanged(scale);
  }

  private bool SwigDirectorMethodClickLink(System.IntPtr path) {
    return ClickLink(System.Runtime.InteropServices.Marshal.PtrToStringUni(path));
  }

  public delegate void SwigDelegateGUIManagerCallback_0(int x, int y);
  public delegate void SwigDelegateGUIManagerCallback_1();
  public delegate void SwigDelegateGUIManagerCallback_2();
  public delegate bool SwigDelegateGUIManagerCallback_3();
  public delegate void SwigDelegateGUIManagerCallback_4(int f);
  public delegate void SwigDelegateGUIManagerCallback_5(float scale);
  public delegate bool SwigDelegateGUIManagerCallback_6(System.IntPtr path);

  private SwigDelegateGUIManagerCallback_0 swigDelegate0;
  private SwigDelegateGUIManagerCallback_1 swigDelegate1;
  private SwigDelegateGUIManagerCallback_2 swigDelegate2;
  private SwigDelegateGUIManagerCallback_3 swigDelegate3;
  private SwigDelegateGUIManagerCallback_4 swigDelegate4;
  private SwigDelegateGUIManagerCallback_5 swigDelegate5;
  private SwigDelegateGUIManagerCallback_6 swigDelegate6;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(float) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(string) };
}

}
