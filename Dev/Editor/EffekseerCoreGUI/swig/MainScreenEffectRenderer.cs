//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class MainScreenEffectRenderer : EffectRenderer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MainScreenEffectRenderer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(EffekseerNativePINVOKE.MainScreenEffectRenderer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MainScreenEffectRenderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerNativePINVOKE.delete_MainScreenEffectRenderer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Color GridColor {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_GridColor_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = EffekseerNativePINVOKE.MainScreenEffectRenderer_GridColor_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public int GuideWidth {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_GuideWidth_set(swigCPtr, value);
    } 
    get {
      int ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_GuideWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int GuideHeight {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_GuideHeight_set(swigCPtr, value);
    } 
    get {
      int ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_GuideHeight_get(swigCPtr);
      return ret;
    } 
  }

  public bool RendersGuide {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_RendersGuide_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_RendersGuide_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsGridShown {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridShown_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridShown_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsGridXYShown {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridXYShown_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridXYShown_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsGridXZShown {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridXZShown_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridXZShown_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsGridYZShown {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridYZShown_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_IsGridYZShown_get(swigCPtr);
      return ret;
    } 
  }

  public float GridLength {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_GridLength_set(swigCPtr, value);
    } 
    get {
      float ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_GridLength_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsCullingShown {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_IsCullingShown_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_IsCullingShown_get(swigCPtr);
      return ret;
    } 
  }

  public float CullingRadius {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_CullingRadius_set(swigCPtr, value);
    } 
    get {
      float ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_CullingRadius_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsRightHand {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_IsRightHand_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.MainScreenEffectRenderer_IsRightHand_get(swigCPtr);
      return ret;
    } 
  }

  public Vector3F CullingPosition {
    set {
      EffekseerNativePINVOKE.MainScreenEffectRenderer_CullingPosition_set(swigCPtr, Vector3F.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = EffekseerNativePINVOKE.MainScreenEffectRenderer_CullingPosition_get(swigCPtr);
      Vector3F ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3F(cPtr, false);
      return ret;
    } 
  }

  public void LoadBackgroundImage(string path) {
    EffekseerNativePINVOKE.MainScreenEffectRenderer_LoadBackgroundImage(swigCPtr, path);
  }

  public MainScreenEffectRenderer() : this(EffekseerNativePINVOKE.new_MainScreenEffectRenderer(), true) {
  }

}

}
