//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class IO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal IO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IO() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          EffekseerNativePINVOKE.delete_IO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IO(int checkFileInterval) : this(EffekseerNativePINVOKE.new_IO__SWIG_0(checkFileInterval), true) {
  }

  public IO() : this(EffekseerNativePINVOKE.new_IO__SWIG_1(), true) {
  }

  public static IO GetInstance() {
    global::System.IntPtr cPtr = EffekseerNativePINVOKE.IO_GetInstance();
    IO ret = (cPtr == global::System.IntPtr.Zero) ? null : new IO(cPtr, true);
    return ret;
  }

  public static void Initialize(int checkFileInterval) {
    EffekseerNativePINVOKE.IO_Initialize__SWIG_0(checkFileInterval);
  }

  public static void Initialize() {
    EffekseerNativePINVOKE.IO_Initialize__SWIG_1();
  }

  public static void Terminate() {
    EffekseerNativePINVOKE.IO_Terminate();
  }

  public StaticFile LoadFile(string path) {
    global::System.IntPtr cPtr = EffekseerNativePINVOKE.IO_LoadFile(swigCPtr, path);
    StaticFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticFile(cPtr, true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StaticFile LoadIPCFile(string path) {
    global::System.IntPtr cPtr = EffekseerNativePINVOKE.IO_LoadIPCFile(swigCPtr, path);
    StaticFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new StaticFile(cPtr, true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetIsExistLatestFile(StaticFile staticFile) {
    bool ret = EffekseerNativePINVOKE.IO_GetIsExistLatestFile(swigCPtr, StaticFile.getCPtr(staticFile));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Update() {
    EffekseerNativePINVOKE.IO_Update(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCallback(IOCallback callback) {
    EffekseerNativePINVOKE.IO_AddCallback(swigCPtr, IOCallback.getCPtr(callback));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
