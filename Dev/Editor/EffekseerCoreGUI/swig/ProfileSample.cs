//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class ProfileSample : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProfileSample(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProfileSample obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProfileSample() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerNativePINVOKE.delete_ProfileSample(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool IsValid {
    set {
      EffekseerNativePINVOKE.ProfileSample_IsValid_set(swigCPtr, value);
    } 
    get {
      bool ret = EffekseerNativePINVOKE.ProfileSample_IsValid_get(swigCPtr);
      return ret;
    } 
  }

  public class Manager : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Manager(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Manager obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Manager() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            EffekseerNativePINVOKE.delete_ProfileSample_Manager(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public uint HandleCount {
      set {
        EffekseerNativePINVOKE.ProfileSample_Manager_HandleCount_set(swigCPtr, value);
      } 
      get {
        uint ret = EffekseerNativePINVOKE.ProfileSample_Manager_HandleCount_get(swigCPtr);
        return ret;
      } 
    }
  
    public float CpuTime {
      set {
        EffekseerNativePINVOKE.ProfileSample_Manager_CpuTime_set(swigCPtr, value);
      } 
      get {
        float ret = EffekseerNativePINVOKE.ProfileSample_Manager_CpuTime_get(swigCPtr);
        return ret;
      } 
    }
  
    public float GpuTime {
      set {
        EffekseerNativePINVOKE.ProfileSample_Manager_GpuTime_set(swigCPtr, value);
      } 
      get {
        float ret = EffekseerNativePINVOKE.ProfileSample_Manager_GpuTime_get(swigCPtr);
        return ret;
      } 
    }
  
    public Manager() : this(EffekseerNativePINVOKE.new_ProfileSample_Manager(), true) {
    }
  
  }

  public ProfileSampleManagerVector Managers {
    set {
      EffekseerNativePINVOKE.ProfileSample_Managers_set(swigCPtr, ProfileSampleManagerVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = EffekseerNativePINVOKE.ProfileSample_Managers_get(swigCPtr);
      ProfileSampleManagerVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProfileSampleManagerVector(cPtr, false);
      return ret;
    } 
  }

  public class Effect : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Effect(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Effect obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Effect() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            EffekseerNativePINVOKE.delete_ProfileSample_Effect(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public string Key {
      set {
        EffekseerNativePINVOKE.ProfileSample_Effect_Key_set(swigCPtr, value);
        if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = EffekseerNativePINVOKE.ProfileSample_Effect_Key_get(swigCPtr);
        if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public uint HandleCount {
      set {
        EffekseerNativePINVOKE.ProfileSample_Effect_HandleCount_set(swigCPtr, value);
      } 
      get {
        uint ret = EffekseerNativePINVOKE.ProfileSample_Effect_HandleCount_get(swigCPtr);
        return ret;
      } 
    }
  
    public float GpuTime {
      set {
        EffekseerNativePINVOKE.ProfileSample_Effect_GpuTime_set(swigCPtr, value);
      } 
      get {
        float ret = EffekseerNativePINVOKE.ProfileSample_Effect_GpuTime_get(swigCPtr);
        return ret;
      } 
    }
  
    public Effect() : this(EffekseerNativePINVOKE.new_ProfileSample_Effect(), true) {
    }
  
  }

  public ProfileSampleEffectVector Effects {
    set {
      EffekseerNativePINVOKE.ProfileSample_Effects_set(swigCPtr, ProfileSampleEffectVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = EffekseerNativePINVOKE.ProfileSample_Effects_get(swigCPtr);
      ProfileSampleEffectVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProfileSampleEffectVector(cPtr, false);
      return ret;
    } 
  }

  public ProfileSample() : this(EffekseerNativePINVOKE.new_ProfileSample(), true) {
  }

}

}
