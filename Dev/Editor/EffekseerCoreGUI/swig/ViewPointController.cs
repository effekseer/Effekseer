//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class ViewPointController : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ViewPointController(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ViewPointController obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ViewPointController() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          EffekseerNativePINVOKE.delete_ViewPointController(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Vector2I GetScreenSize() {
    Vector2I ret = new Vector2I(EffekseerNativePINVOKE.ViewPointController_GetScreenSize(swigCPtr), true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetScreenSize(int width, int height) {
    EffekseerNativePINVOKE.ViewPointController_SetScreenSize(swigCPtr, width, height);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update() {
    EffekseerNativePINVOKE.ViewPointController_Update(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix44F GetCameraMatrix() {
    Matrix44F ret = new Matrix44F(EffekseerNativePINVOKE.ViewPointController_GetCameraMatrix(swigCPtr), true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix44F GetProjectionMatrix() {
    Matrix44F ret = new Matrix44F(EffekseerNativePINVOKE.ViewPointController_GetProjectionMatrix(swigCPtr), true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProjectionMatrixStyle ProjectionStyle {
    set {
      EffekseerNativePINVOKE.ViewPointController_ProjectionStyle_set(swigCPtr, (int)value);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ProjectionMatrixStyle ret = (ProjectionMatrixStyle)EffekseerNativePINVOKE.ViewPointController_ProjectionStyle_get(swigCPtr);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float RateOfMagnification {
    set {
      EffekseerNativePINVOKE.ViewPointController_RateOfMagnification_set(swigCPtr, value);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = EffekseerNativePINVOKE.ViewPointController_RateOfMagnification_get(swigCPtr);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ClippingStart {
    set {
      EffekseerNativePINVOKE.ViewPointController_ClippingStart_set(swigCPtr, value);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = EffekseerNativePINVOKE.ViewPointController_ClippingStart_get(swigCPtr);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float ClippingEnd {
    set {
      EffekseerNativePINVOKE.ViewPointController_ClippingEnd_set(swigCPtr, value);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = EffekseerNativePINVOKE.ViewPointController_ClippingEnd_get(swigCPtr);
      if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Ray GetCameraRay() {
    Ray ret = new Ray(EffekseerNativePINVOKE.ViewPointController_GetCameraRay(swigCPtr), true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Rotate(float x, float y) {
    bool ret = EffekseerNativePINVOKE.ViewPointController_Rotate(swigCPtr, x, y);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Slide(float x, float y) {
    bool ret = EffekseerNativePINVOKE.ViewPointController_Slide(swigCPtr, x, y);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Zoom(float delta) {
    bool ret = EffekseerNativePINVOKE.ViewPointController_Zoom(swigCPtr, delta);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMouseInverseFlag(bool rotX, bool rotY, bool slideX, bool slideY) {
    EffekseerNativePINVOKE.ViewPointController_SetMouseInverseFlag(swigCPtr, rotX, rotY, slideX, slideY);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public ProjectionType GetProjectionType() {
    ProjectionType ret = (ProjectionType)EffekseerNativePINVOKE.ViewPointController_GetProjectionType(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetProjectionType(ProjectionType type) {
    EffekseerNativePINVOKE.ViewPointController_SetProjectionType(swigCPtr, (int)type);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public CoordinateSystemType GetCoordinateSystem() {
    CoordinateSystemType ret = (CoordinateSystemType)EffekseerNativePINVOKE.ViewPointController_GetCoordinateSystem(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCoordinateSystem(CoordinateSystemType type) {
    EffekseerNativePINVOKE.ViewPointController_SetCoordinateSystem(swigCPtr, (int)type);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3F GetFocusPosition() {
    Vector3F ret = new Vector3F(EffekseerNativePINVOKE.ViewPointController_GetFocusPosition(swigCPtr), true);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFocusPosition(Vector3F position) {
    EffekseerNativePINVOKE.ViewPointController_SetFocusPosition(swigCPtr, Vector3F.getCPtr(position));
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetDistance() {
    float ret = EffekseerNativePINVOKE.ViewPointController_GetDistance(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDistance(float distance) {
    EffekseerNativePINVOKE.ViewPointController_SetDistance(swigCPtr, distance);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetAngleX() {
    float ret = EffekseerNativePINVOKE.ViewPointController_GetAngleX(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAngleX(float value) {
    EffekseerNativePINVOKE.ViewPointController_SetAngleX(swigCPtr, value);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetAngleY() {
    float ret = EffekseerNativePINVOKE.ViewPointController_GetAngleY(swigCPtr);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAngleY(float value) {
    EffekseerNativePINVOKE.ViewPointController_SetAngleY(swigCPtr, value);
    if (EffekseerNativePINVOKE.SWIGPendingException.Pending) throw EffekseerNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public ViewPointController() : this(EffekseerNativePINVOKE.new_ViewPointController(), true) {
  }

}

}
