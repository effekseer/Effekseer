// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB.Effect
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum PositionType : int
{
  PositionType_None = -1,
  PositionType_Fixed = 0,
  PositionType_PVA = 1,
  PositionType_Easing = 2,
  PositionType_FCurve = 3,
  PositionType_NurbsCurve = 4,
  PositionType_ViewOffset = 5,
};

public struct PositionParameter_Fixed : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter_Fixed GetRootAsPositionParameter_Fixed(ByteBuffer _bb) { return GetRootAsPositionParameter_Fixed(_bb, new PositionParameter_Fixed()); }
  public static PositionParameter_Fixed GetRootAsPositionParameter_Fixed(ByteBuffer _bb, PositionParameter_Fixed obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter_Fixed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RefEq { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public Effekseer.FB.Vec3F? Value { get { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.Vec3F?)(new Effekseer.FB.Vec3F()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<Effekseer.FB.Effect.PositionParameter_Fixed> CreatePositionParameter_Fixed(FlatBufferBuilder builder,
      int ref_eq = -1,
      Effekseer.FB.Vec3FT value = null) {
    builder.StartTable(2);
    PositionParameter_Fixed.AddValue(builder, Effekseer.FB.Vec3F.Pack(builder, value));
    PositionParameter_Fixed.AddRefEq(builder, ref_eq);
    return PositionParameter_Fixed.EndPositionParameter_Fixed(builder);
  }

  public static void StartPositionParameter_Fixed(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRefEq(FlatBufferBuilder builder, int refEq) { builder.AddInt(0, refEq, -1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3F> valueOffset) { builder.AddStruct(1, valueOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter_Fixed> EndPositionParameter_Fixed(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter_Fixed>(o);
  }
  public PositionParameter_FixedT UnPack() {
    var _o = new PositionParameter_FixedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameter_FixedT _o) {
    _o.RefEq = this.RefEq;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter_Fixed> Pack(FlatBufferBuilder builder, PositionParameter_FixedT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter_Fixed>);
    return CreatePositionParameter_Fixed(
      builder,
      _o.RefEq,
      _o.Value);
  }
};

public class PositionParameter_FixedT
{
  public int RefEq { get; set; }
  public Effekseer.FB.Vec3FT Value { get; set; }

  public PositionParameter_FixedT() {
    this.RefEq = -1;
    this.Value = new Effekseer.FB.Vec3FT();
  }
}

public struct PositionParameter_PVA : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter_PVA GetRootAsPositionParameter_PVA(ByteBuffer _bb) { return GetRootAsPositionParameter_PVA(_bb, new PositionParameter_PVA()); }
  public static PositionParameter_PVA GetRootAsPositionParameter_PVA(ByteBuffer _bb, PositionParameter_PVA obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter_PVA __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.Vec3FRange? Pos { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.Vec3FRange?)(new Effekseer.FB.Vec3FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.Vec3FRange? Vel { get { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.Vec3FRange?)(new Effekseer.FB.Vec3FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.Vec3FRange? Acc { get { int o = __p.__offset(8); return o != 0 ? (Effekseer.FB.Vec3FRange?)(new Effekseer.FB.Vec3FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPositionParameter_PVA(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FRange> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddVel(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FRange> velOffset) { builder.AddStruct(1, velOffset.Value, 0); }
  public static void AddAcc(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FRange> accOffset) { builder.AddStruct(2, accOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter_PVA> EndPositionParameter_PVA(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter_PVA>(o);
  }
  public PositionParameter_PVAT UnPack() {
    var _o = new PositionParameter_PVAT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameter_PVAT _o) {
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
    _o.Vel = this.Vel.HasValue ? this.Vel.Value.UnPack() : null;
    _o.Acc = this.Acc.HasValue ? this.Acc.Value.UnPack() : null;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter_PVA> Pack(FlatBufferBuilder builder, PositionParameter_PVAT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter_PVA>);
    StartPositionParameter_PVA(builder);
    AddPos(builder, Effekseer.FB.Vec3FRange.Pack(builder, _o.Pos));
    AddVel(builder, Effekseer.FB.Vec3FRange.Pack(builder, _o.Vel));
    AddAcc(builder, Effekseer.FB.Vec3FRange.Pack(builder, _o.Acc));
    return EndPositionParameter_PVA(builder);
  }
};

public class PositionParameter_PVAT
{
  public Effekseer.FB.Vec3FRangeT Pos { get; set; }
  public Effekseer.FB.Vec3FRangeT Vel { get; set; }
  public Effekseer.FB.Vec3FRangeT Acc { get; set; }

  public PositionParameter_PVAT() {
    this.Pos = new Effekseer.FB.Vec3FRangeT();
    this.Vel = new Effekseer.FB.Vec3FRangeT();
    this.Acc = new Effekseer.FB.Vec3FRangeT();
  }
}

public struct PositionParameter_Easing : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter_Easing GetRootAsPositionParameter_Easing(ByteBuffer _bb) { return GetRootAsPositionParameter_Easing(_bb, new PositionParameter_Easing()); }
  public static PositionParameter_Easing GetRootAsPositionParameter_Easing(ByteBuffer _bb, PositionParameter_Easing obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter_Easing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.Vec3FEasing? Location { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.Vec3FEasing?)(new Effekseer.FB.Vec3FEasing()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Effekseer.FB.Effect.PositionParameter_Easing> CreatePositionParameter_Easing(FlatBufferBuilder builder,
      Offset<Effekseer.FB.Vec3FEasing> locationOffset = default(Offset<Effekseer.FB.Vec3FEasing>)) {
    builder.StartTable(1);
    PositionParameter_Easing.AddLocation(builder, locationOffset);
    return PositionParameter_Easing.EndPositionParameter_Easing(builder);
  }

  public static void StartPositionParameter_Easing(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FEasing> locationOffset) { builder.AddOffset(0, locationOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter_Easing> EndPositionParameter_Easing(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter_Easing>(o);
  }
  public PositionParameter_EasingT UnPack() {
    var _o = new PositionParameter_EasingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameter_EasingT _o) {
    _o.Location = this.Location.HasValue ? this.Location.Value.UnPack() : null;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter_Easing> Pack(FlatBufferBuilder builder, PositionParameter_EasingT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter_Easing>);
    var _location = _o.Location == null ? default(Offset<Effekseer.FB.Vec3FEasing>) : Effekseer.FB.Vec3FEasing.Pack(builder, _o.Location);
    return CreatePositionParameter_Easing(
      builder,
      _location);
  }
};

public class PositionParameter_EasingT
{
  public Effekseer.FB.Vec3FEasingT Location { get; set; }

  public PositionParameter_EasingT() {
    this.Location = null;
  }
}

public struct PositionParameter_FCurve : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter_FCurve GetRootAsPositionParameter_FCurve(ByteBuffer _bb) { return GetRootAsPositionParameter_FCurve(_bb, new PositionParameter_FCurve()); }
  public static PositionParameter_FCurve GetRootAsPositionParameter_FCurve(ByteBuffer _bb, PositionParameter_FCurve obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter_FCurve __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.FCurveGroup? Fcurve { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.FCurveGroup?)(new Effekseer.FB.FCurveGroup()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Effekseer.FB.Effect.PositionParameter_FCurve> CreatePositionParameter_FCurve(FlatBufferBuilder builder,
      Offset<Effekseer.FB.FCurveGroup> fcurveOffset = default(Offset<Effekseer.FB.FCurveGroup>)) {
    builder.StartTable(1);
    PositionParameter_FCurve.AddFcurve(builder, fcurveOffset);
    return PositionParameter_FCurve.EndPositionParameter_FCurve(builder);
  }

  public static void StartPositionParameter_FCurve(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFcurve(FlatBufferBuilder builder, Offset<Effekseer.FB.FCurveGroup> fcurveOffset) { builder.AddOffset(0, fcurveOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter_FCurve> EndPositionParameter_FCurve(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter_FCurve>(o);
  }
  public PositionParameter_FCurveT UnPack() {
    var _o = new PositionParameter_FCurveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameter_FCurveT _o) {
    _o.Fcurve = this.Fcurve.HasValue ? this.Fcurve.Value.UnPack() : null;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter_FCurve> Pack(FlatBufferBuilder builder, PositionParameter_FCurveT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter_FCurve>);
    var _fcurve = _o.Fcurve == null ? default(Offset<Effekseer.FB.FCurveGroup>) : Effekseer.FB.FCurveGroup.Pack(builder, _o.Fcurve);
    return CreatePositionParameter_FCurve(
      builder,
      _fcurve);
  }
};

public class PositionParameter_FCurveT
{
  public Effekseer.FB.FCurveGroupT Fcurve { get; set; }

  public PositionParameter_FCurveT() {
    this.Fcurve = null;
  }
}

public struct PositionParameter_NurbsCurve : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter_NurbsCurve GetRootAsPositionParameter_NurbsCurve(ByteBuffer _bb) { return GetRootAsPositionParameter_NurbsCurve(_bb, new PositionParameter_NurbsCurve()); }
  public static PositionParameter_NurbsCurve GetRootAsPositionParameter_NurbsCurve(ByteBuffer _bb, PositionParameter_NurbsCurve obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter_NurbsCurve __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Scale { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MoveSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int LoopType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve> CreatePositionParameter_NurbsCurve(FlatBufferBuilder builder,
      int index = 0,
      float scale = 0.0f,
      float move_speed = 0.0f,
      int loop_type = 0) {
    builder.StartTable(4);
    PositionParameter_NurbsCurve.AddLoopType(builder, loop_type);
    PositionParameter_NurbsCurve.AddMoveSpeed(builder, move_speed);
    PositionParameter_NurbsCurve.AddScale(builder, scale);
    PositionParameter_NurbsCurve.AddIndex(builder, index);
    return PositionParameter_NurbsCurve.EndPositionParameter_NurbsCurve(builder);
  }

  public static void StartPositionParameter_NurbsCurve(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(1, scale, 0.0f); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float moveSpeed) { builder.AddFloat(2, moveSpeed, 0.0f); }
  public static void AddLoopType(FlatBufferBuilder builder, int loopType) { builder.AddInt(3, loopType, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve> EndPositionParameter_NurbsCurve(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve>(o);
  }
  public PositionParameter_NurbsCurveT UnPack() {
    var _o = new PositionParameter_NurbsCurveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameter_NurbsCurveT _o) {
    _o.Index = this.Index;
    _o.Scale = this.Scale;
    _o.MoveSpeed = this.MoveSpeed;
    _o.LoopType = this.LoopType;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve> Pack(FlatBufferBuilder builder, PositionParameter_NurbsCurveT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve>);
    return CreatePositionParameter_NurbsCurve(
      builder,
      _o.Index,
      _o.Scale,
      _o.MoveSpeed,
      _o.LoopType);
  }
};

public class PositionParameter_NurbsCurveT
{
  public int Index { get; set; }
  public float Scale { get; set; }
  public float MoveSpeed { get; set; }
  public int LoopType { get; set; }

  public PositionParameter_NurbsCurveT() {
    this.Index = 0;
    this.Scale = 0.0f;
    this.MoveSpeed = 0.0f;
    this.LoopType = 0;
  }
}

public struct PositionParameter_ViewOffset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter_ViewOffset GetRootAsPositionParameter_ViewOffset(ByteBuffer _bb) { return GetRootAsPositionParameter_ViewOffset(_bb, new PositionParameter_ViewOffset()); }
  public static PositionParameter_ViewOffset GetRootAsPositionParameter_ViewOffset(ByteBuffer _bb, PositionParameter_ViewOffset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter_ViewOffset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.FloatRange? Distance { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.FloatRange?)(new Effekseer.FB.FloatRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPositionParameter_ViewOffset(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDistance(FlatBufferBuilder builder, Offset<Effekseer.FB.FloatRange> distanceOffset) { builder.AddStruct(0, distanceOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset> EndPositionParameter_ViewOffset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset>(o);
  }
  public PositionParameter_ViewOffsetT UnPack() {
    var _o = new PositionParameter_ViewOffsetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameter_ViewOffsetT _o) {
    _o.Distance = this.Distance.HasValue ? this.Distance.Value.UnPack() : null;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset> Pack(FlatBufferBuilder builder, PositionParameter_ViewOffsetT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset>);
    StartPositionParameter_ViewOffset(builder);
    AddDistance(builder, Effekseer.FB.FloatRange.Pack(builder, _o.Distance));
    return EndPositionParameter_ViewOffset(builder);
  }
};

public class PositionParameter_ViewOffsetT
{
  public Effekseer.FB.FloatRangeT Distance { get; set; }

  public PositionParameter_ViewOffsetT() {
    this.Distance = new Effekseer.FB.FloatRangeT();
  }
}

public struct PositionParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static PositionParameter GetRootAsPositionParameter(ByteBuffer _bb) { return GetRootAsPositionParameter(_bb, new PositionParameter()); }
  public static PositionParameter GetRootAsPositionParameter(ByteBuffer _bb, PositionParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PositionParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.Effect.PositionType Type { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.Effect.PositionType)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.Effect.PositionType.PositionType_Fixed; } }
  public Effekseer.FB.Effect.PositionParameter_Fixed? Fixed { get { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.Effect.PositionParameter_Fixed?)(new Effekseer.FB.Effect.PositionParameter_Fixed()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.PositionParameter_PVA? Pva { get { int o = __p.__offset(8); return o != 0 ? (Effekseer.FB.Effect.PositionParameter_PVA?)(new Effekseer.FB.Effect.PositionParameter_PVA()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.PositionParameter_Easing? Easing { get { int o = __p.__offset(10); return o != 0 ? (Effekseer.FB.Effect.PositionParameter_Easing?)(new Effekseer.FB.Effect.PositionParameter_Easing()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.PositionParameter_FCurve? Fcurve { get { int o = __p.__offset(12); return o != 0 ? (Effekseer.FB.Effect.PositionParameter_FCurve?)(new Effekseer.FB.Effect.PositionParameter_FCurve()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.PositionParameter_NurbsCurve? NurbsCurve { get { int o = __p.__offset(14); return o != 0 ? (Effekseer.FB.Effect.PositionParameter_NurbsCurve?)(new Effekseer.FB.Effect.PositionParameter_NurbsCurve()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.PositionParameter_ViewOffset? ViewOffset { get { int o = __p.__offset(16); return o != 0 ? (Effekseer.FB.Effect.PositionParameter_ViewOffset?)(new Effekseer.FB.Effect.PositionParameter_ViewOffset()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Effekseer.FB.Effect.PositionParameter> CreatePositionParameter(FlatBufferBuilder builder,
      Effekseer.FB.Effect.PositionType type = Effekseer.FB.Effect.PositionType.PositionType_Fixed,
      Offset<Effekseer.FB.Effect.PositionParameter_Fixed> fixedOffset = default(Offset<Effekseer.FB.Effect.PositionParameter_Fixed>),
      Offset<Effekseer.FB.Effect.PositionParameter_PVA> pvaOffset = default(Offset<Effekseer.FB.Effect.PositionParameter_PVA>),
      Offset<Effekseer.FB.Effect.PositionParameter_Easing> easingOffset = default(Offset<Effekseer.FB.Effect.PositionParameter_Easing>),
      Offset<Effekseer.FB.Effect.PositionParameter_FCurve> fcurveOffset = default(Offset<Effekseer.FB.Effect.PositionParameter_FCurve>),
      Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve> nurbs_curveOffset = default(Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve>),
      Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset> view_offsetOffset = default(Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset>)) {
    builder.StartTable(7);
    PositionParameter.AddViewOffset(builder, view_offsetOffset);
    PositionParameter.AddNurbsCurve(builder, nurbs_curveOffset);
    PositionParameter.AddFcurve(builder, fcurveOffset);
    PositionParameter.AddEasing(builder, easingOffset);
    PositionParameter.AddPva(builder, pvaOffset);
    PositionParameter.AddFixed(builder, fixedOffset);
    PositionParameter.AddType(builder, type);
    return PositionParameter.EndPositionParameter(builder);
  }

  public static void StartPositionParameter(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddType(FlatBufferBuilder builder, Effekseer.FB.Effect.PositionType type) { builder.AddInt(0, (int)type, 0); }
  public static void AddFixed(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter_Fixed> fixedOffset) { builder.AddOffset(1, fixedOffset.Value, 0); }
  public static void AddPva(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter_PVA> pvaOffset) { builder.AddOffset(2, pvaOffset.Value, 0); }
  public static void AddEasing(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter_Easing> easingOffset) { builder.AddOffset(3, easingOffset.Value, 0); }
  public static void AddFcurve(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter_FCurve> fcurveOffset) { builder.AddOffset(4, fcurveOffset.Value, 0); }
  public static void AddNurbsCurve(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve> nurbsCurveOffset) { builder.AddOffset(5, nurbsCurveOffset.Value, 0); }
  public static void AddViewOffset(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset> viewOffsetOffset) { builder.AddOffset(6, viewOffsetOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect.PositionParameter> EndPositionParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.PositionParameter>(o);
  }
  public PositionParameterT UnPack() {
    var _o = new PositionParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionParameterT _o) {
    _o.Type = this.Type;
    _o.Fixed = this.Fixed.HasValue ? this.Fixed.Value.UnPack() : null;
    _o.Pva = this.Pva.HasValue ? this.Pva.Value.UnPack() : null;
    _o.Easing = this.Easing.HasValue ? this.Easing.Value.UnPack() : null;
    _o.Fcurve = this.Fcurve.HasValue ? this.Fcurve.Value.UnPack() : null;
    _o.NurbsCurve = this.NurbsCurve.HasValue ? this.NurbsCurve.Value.UnPack() : null;
    _o.ViewOffset = this.ViewOffset.HasValue ? this.ViewOffset.Value.UnPack() : null;
  }
  public static Offset<Effekseer.FB.Effect.PositionParameter> Pack(FlatBufferBuilder builder, PositionParameterT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.PositionParameter>);
    var _fixed = _o.Fixed == null ? default(Offset<Effekseer.FB.Effect.PositionParameter_Fixed>) : Effekseer.FB.Effect.PositionParameter_Fixed.Pack(builder, _o.Fixed);
    var _pva = _o.Pva == null ? default(Offset<Effekseer.FB.Effect.PositionParameter_PVA>) : Effekseer.FB.Effect.PositionParameter_PVA.Pack(builder, _o.Pva);
    var _easing = _o.Easing == null ? default(Offset<Effekseer.FB.Effect.PositionParameter_Easing>) : Effekseer.FB.Effect.PositionParameter_Easing.Pack(builder, _o.Easing);
    var _fcurve = _o.Fcurve == null ? default(Offset<Effekseer.FB.Effect.PositionParameter_FCurve>) : Effekseer.FB.Effect.PositionParameter_FCurve.Pack(builder, _o.Fcurve);
    var _nurbs_curve = _o.NurbsCurve == null ? default(Offset<Effekseer.FB.Effect.PositionParameter_NurbsCurve>) : Effekseer.FB.Effect.PositionParameter_NurbsCurve.Pack(builder, _o.NurbsCurve);
    var _view_offset = _o.ViewOffset == null ? default(Offset<Effekseer.FB.Effect.PositionParameter_ViewOffset>) : Effekseer.FB.Effect.PositionParameter_ViewOffset.Pack(builder, _o.ViewOffset);
    return CreatePositionParameter(
      builder,
      _o.Type,
      _fixed,
      _pva,
      _easing,
      _fcurve,
      _nurbs_curve,
      _view_offset);
  }
};

public class PositionParameterT
{
  public Effekseer.FB.Effect.PositionType Type { get; set; }
  public Effekseer.FB.Effect.PositionParameter_FixedT Fixed { get; set; }
  public Effekseer.FB.Effect.PositionParameter_PVAT Pva { get; set; }
  public Effekseer.FB.Effect.PositionParameter_EasingT Easing { get; set; }
  public Effekseer.FB.Effect.PositionParameter_FCurveT Fcurve { get; set; }
  public Effekseer.FB.Effect.PositionParameter_NurbsCurveT NurbsCurve { get; set; }
  public Effekseer.FB.Effect.PositionParameter_ViewOffsetT ViewOffset { get; set; }

  public PositionParameterT() {
    this.Type = Effekseer.FB.Effect.PositionType.PositionType_Fixed;
    this.Fixed = null;
    this.Pva = null;
    this.Easing = null;
    this.Fcurve = null;
    this.NurbsCurve = null;
    this.ViewOffset = null;
  }
}


}
