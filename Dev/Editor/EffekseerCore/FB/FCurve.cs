// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum FCurveTimelineType : int
{
  FCurveTimelineType_Time = 0,
  FCurveTimelineType_Percent = 1,
};

public enum FCurveEdgeType : int
{
  FCurveEdgeType_Constant = 0,
  FCurveEdgeType_Loop = 1,
  FCurveEdgeType_LoopInversely = 2,
};

public struct FCurve : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FCurve GetRootAsFCurve(ByteBuffer _bb) { return GetRootAsFCurve(_bb, new FCurve()); }
  public static FCurve GetRootAsFCurve(ByteBuffer _bb, FCurve obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FCurve __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Offset { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Len { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Freq { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Effekseer.FB.FCurveEdgeType Start { get { int o = __p.__offset(10); return o != 0 ? (Effekseer.FB.FCurveEdgeType)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.FCurveEdgeType.FCurveEdgeType_Constant; } }
  public Effekseer.FB.FCurveEdgeType End { get { int o = __p.__offset(12); return o != 0 ? (Effekseer.FB.FCurveEdgeType)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.FCurveEdgeType.FCurveEdgeType_Constant; } }
  public float Keys(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int KeysLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetKeysBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetKeysBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetKeysArray() { return __p.__vector_as_array<float>(14); }
  public float DefaultValue { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OffsetMax { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OffsetMin { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Effekseer.FB.FCurve> CreateFCurve(FlatBufferBuilder builder,
      int offset = 0,
      int len = 0,
      int freq = 0,
      Effekseer.FB.FCurveEdgeType start = Effekseer.FB.FCurveEdgeType.FCurveEdgeType_Constant,
      Effekseer.FB.FCurveEdgeType end = Effekseer.FB.FCurveEdgeType.FCurveEdgeType_Constant,
      VectorOffset keysOffset = default(VectorOffset),
      float default_value = 0.0f,
      float offset_max = 0.0f,
      float offset_min = 0.0f) {
    builder.StartTable(9);
    FCurve.AddOffsetMin(builder, offset_min);
    FCurve.AddOffsetMax(builder, offset_max);
    FCurve.AddDefaultValue(builder, default_value);
    FCurve.AddKeys(builder, keysOffset);
    FCurve.AddEnd(builder, end);
    FCurve.AddStart(builder, start);
    FCurve.AddFreq(builder, freq);
    FCurve.AddLen(builder, len);
    FCurve.AddOffset(builder, offset);
    return FCurve.EndFCurve(builder);
  }

  public static void StartFCurve(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddOffset(FlatBufferBuilder builder, int offset) { builder.AddInt(0, offset, 0); }
  public static void AddLen(FlatBufferBuilder builder, int len) { builder.AddInt(1, len, 0); }
  public static void AddFreq(FlatBufferBuilder builder, int freq) { builder.AddInt(2, freq, 0); }
  public static void AddStart(FlatBufferBuilder builder, Effekseer.FB.FCurveEdgeType start) { builder.AddInt(3, (int)start, 0); }
  public static void AddEnd(FlatBufferBuilder builder, Effekseer.FB.FCurveEdgeType end) { builder.AddInt(4, (int)end, 0); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(5, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDefaultValue(FlatBufferBuilder builder, float defaultValue) { builder.AddFloat(6, defaultValue, 0.0f); }
  public static void AddOffsetMax(FlatBufferBuilder builder, float offsetMax) { builder.AddFloat(7, offsetMax, 0.0f); }
  public static void AddOffsetMin(FlatBufferBuilder builder, float offsetMin) { builder.AddFloat(8, offsetMin, 0.0f); }
  public static Offset<Effekseer.FB.FCurve> EndFCurve(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.FCurve>(o);
  }
  public FCurveT UnPack() {
    var _o = new FCurveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FCurveT _o) {
    _o.Offset = this.Offset;
    _o.Len = this.Len;
    _o.Freq = this.Freq;
    _o.Start = this.Start;
    _o.End = this.End;
    _o.Keys = new List<float>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j));}
    _o.DefaultValue = this.DefaultValue;
    _o.OffsetMax = this.OffsetMax;
    _o.OffsetMin = this.OffsetMin;
  }
  public static Offset<Effekseer.FB.FCurve> Pack(FlatBufferBuilder builder, FCurveT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.FCurve>);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = _o.Keys.ToArray();
      _keys = CreateKeysVector(builder, __keys);
    }
    return CreateFCurve(
      builder,
      _o.Offset,
      _o.Len,
      _o.Freq,
      _o.Start,
      _o.End,
      _keys,
      _o.DefaultValue,
      _o.OffsetMax,
      _o.OffsetMin);
  }
};

public class FCurveT
{
  public int Offset { get; set; }
  public int Len { get; set; }
  public int Freq { get; set; }
  public Effekseer.FB.FCurveEdgeType Start { get; set; }
  public Effekseer.FB.FCurveEdgeType End { get; set; }
  public List<float> Keys { get; set; }
  public float DefaultValue { get; set; }
  public float OffsetMax { get; set; }
  public float OffsetMin { get; set; }

  public FCurveT() {
    this.Offset = 0;
    this.Len = 0;
    this.Freq = 0;
    this.Start = Effekseer.FB.FCurveEdgeType.FCurveEdgeType_Constant;
    this.End = Effekseer.FB.FCurveEdgeType.FCurveEdgeType_Constant;
    this.Keys = null;
    this.DefaultValue = 0.0f;
    this.OffsetMax = 0.0f;
    this.OffsetMin = 0.0f;
  }
}

public struct FCurveGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FCurveGroup GetRootAsFCurveGroup(ByteBuffer _bb) { return GetRootAsFCurveGroup(_bb, new FCurveGroup()); }
  public static FCurveGroup GetRootAsFCurveGroup(ByteBuffer _bb, FCurveGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FCurveGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.FCurveTimelineType Timeline { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.FCurveTimelineType)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.FCurveTimelineType.FCurveTimelineType_Time; } }
  public Effekseer.FB.FCurve? Curves(int j) { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.FCurve?)(new Effekseer.FB.FCurve()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CurvesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Effekseer.FB.FCurveGroup> CreateFCurveGroup(FlatBufferBuilder builder,
      Effekseer.FB.FCurveTimelineType timeline = Effekseer.FB.FCurveTimelineType.FCurveTimelineType_Time,
      VectorOffset curvesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    FCurveGroup.AddCurves(builder, curvesOffset);
    FCurveGroup.AddTimeline(builder, timeline);
    return FCurveGroup.EndFCurveGroup(builder);
  }

  public static void StartFCurveGroup(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTimeline(FlatBufferBuilder builder, Effekseer.FB.FCurveTimelineType timeline) { builder.AddInt(0, (int)timeline, 0); }
  public static void AddCurves(FlatBufferBuilder builder, VectorOffset curvesOffset) { builder.AddOffset(1, curvesOffset.Value, 0); }
  public static VectorOffset CreateCurvesVector(FlatBufferBuilder builder, Offset<Effekseer.FB.FCurve>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCurvesVectorBlock(FlatBufferBuilder builder, Offset<Effekseer.FB.FCurve>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCurvesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Effekseer.FB.FCurveGroup> EndFCurveGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.FCurveGroup>(o);
  }
  public FCurveGroupT UnPack() {
    var _o = new FCurveGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FCurveGroupT _o) {
    _o.Timeline = this.Timeline;
    _o.Curves = new List<Effekseer.FB.FCurveT>();
    for (var _j = 0; _j < this.CurvesLength; ++_j) {_o.Curves.Add(this.Curves(_j).HasValue ? this.Curves(_j).Value.UnPack() : null);}
  }
  public static Offset<Effekseer.FB.FCurveGroup> Pack(FlatBufferBuilder builder, FCurveGroupT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.FCurveGroup>);
    var _curves = default(VectorOffset);
    if (_o.Curves != null) {
      var __curves = new Offset<Effekseer.FB.FCurve>[_o.Curves.Count];
      for (var _j = 0; _j < __curves.Length; ++_j) { __curves[_j] = Effekseer.FB.FCurve.Pack(builder, _o.Curves[_j]); }
      _curves = CreateCurvesVector(builder, __curves);
    }
    return CreateFCurveGroup(
      builder,
      _o.Timeline,
      _curves);
  }
};

public class FCurveGroupT
{
  public Effekseer.FB.FCurveTimelineType Timeline { get; set; }
  public List<Effekseer.FB.FCurveT> Curves { get; set; }

  public FCurveGroupT() {
    this.Timeline = Effekseer.FB.FCurveTimelineType.FCurveTimelineType_Time;
    this.Curves = null;
  }
}


}
