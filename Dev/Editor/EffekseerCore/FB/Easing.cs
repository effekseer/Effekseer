// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum Easing3Type : int
{
  StartEndSpeed = 0,
  Linear = 1,
  EaseInQuadratic = 10,
  EaseOutQuadratic = 11,
  EaseInOutQuadratic = 12,
  EaseInCubic = 20,
  EaseOutCubic = 21,
  EaseInOutCubic = 22,
  EaseInQuartic = 30,
  EaseOutQuartic = 31,
  EaseInOutQuartic = 32,
  EaseInQuintic = 40,
  EaseOutQuintic = 41,
  EaseInOutQuintic = 42,
  EaseInBack = 50,
  EaseOutBack = 51,
  EaseInOutBack = 52,
  EaseInBounce = 60,
  EaseOutBounce = 61,
  EaseInOutBounce = 62,
};

public struct EasingFloat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EasingFloat GetRootAsEasingFloat(ByteBuffer _bb) { return GetRootAsEasingFloat(_bb, new EasingFloat()); }
  public static EasingFloat GetRootAsEasingFloat(ByteBuffer _bb, EasingFloat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EasingFloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.RefMinMax? RefEqS { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.RefMinMax?)(new Effekseer.FB.RefMinMax()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.RefMinMax? RefEqE { get { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.RefMinMax?)(new Effekseer.FB.RefMinMax()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.RefMinMax? RefEqM { get { int o = __p.__offset(8); return o != 0 ? (Effekseer.FB.RefMinMax?)(new Effekseer.FB.RefMinMax()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.FloatRange? Start { get { int o = __p.__offset(10); return o != 0 ? (Effekseer.FB.FloatRange?)(new Effekseer.FB.FloatRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.FloatRange? End { get { int o = __p.__offset(12); return o != 0 ? (Effekseer.FB.FloatRange?)(new Effekseer.FB.FloatRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.FloatRange? Middle { get { int o = __p.__offset(14); return o != 0 ? (Effekseer.FB.FloatRange?)(new Effekseer.FB.FloatRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.Easing3Type Type { get { int o = __p.__offset(16); return o != 0 ? (Effekseer.FB.Easing3Type)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.Easing3Type.StartEndSpeed; } }
  public float Params(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ParamsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetParamsBytes() { return __p.__vector_as_span<float>(18, 4); }
#else
  public ArraySegment<byte>? GetParamsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public float[] GetParamsArray() { return __p.__vector_as_array<float>(18); }
  public int Channel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsMiddleEnabled { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsIndividualEnabled { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Effekseer.FB.Easing3Type Types(int j) { int o = __p.__offset(26); return o != 0 ? (Effekseer.FB.Easing3Type)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Effekseer.FB.Easing3Type)0; }
  public int TypesLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Effekseer.FB.Easing3Type> GetTypesBytes() { return __p.__vector_as_span<Effekseer.FB.Easing3Type>(26, 4); }
#else
  public ArraySegment<byte>? GetTypesBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public Effekseer.FB.Easing3Type[] GetTypesArray() { int o = __p.__offset(26); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Effekseer.FB.Easing3Type[] a = new Effekseer.FB.Easing3Type[l]; for (int i = 0; i < l; i++) { a[i] = (Effekseer.FB.Easing3Type)__p.bb.GetInt(p + i * 4); } return a; }

  public static void StartEasingFloat(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddRefEqS(FlatBufferBuilder builder, Offset<Effekseer.FB.RefMinMax> refEqSOffset) { builder.AddStruct(0, refEqSOffset.Value, 0); }
  public static void AddRefEqE(FlatBufferBuilder builder, Offset<Effekseer.FB.RefMinMax> refEqEOffset) { builder.AddStruct(1, refEqEOffset.Value, 0); }
  public static void AddRefEqM(FlatBufferBuilder builder, Offset<Effekseer.FB.RefMinMax> refEqMOffset) { builder.AddStruct(2, refEqMOffset.Value, 0); }
  public static void AddStart(FlatBufferBuilder builder, Offset<Effekseer.FB.FloatRange> startOffset) { builder.AddStruct(3, startOffset.Value, 0); }
  public static void AddEnd(FlatBufferBuilder builder, Offset<Effekseer.FB.FloatRange> endOffset) { builder.AddStruct(4, endOffset.Value, 0); }
  public static void AddMiddle(FlatBufferBuilder builder, Offset<Effekseer.FB.FloatRange> middleOffset) { builder.AddStruct(5, middleOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Effekseer.FB.Easing3Type type) { builder.AddInt(6, (int)type, 0); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(7, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChannel(FlatBufferBuilder builder, int channel) { builder.AddInt(8, channel, 0); }
  public static void AddIsMiddleEnabled(FlatBufferBuilder builder, bool isMiddleEnabled) { builder.AddBool(9, isMiddleEnabled, false); }
  public static void AddIsIndividualEnabled(FlatBufferBuilder builder, bool isIndividualEnabled) { builder.AddBool(10, isIndividualEnabled, false); }
  public static void AddTypes(FlatBufferBuilder builder, VectorOffset typesOffset) { builder.AddOffset(11, typesOffset.Value, 0); }
  public static VectorOffset CreateTypesVector(FlatBufferBuilder builder, Effekseer.FB.Easing3Type[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTypesVectorBlock(FlatBufferBuilder builder, Effekseer.FB.Easing3Type[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Effekseer.FB.EasingFloat> EndEasingFloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.EasingFloat>(o);
  }
};

public struct EasingVec3F : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EasingVec3F GetRootAsEasingVec3F(ByteBuffer _bb) { return GetRootAsEasingVec3F(_bb, new EasingVec3F()); }
  public static EasingVec3F GetRootAsEasingVec3F(ByteBuffer _bb, EasingVec3F obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EasingVec3F __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.Vec3FRange? Start { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.Vec3FRange?)(new Effekseer.FB.Vec3FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.Vec3FRange? End { get { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.Vec3FRange?)(new Effekseer.FB.Vec3FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.Vec3FRange? Middle { get { int o = __p.__offset(8); return o != 0 ? (Effekseer.FB.Vec3FRange?)(new Effekseer.FB.Vec3FRange()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Effekseer.FB.Easing3Type Type { get { int o = __p.__offset(10); return o != 0 ? (Effekseer.FB.Easing3Type)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.Easing3Type.StartEndSpeed; } }
  public float Params(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ParamsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetParamsBytes() { return __p.__vector_as_span<float>(12, 4); }
#else
  public ArraySegment<byte>? GetParamsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetParamsArray() { return __p.__vector_as_array<float>(12); }
  public int Channel { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsMiddleEnabled { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsIndividualEnabled { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Effekseer.FB.Easing3Type Types(int j) { int o = __p.__offset(20); return o != 0 ? (Effekseer.FB.Easing3Type)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Effekseer.FB.Easing3Type)0; }
  public int TypesLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Effekseer.FB.Easing3Type> GetTypesBytes() { return __p.__vector_as_span<Effekseer.FB.Easing3Type>(20, 4); }
#else
  public ArraySegment<byte>? GetTypesBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public Effekseer.FB.Easing3Type[] GetTypesArray() { int o = __p.__offset(20); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Effekseer.FB.Easing3Type[] a = new Effekseer.FB.Easing3Type[l]; for (int i = 0; i < l; i++) { a[i] = (Effekseer.FB.Easing3Type)__p.bb.GetInt(p + i * 4); } return a; }

  public static void StartEasingVec3F(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddStart(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FRange> startOffset) { builder.AddStruct(0, startOffset.Value, 0); }
  public static void AddEnd(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FRange> endOffset) { builder.AddStruct(1, endOffset.Value, 0); }
  public static void AddMiddle(FlatBufferBuilder builder, Offset<Effekseer.FB.Vec3FRange> middleOffset) { builder.AddStruct(2, middleOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Effekseer.FB.Easing3Type type) { builder.AddInt(3, (int)type, 0); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(4, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChannel(FlatBufferBuilder builder, int channel) { builder.AddInt(5, channel, 0); }
  public static void AddIsMiddleEnabled(FlatBufferBuilder builder, bool isMiddleEnabled) { builder.AddBool(6, isMiddleEnabled, false); }
  public static void AddIsIndividualEnabled(FlatBufferBuilder builder, bool isIndividualEnabled) { builder.AddBool(7, isIndividualEnabled, false); }
  public static void AddTypes(FlatBufferBuilder builder, VectorOffset typesOffset) { builder.AddOffset(8, typesOffset.Value, 0); }
  public static VectorOffset CreateTypesVector(FlatBufferBuilder builder, Effekseer.FB.Easing3Type[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTypesVectorBlock(FlatBufferBuilder builder, Effekseer.FB.Easing3Type[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Effekseer.FB.EasingVec3F> EndEasingVec3F(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.EasingVec3F>(o);
  }
};


}
