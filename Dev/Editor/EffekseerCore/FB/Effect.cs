// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Effect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Effect GetRootAsEffect(ByteBuffer _bb) { return GetRootAsEffect(_bb, new Effect()); }
  public static Effect GetRootAsEffect(ByteBuffer _bb, Effect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Effect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.TextureProperty? Textures(int j) { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.TextureProperty?)(new Effekseer.FB.TextureProperty()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TexturesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Effekseer.FB.Node? RootNode { get { int o = __p.__offset(6); return o != 0 ? (Effekseer.FB.Node?)(new Effekseer.FB.Node()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Effekseer.FB.Effect> CreateEffect(FlatBufferBuilder builder,
      VectorOffset texturesOffset = default(VectorOffset),
      Offset<Effekseer.FB.Node> root_nodeOffset = default(Offset<Effekseer.FB.Node>)) {
    builder.StartTable(2);
    Effect.AddRootNode(builder, root_nodeOffset);
    Effect.AddTextures(builder, texturesOffset);
    return Effect.EndEffect(builder);
  }

  public static void StartEffect(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTextures(FlatBufferBuilder builder, VectorOffset texturesOffset) { builder.AddOffset(0, texturesOffset.Value, 0); }
  public static VectorOffset CreateTexturesVector(FlatBufferBuilder builder, Offset<Effekseer.FB.TextureProperty>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTexturesVectorBlock(FlatBufferBuilder builder, Offset<Effekseer.FB.TextureProperty>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTexturesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRootNode(FlatBufferBuilder builder, Offset<Effekseer.FB.Node> rootNodeOffset) { builder.AddOffset(1, rootNodeOffset.Value, 0); }
  public static Offset<Effekseer.FB.Effect> EndEffect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect>(o);
  }
  public static void FinishEffectBuffer(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEffectBuffer(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
