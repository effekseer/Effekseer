// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vec3F : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3F __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Effekseer.FB.Vec3F> CreateVec3F(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Effekseer.FB.Vec3F>(builder.Offset);
  }
  public Vec3FT UnPack() {
    var _o = new Vec3FT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3FT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<Effekseer.FB.Vec3F> Pack(FlatBufferBuilder builder, Vec3FT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Vec3F>);
    return CreateVec3F(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vec3FT
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }

  public Vec3FT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct RefMinMax : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public RefMinMax __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Min { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Max { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Effekseer.FB.RefMinMax> CreateRefMinMax(FlatBufferBuilder builder, int Min, int Max) {
    builder.Prep(4, 8);
    builder.PutInt(Max);
    builder.PutInt(Min);
    return new Offset<Effekseer.FB.RefMinMax>(builder.Offset);
  }
  public RefMinMaxT UnPack() {
    var _o = new RefMinMaxT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RefMinMaxT _o) {
    _o.Min = this.Min;
    _o.Max = this.Max;
  }
  public static Offset<Effekseer.FB.RefMinMax> Pack(FlatBufferBuilder builder, RefMinMaxT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.RefMinMax>);
    return CreateRefMinMax(
      builder,
      _o.Min,
      _o.Max);
  }
};

public class RefMinMaxT
{
  public int Min { get; set; }
  public int Max { get; set; }

  public RefMinMaxT() {
    this.Min = 0;
    this.Max = 0;
  }
}

public struct IntRef : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public IntRef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RefEq { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Value { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Effekseer.FB.IntRef> CreateIntRef(FlatBufferBuilder builder, int RefEq, int Value) {
    builder.Prep(4, 8);
    builder.PutInt(Value);
    builder.PutInt(RefEq);
    return new Offset<Effekseer.FB.IntRef>(builder.Offset);
  }
  public IntRefT UnPack() {
    var _o = new IntRefT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntRefT _o) {
    _o.RefEq = this.RefEq;
    _o.Value = this.Value;
  }
  public static Offset<Effekseer.FB.IntRef> Pack(FlatBufferBuilder builder, IntRefT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.IntRef>);
    return CreateIntRef(
      builder,
      _o.RefEq,
      _o.Value);
  }
};

public class IntRefT
{
  public int RefEq { get; set; }
  public int Value { get; set; }

  public IntRefT() {
    this.RefEq = 0;
    this.Value = 0;
  }
}

public struct FloatRef : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public FloatRef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RefEq { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public float Value { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<Effekseer.FB.FloatRef> CreateFloatRef(FlatBufferBuilder builder, int RefEq, float Value) {
    builder.Prep(4, 8);
    builder.PutFloat(Value);
    builder.PutInt(RefEq);
    return new Offset<Effekseer.FB.FloatRef>(builder.Offset);
  }
  public FloatRefT UnPack() {
    var _o = new FloatRefT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatRefT _o) {
    _o.RefEq = this.RefEq;
    _o.Value = this.Value;
  }
  public static Offset<Effekseer.FB.FloatRef> Pack(FlatBufferBuilder builder, FloatRefT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.FloatRef>);
    return CreateFloatRef(
      builder,
      _o.RefEq,
      _o.Value);
  }
};

public class FloatRefT
{
  public int RefEq { get; set; }
  public float Value { get; set; }

  public FloatRefT() {
    this.RefEq = 0;
    this.Value = 0.0f;
  }
}

public struct IntRange : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public IntRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.RefMinMax RefEq { get { return (new Effekseer.FB.RefMinMax()).__assign(__p.bb_pos + 0, __p.bb); } }
  public int Min { get { return __p.bb.GetInt(__p.bb_pos + 8); } }
  public int Max { get { return __p.bb.GetInt(__p.bb_pos + 12); } }

  public static Offset<Effekseer.FB.IntRange> CreateIntRange(FlatBufferBuilder builder, int ref_eq_Min, int ref_eq_Max, int Min, int Max) {
    builder.Prep(4, 16);
    builder.PutInt(Max);
    builder.PutInt(Min);
    builder.Prep(4, 8);
    builder.PutInt(ref_eq_Max);
    builder.PutInt(ref_eq_Min);
    return new Offset<Effekseer.FB.IntRange>(builder.Offset);
  }
  public IntRangeT UnPack() {
    var _o = new IntRangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntRangeT _o) {
    _o.RefEq = this.RefEq.UnPack();
    _o.Min = this.Min;
    _o.Max = this.Max;
  }
  public static Offset<Effekseer.FB.IntRange> Pack(FlatBufferBuilder builder, IntRangeT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.IntRange>);
    var _ref_eq_min = _o.RefEq.Min;
    var _ref_eq_max = _o.RefEq.Max;
    return CreateIntRange(
      builder,
      _ref_eq_min,
      _ref_eq_max,
      _o.Min,
      _o.Max);
  }
};

public class IntRangeT
{
  public Effekseer.FB.RefMinMaxT RefEq { get; set; }
  public int Min { get; set; }
  public int Max { get; set; }

  public IntRangeT() {
    this.RefEq = new Effekseer.FB.RefMinMaxT();
    this.Min = 0;
    this.Max = 0;
  }
}

public struct FloatRange : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public FloatRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.RefMinMax RefEq { get { return (new Effekseer.FB.RefMinMax()).__assign(__p.bb_pos + 0, __p.bb); } }
  public float Min { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float Max { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<Effekseer.FB.FloatRange> CreateFloatRange(FlatBufferBuilder builder, int ref_eq_Min, int ref_eq_Max, float Min, float Max) {
    builder.Prep(4, 16);
    builder.PutFloat(Max);
    builder.PutFloat(Min);
    builder.Prep(4, 8);
    builder.PutInt(ref_eq_Max);
    builder.PutInt(ref_eq_Min);
    return new Offset<Effekseer.FB.FloatRange>(builder.Offset);
  }
  public FloatRangeT UnPack() {
    var _o = new FloatRangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatRangeT _o) {
    _o.RefEq = this.RefEq.UnPack();
    _o.Min = this.Min;
    _o.Max = this.Max;
  }
  public static Offset<Effekseer.FB.FloatRange> Pack(FlatBufferBuilder builder, FloatRangeT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.FloatRange>);
    var _ref_eq_min = _o.RefEq.Min;
    var _ref_eq_max = _o.RefEq.Max;
    return CreateFloatRange(
      builder,
      _ref_eq_min,
      _ref_eq_max,
      _o.Min,
      _o.Max);
  }
};

public class FloatRangeT
{
  public Effekseer.FB.RefMinMaxT RefEq { get; set; }
  public float Min { get; set; }
  public float Max { get; set; }

  public FloatRangeT() {
    this.RefEq = new Effekseer.FB.RefMinMaxT();
    this.Min = 0.0f;
    this.Max = 0.0f;
  }
}

public struct Vec3FRange : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3FRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.RefMinMax RefEq { get { return (new Effekseer.FB.RefMinMax()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Effekseer.FB.Vec3F Min { get { return (new Effekseer.FB.Vec3F()).__assign(__p.bb_pos + 8, __p.bb); } }
  public Effekseer.FB.Vec3F Max { get { return (new Effekseer.FB.Vec3F()).__assign(__p.bb_pos + 20, __p.bb); } }

  public static Offset<Effekseer.FB.Vec3FRange> CreateVec3FRange(FlatBufferBuilder builder, int ref_eq_Min, int ref_eq_Max, float min_X, float min_Y, float min_Z, float max_X, float max_Y, float max_Z) {
    builder.Prep(4, 32);
    builder.Prep(4, 12);
    builder.PutFloat(max_Z);
    builder.PutFloat(max_Y);
    builder.PutFloat(max_X);
    builder.Prep(4, 12);
    builder.PutFloat(min_Z);
    builder.PutFloat(min_Y);
    builder.PutFloat(min_X);
    builder.Prep(4, 8);
    builder.PutInt(ref_eq_Max);
    builder.PutInt(ref_eq_Min);
    return new Offset<Effekseer.FB.Vec3FRange>(builder.Offset);
  }
  public Vec3FRangeT UnPack() {
    var _o = new Vec3FRangeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3FRangeT _o) {
    _o.RefEq = this.RefEq.UnPack();
    _o.Min = this.Min.UnPack();
    _o.Max = this.Max.UnPack();
  }
  public static Offset<Effekseer.FB.Vec3FRange> Pack(FlatBufferBuilder builder, Vec3FRangeT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Vec3FRange>);
    var _ref_eq_min = _o.RefEq.Min;
    var _ref_eq_max = _o.RefEq.Max;
    var _min_x = _o.Min.X;
    var _min_y = _o.Min.Y;
    var _min_z = _o.Min.Z;
    var _max_x = _o.Max.X;
    var _max_y = _o.Max.Y;
    var _max_z = _o.Max.Z;
    return CreateVec3FRange(
      builder,
      _ref_eq_min,
      _ref_eq_max,
      _min_x,
      _min_y,
      _min_z,
      _max_x,
      _max_y,
      _max_z);
  }
};

public class Vec3FRangeT
{
  public Effekseer.FB.RefMinMaxT RefEq { get; set; }
  public Effekseer.FB.Vec3FT Min { get; set; }
  public Effekseer.FB.Vec3FT Max { get; set; }

  public Vec3FRangeT() {
    this.RefEq = new Effekseer.FB.RefMinMaxT();
    this.Min = new Effekseer.FB.Vec3FT();
    this.Max = new Effekseer.FB.Vec3FT();
  }
}


}
