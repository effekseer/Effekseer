// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB.Effect
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Node : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Node GetRootAsNode(ByteBuffer _bb) { return GetRootAsNode(_bb, new Node()); }
  public static Node GetRootAsNode(ByteBuffer _bb, Node obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.Effect.EffectNodeType Type { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.Effect.EffectNodeType)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.Effect.EffectNodeType.EffectNodeType_NoneType; } }
  public bool IsRendered { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Effekseer.FB.Effect.BasicParameter? BasicParameter { get { int o = __p.__offset(8); return o != 0 ? (Effekseer.FB.Effect.BasicParameter?)(new Effekseer.FB.Effect.BasicParameter()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.PositionParameter? PositionParameter { get { int o = __p.__offset(10); return o != 0 ? (Effekseer.FB.Effect.PositionParameter?)(new Effekseer.FB.Effect.PositionParameter()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Effect.Node? Children(int j) { int o = __p.__offset(12); return o != 0 ? (Effekseer.FB.Effect.Node?)(new Effekseer.FB.Effect.Node()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Effekseer.FB.Effect.Node> CreateNode(FlatBufferBuilder builder,
      Effekseer.FB.Effect.EffectNodeType type = Effekseer.FB.Effect.EffectNodeType.EffectNodeType_NoneType,
      bool is_rendered = false,
      Offset<Effekseer.FB.Effect.BasicParameter> basic_parameterOffset = default(Offset<Effekseer.FB.Effect.BasicParameter>),
      Offset<Effekseer.FB.Effect.PositionParameter> position_parameterOffset = default(Offset<Effekseer.FB.Effect.PositionParameter>),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Node.AddChildren(builder, childrenOffset);
    Node.AddPositionParameter(builder, position_parameterOffset);
    Node.AddBasicParameter(builder, basic_parameterOffset);
    Node.AddType(builder, type);
    Node.AddIsRendered(builder, is_rendered);
    return Node.EndNode(builder);
  }

  public static void StartNode(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddType(FlatBufferBuilder builder, Effekseer.FB.Effect.EffectNodeType type) { builder.AddInt(0, (int)type, 0); }
  public static void AddIsRendered(FlatBufferBuilder builder, bool isRendered) { builder.AddBool(1, isRendered, false); }
  public static void AddBasicParameter(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.BasicParameter> basicParameterOffset) { builder.AddOffset(2, basicParameterOffset.Value, 0); }
  public static void AddPositionParameter(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.PositionParameter> positionParameterOffset) { builder.AddOffset(3, positionParameterOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(4, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.Node>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<Effekseer.FB.Effect.Node>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Effekseer.FB.Effect.Node> EndNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Effect.Node>(o);
  }
  public NodeT UnPack() {
    var _o = new NodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NodeT _o) {
    _o.Type = this.Type;
    _o.IsRendered = this.IsRendered;
    _o.BasicParameter = this.BasicParameter.HasValue ? this.BasicParameter.Value.UnPack() : null;
    _o.PositionParameter = this.PositionParameter.HasValue ? this.PositionParameter.Value.UnPack() : null;
    _o.Children = new List<Effekseer.FB.Effect.NodeT>();
    for (var _j = 0; _j < this.ChildrenLength; ++_j) {_o.Children.Add(this.Children(_j).HasValue ? this.Children(_j).Value.UnPack() : null);}
  }
  public static Offset<Effekseer.FB.Effect.Node> Pack(FlatBufferBuilder builder, NodeT _o) {
    if (_o == null) return default(Offset<Effekseer.FB.Effect.Node>);
    var _basic_parameter = _o.BasicParameter == null ? default(Offset<Effekseer.FB.Effect.BasicParameter>) : Effekseer.FB.Effect.BasicParameter.Pack(builder, _o.BasicParameter);
    var _position_parameter = _o.PositionParameter == null ? default(Offset<Effekseer.FB.Effect.PositionParameter>) : Effekseer.FB.Effect.PositionParameter.Pack(builder, _o.PositionParameter);
    var _children = default(VectorOffset);
    if (_o.Children != null) {
      var __children = new Offset<Effekseer.FB.Effect.Node>[_o.Children.Count];
      for (var _j = 0; _j < __children.Length; ++_j) { __children[_j] = Effekseer.FB.Effect.Node.Pack(builder, _o.Children[_j]); }
      _children = CreateChildrenVector(builder, __children);
    }
    return CreateNode(
      builder,
      _o.Type,
      _o.IsRendered,
      _basic_parameter,
      _position_parameter,
      _children);
  }
};

public class NodeT
{
  public Effekseer.FB.Effect.EffectNodeType Type { get; set; }
  public bool IsRendered { get; set; }
  public Effekseer.FB.Effect.BasicParameterT BasicParameter { get; set; }
  public Effekseer.FB.Effect.PositionParameterT PositionParameter { get; set; }
  public List<Effekseer.FB.Effect.NodeT> Children { get; set; }

  public NodeT() {
    this.Type = Effekseer.FB.Effect.EffectNodeType.EffectNodeType_NoneType;
    this.IsRendered = false;
    this.BasicParameter = null;
    this.PositionParameter = null;
    this.Children = null;
  }
}


}
