// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Effekseer.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Node : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Node GetRootAsNode(ByteBuffer _bb) { return GetRootAsNode(_bb, new Node()); }
  public static Node GetRootAsNode(ByteBuffer _bb, Node obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Effekseer.FB.EffectNodeType Type { get { int o = __p.__offset(4); return o != 0 ? (Effekseer.FB.EffectNodeType)__p.bb.GetInt(o + __p.bb_pos) : Effekseer.FB.EffectNodeType.EffectNodeType_NoneType; } }
  public bool IsRendered { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Effekseer.FB.BasicSettings? BasicSettings { get { int o = __p.__offset(8); return o != 0 ? (Effekseer.FB.BasicSettings?)(new Effekseer.FB.BasicSettings()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Effekseer.FB.Node? Children(int j) { int o = __p.__offset(10); return o != 0 ? (Effekseer.FB.Node?)(new Effekseer.FB.Node()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Effekseer.FB.Node> CreateNode(FlatBufferBuilder builder,
      Effekseer.FB.EffectNodeType type = Effekseer.FB.EffectNodeType.EffectNodeType_NoneType,
      bool is_rendered = false,
      Offset<Effekseer.FB.BasicSettings> basic_settingsOffset = default(Offset<Effekseer.FB.BasicSettings>),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Node.AddChildren(builder, childrenOffset);
    Node.AddBasicSettings(builder, basic_settingsOffset);
    Node.AddType(builder, type);
    Node.AddIsRendered(builder, is_rendered);
    return Node.EndNode(builder);
  }

  public static void StartNode(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddType(FlatBufferBuilder builder, Effekseer.FB.EffectNodeType type) { builder.AddInt(0, (int)type, 0); }
  public static void AddIsRendered(FlatBufferBuilder builder, bool isRendered) { builder.AddBool(1, isRendered, false); }
  public static void AddBasicSettings(FlatBufferBuilder builder, Offset<Effekseer.FB.BasicSettings> basicSettingsOffset) { builder.AddOffset(2, basicSettingsOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(3, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Effekseer.FB.Node>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<Effekseer.FB.Node>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Effekseer.FB.Node> EndNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Effekseer.FB.Node>(o);
  }
};


}
